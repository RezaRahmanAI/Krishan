------------------------------------
----------Date: 1-03-2025-----------
---------------Rizve----------------
CREATE TABLE [dbo].[SMSPaymentMasters](
	[SMSPaymentMasterID] [int] IDENTITY(1,1) NOT NULL,
	[OpeningBalance] [decimal](18, 2) NOT NULL,
	[TotalRecAmt] [decimal](18, 2) NOT NULL,
	[ConcernID] [int] NOT NULL,
	[ParentID] [int] NOT NULL,
	[IsMasking] [int] NOT NULL,
	[PerSMSCharge] [decimal](18, 2) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_SMSPaymentMasters] PRIMARY KEY CLUSTERED 
(
	[SMSPaymentMasterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_OpeningBalance]  DEFAULT ((0)) FOR [OpeningBalance]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_ParentID]  DEFAULT ((0)) FOR [ParentID]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_IsMasking]  DEFAULT ((0)) FOR [IsMasking]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_PerSMSCharge]  DEFAULT ((0)) FOR [PerSMSCharge]
GO

ALTER TABLE [dbo].[SMSPaymentMasters]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasters_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[SMSPaymentMasters] CHECK CONSTRAINT [FK_SMSPaymentMasters_SisterConcerns]
GO

ALTER TABLE [dbo].[SMSPaymentMasters]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasters_Users] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[Users] ([Id])
GO

ALTER TABLE [dbo].[SMSPaymentMasters] CHECK CONSTRAINT [FK_SMSPaymentMasters_Users]
GO


-----------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE [dbo].[SMSPaymentMasterDetails](
	[SMSPaymentDetailsID] [int] IDENTITY(1,1) NOT NULL,
	[SMSPaymentMasterID] [int] NOT NULL,
	[ReceiptNo] [varchar](150) NOT NULL,
	[RecAmount] [decimal](18, 2) NOT NULL,
	[RecDate] [datetime] NOT NULL,
	[PaymentMobNo] [nvarchar](50) NULL,
	[TransactionId] [nvarchar](250) NULL,
	[TransactionStatus] [nvarchar](100) NULL,
	[StatusMessage] [nvarchar](100) NULL,
	[ErrorCocde] [nvarchar](50) NULL,
	[ErrorMessage] [nvarchar](500) NULL,
	[PaymentId] [nvarchar](150) NULL,
	[PaymentReference] [nvarchar](150) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[ConcernName] [nvarchar](500) NULL,
 CONSTRAINT [PK_SMSPaymentMasterDetails] PRIMARY KEY CLUSTERED 
(
	[SMSPaymentDetailsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails] ADD  CONSTRAINT [DF_SMSPaymentMasterDetails_RecAmount]  DEFAULT ((0)) FOR [RecAmount]
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasterDetails_SMSPaymentMasters] FOREIGN KEY([SMSPaymentMasterID])
REFERENCES [dbo].[SMSPaymentMasters] ([SMSPaymentMasterID])
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails] CHECK CONSTRAINT [FK_SMSPaymentMasterDetails_SMSPaymentMasters]
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasterDetails_Users] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[Users] ([Id])
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails] CHECK CONSTRAINT [FK_SMSPaymentMasterDetails_Users]
GO

-----------------------------------------------------------------------------------------------------------------------------

select * from SystemInformations where SMSServiceEnable=1 and SMSProviderID=0
update SystemInformations set SMSProviderID=4 where SMSServiceEnable=1 and SMSProviderID=0


INSERT INTO [dbo].[SMSPaymentMasters]([OpeningBalance],[TotalRecAmt],[ConcernID],[ParentID],[IsMasking],[PerSMSCharge],[CreatedBy],[CreateDate])
Select 0 OpeningBalance,0 TotalRecAmt,SI.ConcernID,SC.ParentID,SI.SMSProviderID,
CASE WHEN SI.SMSProviderID = 4 THEN 0.45 WHEN SI.SMSProviderID = 5 THEN 0.70
WHEN (SI.SMSProviderID!=4 and SI.SMSProviderID!=5) THEN 0.45
END PerSMSCharge
,U.Id,GETDATE() CreatedDate
from SystemInformations SI
Inner Join SisterConcerns SC on SC.ConcernID=SI.ConcernID
Inner Join Users U on SI.ConcernID=U.ConcernID and SI.SMSServiceEnable=1
Inner Join UserRoles UR on UR.UserId=U.Id and UR.RoleId=1
order by ConcernID

--SMSProviderID=5 for Musking
--SMSProviderID=4 for Non Musking


------------------------------------
----------Date: 1-03-2025-----------
---------------Rizve----------------

ALTER PROC [dbo].[UpdateSalesOrder]
(
	@UserId int,
	@SalesOrderId int,
	@SalesOrder [InsertSalesOrderTable] readonly,
	@SODetails [InsertSODetailTable] readonly,
	@EmployeeID int
)
  
AS 
 
 BEGIN TRY  
 BEGIN TRANSACTION 
 --status New=3,Updated=4,Deleted=5
UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - s.PaymentDue)
From SOrders s
JOIN Customers ON Customers.CustomerID = s.CustomerID
Where s.SOrderID = @SalesOrderId

UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue + s.PaymentDue)
from @SalesOrder s
JOIN Customers ON Customers.CustomerID = s.CustomerID

	IF(@EmployeeID!=0)
	BEGIN
		UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue-s.PaymentDue
		From SOrders s 
		JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
		where s.SOrderID=@SalesOrderId

		UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
		From @SalesOrder s 
		JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and @EmployeeID=ewc.EmployeeID
		--where s.SOrderID=@SalesOrderId 


	END

Update SOrders SET
InvoiceDate = s.InvoiceDate, InvoiceNo = s.InvoiceNo, CustomerID = s.CustomerID, VATPercentage = s.VATPercentage,
VATAmount = s.VATAmount, GrandTotal = s.GrandTotal, TDPercentage = s.TDiscountPercentage, TDAmount = s.TDiscountAmount,NetDiscount=s.NetDiscount,
TotalAmount = s.TotalAmount, PaymentDue = s.PaymentDue, RecAmount = s.RecAmt, AdjAmount = s.AdjAmount, TotalDue = s.TotalDue, Status = s.Status,
ConcernID = s.ConcernID, ModifiedBy = s.CreatedBy, ModifiedDate = s.CreateDate, Remarks = s.Remarks, TotalFractionAmt=s.TotalFractionAmt, Terms = s.Terms,
EmployeeID = @EmployeeID
FROM @SalesOrder s
Where SOrderID = @SalesOrderId

	--***************************
	--Return Old Products Start
	--***************************
	--Stock Details Nobarcode retunr
	UPDATE sd
	SET sd.Quantity = (sd.Quantity + s.Quantity),sd.Status=1
	FROM SOrderDetails s
	INNER JOIN StockDetails sd ON sd.SDetailID = s.SDetailID
	INNER JOIN @SODetails tsd ON s.SOrderDetailID= tsd.SOrderDetailID
	JOIN Products p on sd.ProductID=p.ProductID
	WHERE s.SOrderID=@SalesOrderId and p.ProductType=2 and tsd.Status=5

	Create Table #tmpStock(ProductID int, ColorID int, Qty decimal(18,2))

	INSERT INTO #tmpStock(ProductID,ColorID,Qty)
	(select s.ProductID,s.ColorID,SUM(s.Quantity)  From  @SODetails s
	where s.Status=5
	group by s.ProductId,s.ColorId
	)

	UPDATE st
	SET st.Quantity = (st.Quantity + sod.Qty)
	FROM #tmpStock sod
	INNER JOIN Stocks st ON st.ProductID = sod.ProductID and st.ColorID=sod.ColorID
	--***************************
	--Return Old products end
	--***************************

	--delete
	DELETE FROM SOrderDetails WHERE SOrderDetailID IN (SELECT SOrderDetailID FROM @SODetails WHERE Status = 5)

	--Stock out
	delete #tmpStock

    INSERT INTO #tmpStock(ProductID,ColorID,Qty)
	(select s.ProductID,s.ColorID,SUM(s.Quantity)  From  @SODetails s
	where  s.Status = 3 OR s.Status = 4
	group by s.ProductId,s.ColorId
	)

	DECLARE @prevQty DECIMAL(18,2) = (SELECT ISNULL(SUM(s.Quantity), 0) FROM @SODetails s
	INNER JOIN Products P On s.ProductId = p.ProductID
	WHERE s.Status = 4 AND p.ProductType !=2)

	UPDATE st
	SET st.Quantity = ((st.Quantity - sod.Qty) + @prevQty),ModifiedBy=@UserId,ModifiedDate=GETDATE()
	FROM #tmpStock sod
	INNER JOIN Stocks st ON st.ProductID = sod.ProductID and st.ColorID=sod.ColorID
	INNER JOIN Products p ON p.ProductID = st.ProductID
	where p.ProductType !=2

	UPDATE st
	SET st.Quantity = ((st.Quantity - sod.Qty)),ModifiedBy=@UserId,ModifiedDate=GETDATE()
	FROM #tmpStock sod
	INNER JOIN Stocks st ON st.ProductID = sod.ProductID and st.ColorID=sod.ColorID
	INNER JOIN Products p ON p.ProductID = st.ProductID
	where p.ProductType =2

	--Stock Details out for Autobarcode or Existing Barcode
	UPDATE StockDetails
	SET StockDetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
	JOIN Products p on s.ProductId = p.ProductID
	WHERE (s.Status = 3 OR s.Status = 4) and p.ProductType!=2

-- For No barcode Stock Details out and SOrderDetails Insert
DECLARE @ProductID INT
DECLARE @StockID INT
DECLARE @GodownID INT
DECLARE @SDetailID INT
DECLARE @ColorID INT
DECLARE @SalesRate INT
DECLARE @PRate INT
DECLARE @POrderDetailID INT
DECLARE @SOrderDetailID INT
DECLARE @Quantity decimal(18,2)
DECLARE @StockQty decimal(18,2)
DECLARE @UnitPrice INT
DECLARE @MRPRate INT

DECLARE cur CURSOR LOCAL FOR
SELECT s.ProductId,
       s.colorid,
       s.quantity,
       sorderdetailid
FROM @SODetails s
JOIN products ON products.productid = s.productid
WHERE products.ProductType = 2 AND s.Status = 3

OPEN cur

FETCH NEXT
FROM cur
INTO @ProductID,
     @ColorID,
     @Quantity,
     @SOrderDetailID
WHILE @@FETCH_STATUS = 0
BEGIN
    WHILE (@Quantity != 0)
    BEGIN
        -- Get the first available stock detail
        SET @SDetailID = (
            SELECT MIN(SDetailID)
            FROM stockdetails
            WHERE productid = @ProductID AND colorid = @ColorID
            AND quantity != 0 AND STATUS = 1
        )

        -- Get the stock quantity
        SET @StockQty = (
            SELECT quantity
            FROM stockdetails
            WHERE sdetailid = @SDetailID
        )

        IF (@StockQty > @Quantity)
        BEGIN
            -- If stock quantity is greater than the order quantity
            SET @StockQty = @StockQty - @Quantity

            -- Update stock details
            UPDATE stockdetails
            SET quantity = @StockQty
            WHERE sdetailid = @SDetailID			

            -- Insert into order details

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty,srate, prate
)
SELECT TOP 1 SOD.ProductId, @Quantity, SOD.UnitPrice, (SOD.UnitPrice - SOD.PPDisAmt) * @Quantity,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, @SDetailID,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
SOD.SFTRate ,SOD.TotalSFT,FractionAmt,FractionQty,(SOD.unitprice - SOD.ppdisamt), STD.prate
FROM @SODetails SOD
INNER JOIN stockdetails STD ON STD.sdetailid = @SDetailID
INNER JOIN products p ON STD.productid = p.productid
WHERE SOD.productid = @ProductID
AND SOD.colorid = @ColorID
AND STD.SDetailID = @SDetailID
AND SOD.Status = 3
-- Set quantity to 0 as it's processed
SET @Quantity = 0

END
ELSE IF (@StockQty < @Quantity)
BEGIN
-- If stock quantity is less than order quantity
SET @Quantity = @Quantity - @StockQty

-- Update stock to 0 and change status to 2 (unavailable)
UPDATE stockdetails
SET quantity = 0,
STATUS = 2
WHERE sdetailid = @SDetailID

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty,srate, prate
)
SELECT TOP 1 SOD.ProductId, @StockQty, SOD.UnitPrice, (SOD.UnitPrice - SOD.PPDisAmt) * @StockQty,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, @SDetailID,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
SOD.SFTRate ,SOD.TotalSFT,FractionAmt,FractionQty,(SOD.unitprice - SOD.ppdisamt), STD.prate
FROM @SODetails SOD
INNER JOIN stockdetails STD ON STD.sdetailid = @SDetailID
INNER JOIN products p ON STD.productid = p.productid
WHERE SOD.productid = @ProductID
AND SOD.colorid = @ColorID
AND STD.SDetailID = @SDetailID
AND SOD.Status = 3

END
ELSE
BEGIN
-- If stock quantity equals the order quantity, mark as processed
UPDATE stockdetails
SET quantity = 0,
STATUS = 2
WHERE sdetailid = @SDetailID

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty,srate, prate
)
SELECT TOP 1 SOD.ProductId, @Quantity, SOD.UnitPrice, (SOD.UnitPrice - SOD.PPDisAmt) * @Quantity,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, @SDetailID,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
SOD.SFTRate ,SOD.TotalSFT,FractionAmt,FractionQty,(SOD.unitprice - SOD.ppdisamt), STD.prate
FROM @SODetails SOD
INNER JOIN stockdetails STD ON STD.sdetailid = @SDetailID
INNER JOIN products p ON STD.productid = p.productid
WHERE SOD.productid = @ProductID
AND SOD.colorid = @ColorID
AND STD.SDetailID = @SDetailID
AND SOD.Status = 3

-- Set quantity to 0 as it's processed
SET @Quantity = 0
END
END

    FETCH NEXT
    FROM cur
    INTO @ProductID,
         @ColorID,
         @Quantity,
         @SOrderDetailID
END

CLOSE cur
DEALLOCATE cur
-----------------------------------------------OLD Start------------------------------------------------------------------------------------
--Update SOrderDetails
--SET SOrderDetails.ProductID = SD.ProductId, SOrderDetails.Quantity = SD.Quantity, SOrderDetails.UnitPrice = SD.UnitPrice, 
--SOrderDetails.UTAmount = SD.TAmount, SOrderDetails.PPDPercentage = SD.PPDisPer, SOrderDetails.PPDAmount = SD.PPDisAmt,
--SOrderDetails.MPRate = SD.MrpRate, SOrderDetails.SOrderID = @SalesOrderId, SOrderDetails.SDetailID = SD.StockDetailId,
--SOrderDetails.Compressor=p.CompressorWarrentyMonth,SOrderDetails.Motor=p.MotorWarrentyMonth,SOrderDetails.Panel=p.PanelWarrentyMonth,
--SOrderDetails.Spareparts=p.SparePartsWarrentyMonth,SOrderDetails.Service = p.ServiceWarrentyMonth,
--SOrderDetails.SFTRate=SD.SFTRate,SORderDetails.TotalSFT=SD.TotalSFT,
--SOrderDetails.FractionQty=SD.FractionQty,SORderDetails.FractionAmt=SD.FractionAmt
--FROM @SODetails SD
--join Products p on SD.ProductId = p.ProductID
--WHERE SD.Status = 4

--INSERT INTO SOrderDetails
--(
--ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
--SFTRate,TotalSFT,FractionAmt,FractionQty
--)
--(
--Select sd.ProductId, Quantity, UnitPrice, TAmount,  PPDisPer,
--PPDisAmt, MrpRate, @SalesOrderId SOrderID, StockDetailId,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
--sd.SFTRate ,TotalSFT,FractionAmt,FractionQty
--from @SODetails sd
--join Products p on sd.ProductID = p.ProductID
--WHERE Status = 3
--)

--DELETE FROM SOrderDetails WHERE SOrderDetailID IN (SELECT SOrderDetailID FROM @SODetails WHERE Status = 5)

--UPDATE Stocks
--SET Stocks.Quantity = (Stocks.Quantity - s.Quantity),Stocks.TotalSFT = (Stocks.TotalSFT - s.TotalSFT)
--from @SODetails s
--JOIN Stocks ON Stocks.ProductID = s.ProductId AND Stocks.ColorID = s.ColorId
--WHERE s.Status = 3 OR s.Status = 4

--UPDATE StockDetails SET StockDetails.Status = 2,StockDetails.TotalSFT = (StockDetails.TotalSFT - s.TotalSFT)
--from @SODetails s
--JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
--WHERE s.Status = 3 OR s.Status = 4

--UPDATE Stocks SET Stocks.Quantity = (Stocks.Quantity + s.Quantity),Stocks.TotalSFT = (Stocks.TotalSFT + s.TotalSFT), ModifiedBy = @UserId, ModifiedDate = GETDATE()
--from @SODetails s
--JOIN Stocks ON Stocks.ProductID = s.ProductId AND Stocks.ColorID = s.ColorId 
--WHERE s.Status = 5

--UPDATE StockDetails
--SET StockDetails.Status = 1,StockDetails.TotalSFT = (StockDetails.TotalSFT + s.TotalSFT)
--from @SODetails s
--JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
--WHERE s.Status = 5

-----------------------------------------------OLD END------------------------------------------------------------------------------------

--For barCode Product SRVisit Status update
UPDATE SRVProductDetails
SET SRVProductDetails.Status = 2
from @SODetails s
JOIN SRVProductDetails ON SRVProductDetails.SDetailID = s.StockDetailId
join Products on SRVProductDetails.ProductID = Products.ProductID
where Products.ProductType=1 or Products.ProductType=3 and s.Status = 3 OR s.Status = 4


UPDATE SRVProductDetails
SET SRVProductDetails.Status = 3
from @SODetails s
JOIN SRVProductDetails ON SRVProductDetails.SDetailID = s.StockDetailId
join Products on SRVProductDetails.ProductID = Products.ProductID
where Products.ProductType=1 or Products.ProductType=3 and s.Status = 5


COMMIT

RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH
GO




------------------------------------
-------Date: 22-01-2025-------------
---------------Nahid----------------


ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, IsApproved, IsAdvanceSale,PayCashAccountId,Terms, PayBankId, 
	 CartonPercentage, CartonAmt, CashBPercentage, CashBAmt, YearlyBPercentage, YearlyBnsAmt, AfterCartonAmt, AfterCashAmt, AfterYearlyAmt)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, 1, 0, PayCashAccountId,Terms, PayBankId,
	  CartonPercentage, CartonAmt, CashBPercentage, CashBAmt, YearlyBPercentage, YearlyBnsAmt, AfterCartonAmt, AfterCashAmt, AfterYearlyAmt  FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL


	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL


UPDATE CashAccounts Set CashAccounts.TotalBalance = (CashAccounts.TotalBalance + s.RecAmt)
from @SalesOrder s
JOIN CashAccounts ON CashAccounts.Id = s.PayCashAccountId

UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount + s.RecAmt)
from @SalesOrder s
JOIN Banks ON Banks.BankID = s.PayBankId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,(SOD.UnitPrice - SOD.PPDisAmt) * @Quantity, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0				
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, (SOD.UnitPrice - SOD.PPDisAmt) * @StockQty, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, (SOD.UnitPrice - SOD.PPDisAmt) * @Quantity, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

----------------------------------------------------------------------------------------------------------------------------


ALTER PROC [dbo].[UpdateSalesOrder]
(
	@UserId int,
	@SalesOrderId int,
	@SalesOrder [InsertSalesOrderTable] readonly,
	@SODetails [InsertSODetailTable] readonly,
	@EmployeeID int
)
  
AS 
 
 BEGIN TRY  
 BEGIN TRANSACTION 
 --status New=3,Updated=4,Deleted=5
UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - s.PaymentDue)
From SOrders s
JOIN Customers ON Customers.CustomerID = s.CustomerID
Where s.SOrderID = @SalesOrderId

UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue + s.PaymentDue)
from @SalesOrder s
JOIN Customers ON Customers.CustomerID = s.CustomerID

	IF(@EmployeeID!=0)
	BEGIN
		UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue-s.PaymentDue
		From SOrders s 
		JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
		where s.SOrderID=@SalesOrderId

		UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
		From @SalesOrder s 
		JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and @EmployeeID=ewc.EmployeeID
		--where s.SOrderID=@SalesOrderId 


	END

Update SOrders SET
InvoiceDate = s.InvoiceDate, InvoiceNo = s.InvoiceNo, CustomerID = s.CustomerID, VATPercentage = s.VATPercentage,
VATAmount = s.VATAmount, GrandTotal = s.GrandTotal, TDPercentage = s.TDiscountPercentage, TDAmount = s.TDiscountAmount,NetDiscount=s.NetDiscount,
TotalAmount = s.TotalAmount, PaymentDue = s.PaymentDue, RecAmount = s.RecAmt, AdjAmount = s.AdjAmount, TotalDue = s.TotalDue, Status = s.Status,
ConcernID = s.ConcernID, ModifiedBy = s.CreatedBy, ModifiedDate = s.CreateDate, Remarks = s.Remarks, TotalFractionAmt=s.TotalFractionAmt,
EmployeeID = @EmployeeID
FROM @SalesOrder s
Where SOrderID = @SalesOrderId

	--***************************
	--Return Old Products Start
	--***************************
	--Stock Details Nobarcode retunr
	UPDATE sd
	SET sd.Quantity = (sd.Quantity + s.Quantity),sd.Status=1
	FROM SOrderDetails s
	INNER JOIN StockDetails sd ON sd.SDetailID = s.SDetailID
	INNER JOIN @SODetails tsd ON s.SOrderDetailID= tsd.SOrderDetailID
	JOIN Products p on sd.ProductID=p.ProductID
	WHERE s.SOrderID=@SalesOrderId and p.ProductType=2 and tsd.Status=5

	Create Table #tmpStock(ProductID int, ColorID int, Qty decimal(18,2))

	INSERT INTO #tmpStock(ProductID,ColorID,Qty)
	(select s.ProductID,s.ColorID,SUM(s.Quantity)  From  @SODetails s
	where s.Status=5
	group by s.ProductId,s.ColorId
	)

	UPDATE st
	SET st.Quantity = (st.Quantity + sod.Qty)
	FROM #tmpStock sod
	INNER JOIN Stocks st ON st.ProductID = sod.ProductID and st.ColorID=sod.ColorID
	--***************************
	--Return Old products end
	--***************************

	--delete
	DELETE FROM SOrderDetails WHERE SOrderDetailID IN (SELECT SOrderDetailID FROM @SODetails WHERE Status = 5)

	--Stock out
	delete #tmpStock

    INSERT INTO #tmpStock(ProductID,ColorID,Qty)
	(select s.ProductID,s.ColorID,SUM(s.Quantity)  From  @SODetails s
	where  s.Status = 3 OR s.Status = 4
	group by s.ProductId,s.ColorId
	)

	DECLARE @prevQty DECIMAL(18,2) = (SELECT ISNULL(SUM(s.Quantity), 0) FROM @SODetails s
	INNER JOIN Products P On s.ProductId = p.ProductID
	WHERE s.Status = 4 AND p.ProductType !=2)

	UPDATE st
	SET st.Quantity = ((st.Quantity - sod.Qty) + @prevQty),ModifiedBy=@UserId,ModifiedDate=GETDATE()
	FROM #tmpStock sod
	INNER JOIN Stocks st ON st.ProductID = sod.ProductID and st.ColorID=sod.ColorID
	INNER JOIN Products p ON p.ProductID = st.ProductID
	where p.ProductType !=2

	UPDATE st
	SET st.Quantity = ((st.Quantity - sod.Qty)),ModifiedBy=@UserId,ModifiedDate=GETDATE()
	FROM #tmpStock sod
	INNER JOIN Stocks st ON st.ProductID = sod.ProductID and st.ColorID=sod.ColorID
	INNER JOIN Products p ON p.ProductID = st.ProductID
	where p.ProductType =2

	--Stock Details out for Autobarcode or Existing Barcode
	UPDATE StockDetails
	SET StockDetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
	JOIN Products p on s.ProductId = p.ProductID
	WHERE (s.Status = 3 OR s.Status = 4) and p.ProductType!=2

-- For No barcode Stock Details out and SOrderDetails Insert
DECLARE @ProductID INT
DECLARE @StockID INT
DECLARE @GodownID INT
DECLARE @SDetailID INT
DECLARE @ColorID INT
DECLARE @SalesRate INT
DECLARE @PRate INT
DECLARE @POrderDetailID INT
DECLARE @SOrderDetailID INT
DECLARE @Quantity decimal(18,2)
DECLARE @StockQty decimal(18,2)
DECLARE @UnitPrice INT
DECLARE @MRPRate INT

DECLARE cur CURSOR LOCAL FOR
SELECT s.ProductId,
       s.colorid,
       s.quantity,
       sorderdetailid
FROM @SODetails s
JOIN products ON products.productid = s.productid
WHERE products.ProductType = 2 AND s.Status = 3

OPEN cur

FETCH NEXT
FROM cur
INTO @ProductID,
     @ColorID,
     @Quantity,
     @SOrderDetailID
WHILE @@FETCH_STATUS = 0
BEGIN
    WHILE (@Quantity != 0)
    BEGIN
        -- Get the first available stock detail
        SET @SDetailID = (
            SELECT MIN(SDetailID)
            FROM stockdetails
            WHERE productid = @ProductID AND colorid = @ColorID
            AND quantity != 0 AND STATUS = 1
        )

        -- Get the stock quantity
        SET @StockQty = (
            SELECT quantity
            FROM stockdetails
            WHERE sdetailid = @SDetailID
        )

        IF (@StockQty > @Quantity)
        BEGIN
            -- If stock quantity is greater than the order quantity
            SET @StockQty = @StockQty - @Quantity

            -- Update stock details
            UPDATE stockdetails
            SET quantity = @StockQty
            WHERE sdetailid = @SDetailID			

            -- Insert into order details

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty,srate, prate
)
SELECT TOP 1 SOD.ProductId, @Quantity, SOD.UnitPrice, (SOD.UnitPrice - SOD.PPDisAmt) * @Quantity,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, @SDetailID,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
SOD.SFTRate ,SOD.TotalSFT,FractionAmt,FractionQty,(SOD.unitprice - SOD.ppdisamt), STD.prate
FROM @SODetails SOD
INNER JOIN stockdetails STD ON STD.sdetailid = @SDetailID
INNER JOIN products p ON STD.productid = p.productid
WHERE SOD.productid = @ProductID
AND SOD.colorid = @ColorID
AND STD.SDetailID = @SDetailID
AND SOD.Status = 3
-- Set quantity to 0 as it's processed
SET @Quantity = 0

END
ELSE IF (@StockQty < @Quantity)
BEGIN
-- If stock quantity is less than order quantity
SET @Quantity = @Quantity - @StockQty

-- Update stock to 0 and change status to 2 (unavailable)
UPDATE stockdetails
SET quantity = 0,
STATUS = 2
WHERE sdetailid = @SDetailID

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty,srate, prate
)
SELECT TOP 1 SOD.ProductId, @StockQty, SOD.UnitPrice, (SOD.UnitPrice - SOD.PPDisAmt) * @StockQty,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, @SDetailID,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
SOD.SFTRate ,SOD.TotalSFT,FractionAmt,FractionQty,(SOD.unitprice - SOD.ppdisamt), STD.prate
FROM @SODetails SOD
INNER JOIN stockdetails STD ON STD.sdetailid = @SDetailID
INNER JOIN products p ON STD.productid = p.productid
WHERE SOD.productid = @ProductID
AND SOD.colorid = @ColorID
AND STD.SDetailID = @SDetailID
AND SOD.Status = 3

END
ELSE
BEGIN
-- If stock quantity equals the order quantity, mark as processed
UPDATE stockdetails
SET quantity = 0,
STATUS = 2
WHERE sdetailid = @SDetailID

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty,srate, prate
)
SELECT TOP 1 SOD.ProductId, @Quantity, SOD.UnitPrice, (SOD.UnitPrice - SOD.PPDisAmt) * @Quantity,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, @SDetailID,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
SOD.SFTRate ,SOD.TotalSFT,FractionAmt,FractionQty,(SOD.unitprice - SOD.ppdisamt), STD.prate
FROM @SODetails SOD
INNER JOIN stockdetails STD ON STD.sdetailid = @SDetailID
INNER JOIN products p ON STD.productid = p.productid
WHERE SOD.productid = @ProductID
AND SOD.colorid = @ColorID
AND STD.SDetailID = @SDetailID
AND SOD.Status = 3

-- Set quantity to 0 as it's processed
SET @Quantity = 0
END
END

    FETCH NEXT
    FROM cur
    INTO @ProductID,
         @ColorID,
         @Quantity,
         @SOrderDetailID
END

CLOSE cur
DEALLOCATE cur
-----------------------------------------------OLD Start------------------------------------------------------------------------------------
--Update SOrderDetails
--SET SOrderDetails.ProductID = SD.ProductId, SOrderDetails.Quantity = SD.Quantity, SOrderDetails.UnitPrice = SD.UnitPrice, 
--SOrderDetails.UTAmount = SD.TAmount, SOrderDetails.PPDPercentage = SD.PPDisPer, SOrderDetails.PPDAmount = SD.PPDisAmt,
--SOrderDetails.MPRate = SD.MrpRate, SOrderDetails.SOrderID = @SalesOrderId, SOrderDetails.SDetailID = SD.StockDetailId,
--SOrderDetails.Compressor=p.CompressorWarrentyMonth,SOrderDetails.Motor=p.MotorWarrentyMonth,SOrderDetails.Panel=p.PanelWarrentyMonth,
--SOrderDetails.Spareparts=p.SparePartsWarrentyMonth,SOrderDetails.Service = p.ServiceWarrentyMonth,
--SOrderDetails.SFTRate=SD.SFTRate,SORderDetails.TotalSFT=SD.TotalSFT,
--SOrderDetails.FractionQty=SD.FractionQty,SORderDetails.FractionAmt=SD.FractionAmt
--FROM @SODetails SD
--join Products p on SD.ProductId = p.ProductID
--WHERE SD.Status = 4

--INSERT INTO SOrderDetails
--(
--ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
--SFTRate,TotalSFT,FractionAmt,FractionQty
--)
--(
--Select sd.ProductId, Quantity, UnitPrice, TAmount,  PPDisPer,
--PPDisAmt, MrpRate, @SalesOrderId SOrderID, StockDetailId,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
--sd.SFTRate ,TotalSFT,FractionAmt,FractionQty
--from @SODetails sd
--join Products p on sd.ProductID = p.ProductID
--WHERE Status = 3
--)

--DELETE FROM SOrderDetails WHERE SOrderDetailID IN (SELECT SOrderDetailID FROM @SODetails WHERE Status = 5)

--UPDATE Stocks
--SET Stocks.Quantity = (Stocks.Quantity - s.Quantity),Stocks.TotalSFT = (Stocks.TotalSFT - s.TotalSFT)
--from @SODetails s
--JOIN Stocks ON Stocks.ProductID = s.ProductId AND Stocks.ColorID = s.ColorId
--WHERE s.Status = 3 OR s.Status = 4

--UPDATE StockDetails SET StockDetails.Status = 2,StockDetails.TotalSFT = (StockDetails.TotalSFT - s.TotalSFT)
--from @SODetails s
--JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
--WHERE s.Status = 3 OR s.Status = 4

--UPDATE Stocks SET Stocks.Quantity = (Stocks.Quantity + s.Quantity),Stocks.TotalSFT = (Stocks.TotalSFT + s.TotalSFT), ModifiedBy = @UserId, ModifiedDate = GETDATE()
--from @SODetails s
--JOIN Stocks ON Stocks.ProductID = s.ProductId AND Stocks.ColorID = s.ColorId 
--WHERE s.Status = 5

--UPDATE StockDetails
--SET StockDetails.Status = 1,StockDetails.TotalSFT = (StockDetails.TotalSFT + s.TotalSFT)
--from @SODetails s
--JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
--WHERE s.Status = 5

-----------------------------------------------OLD END------------------------------------------------------------------------------------

--For barCode Product SRVisit Status update
UPDATE SRVProductDetails
SET SRVProductDetails.Status = 2
from @SODetails s
JOIN SRVProductDetails ON SRVProductDetails.SDetailID = s.StockDetailId
join Products on SRVProductDetails.ProductID = Products.ProductID
where Products.ProductType=1 or Products.ProductType=3 and s.Status = 3 OR s.Status = 4


UPDATE SRVProductDetails
SET SRVProductDetails.Status = 3
from @SODetails s
JOIN SRVProductDetails ON SRVProductDetails.SDetailID = s.StockDetailId
join Products on SRVProductDetails.ProductID = Products.ProductID
where Products.ProductType=1 or Products.ProductType=3 and s.Status = 5


COMMIT

RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH


======5/11/24=====
======Rizve====
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	InvNetTotal decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_InvNetTotal DEFAULT 0
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

======19/10/24=====
======Rizve====

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	InvRemainingDue decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_InvRemainingDue DEFAULT 0
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


======9/10/24=====
======Rizve====

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	TotalDisAmt decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_TotalDisAmt DEFAULT 0
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


======8/10/24=====
======Rizve====


/****** Object:  StoredProcedure [dbo].[sp_CustomerDueReport]    Script Date: 10/8/2024 4:06:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--exec sp_CustomerDueReport  '2000-06-04 00:00:00.000','2019-06-04 00:00:00.000',0
ALTER PROCEDURE [dbo].[sp_CustomerDueReport] (@FromDate DATETIME, @ToDate DATETIME,@IsOnlyDue int)
AS
CREATE TABLE #temp (TransDate DATETIME, InvoiceNo VARCHAR(250), CustomerID INT, ConcernID INT, SalesAmount DECIMAL, 
AdjustAmt DECIMAL, DueSales DECIMAL, InterestAmt DECIMAL, TotalSalesAmt DECIMAL, RecAmount DECIMAL, CollectionAmt DECIMAL, 
ReturnAmt DECIMAL, STATUS VARCHAR(250), InstallmentPeriod VARCHAR(250))

-- CreditCollection and Cash Collection
INSERT INTO #temp
SELECT CSS.PaymentDate, cs.InvoiceNo, CS.CustomerID, ConcernID, 0, 0, 0, 0, 0, 0, Sum(InstallmentAmt), 0, 'cCreditCollection',CS.InstallmentPeriod
FROM CreditSalesSchedules CSS
INNER JOIN CreditSales CS ON CS.CreditSalesID = CSS.CreditSalesID AND PAymentStatus = 'Paid' AND CSS.CreditSalesID IN (
		SELECT CreditSalesID
		FROM CreditSales
		)
GROUP BY CS.CustomerID, CSS.PaymentDate, cs.InvoiceNo, ConcernID,cs.InstallmentPeriod

INSERT INTO #temp
SELECT EntryDate, ReceiptNo, CustomerID, ConcernID, 0, sum(AdjustAmt + CashBAmt + YearlyBnsAmt), 0, 0, 0, 0, sum(Amount), 0, 'dCashCollection',''
FROM CashCollections
WHERE CustomerID IN (
		SELECT CustomerID
		FROM SOrders
		)
GROUP BY EntryDate, ReceiptNo, CustomerID, ConcernID

--Sales order and CreditSales
INSERT INTO #temp
SELECT InvoiceDate, InvoiceNo, CustomerID, ConcernID, sum(GrandTotal - NetDiscount), sum(AdjAmount), sum(GrandTotal - NetDiscount - AdjAmount - RecAmount), 0, sum(GrandTotal - NetDiscount + 0), sum(RecAmount), 0, 0, 'aSales',''
FROM Sorders SO
WHERE SO.STATUS = 1
GROUP BY SO.CustomerID, SO.InvoiceDate, InvoiceNo, ConcernID

INSERT INTO #temp
SELECT SalesDate, InvoiceNo, CustomerID, ConcernID, SUM(TSalesAmt - Discount), 
sum(LastPayAdjAmt), sum(TSalesAmt - Discount - LastPayAdjAmt - DownPayment), sum(PenaltyInterest), sum(TSalesAmt + PenaltyInterest - Discount - LastPayAdjAmt),
 SUM(DownPayment), 0, 0, 'bCreditSales',CS.InstallmentPeriod
FROM CreditSales CS
WHERE CS.IsStatus = 1
GROUP BY CS.CustomerID, InvoiceNo, CS.SalesDate, ConcernID,cs.InstallmentPeriod

INSERT INTO #temp
SELECT ModifiedDate, InvoiceNo, CustomerID, ConcernID, 0, 0, 0, 0, 0, 0, 0, sum(RO.GrandTotal), 'RSales',''
FROM ROrders RO
--WHERE RO.CustomerID = RO.CustomerID
GROUP BY RO.CustomerID, RO.ModifiedDate, InvoiceNo, ConcernID

INSERT INTO #temp
SELECT InvoiceDate, InvoiceNo, CustomerID, ConcernID, 0, 0, 0, 0, 0, 0, 0, sum(PaymentDue), 'RSales',''
FROM Sorders SO
WHERE SO.STATUS = 4
GROUP BY SO.CustomerID, SO.InvoiceDate, InvoiceNo, ConcernID

DECLARE cur CURSOR LOCAL
FOR
SELECT T.TransDate, T.InvoiceNo, T.CustomerID, T.ConcernID, T.SalesAmount, T.AdjustAmt, T.DueSales, T.InterestAmt, T.TotalSalesAmt, T.RecAmount, T.CollectionAmt, T.ReturnAmt, T.STATUS, (T.TotalSalesAmt - T.RecAmount - T.CollectionAmt - T.ReturnAmt - T.AdjustAmt) AS 'Balance',T.InstallmentPeriod
FROM #temp T
INNER JOIN Customers CUS ON CUS.CustomerID = T.CustomerID
ORDER BY CUS.CustomerID, T.TransDate, T.STATUS

CREATE TABLE #temp2 (TransDate DATETIME, InvoiceNo VARCHAR(250), CustomerID INT, ConcernID INT, SalesAmount DECIMAL, AdjustAmt DECIMAL, DueSales DECIMAL, InterestAmt DECIMAL, TotalSalesAmt DECIMAL, RecAmount DECIMAL, CollectionAmt DECIMAL, ReturnAmt DECIMAL, STATUS VARCHAR(250), Balance DECIMAL, InstallmentPeriod VARCHAR(250))

DECLARE @TransDate DATETIME, @InvoiceNo VARCHAR(250), @CustomerID INT, @ConcernID INT, @SalesAmount DECIMAL, @AdjustAmt DECIMAL, @DueSales DECIMAL, @InterestAmt DECIMAL, @TotalSalesAmt DECIMAL, @RecAmount DECIMAL, @CollectionAmt DECIMAL, @ReturnAmt DECIMAL, @Status VARCHAR(250), @Balance DECIMAL,@InstallmentPeriod VARCHAR(250)
DECLARE @BalanceTemp DECIMAL, @CustomerIDTemp INT

OPEN cur

FETCH NEXT
FROM cur
INTO @TransDate, @InvoiceNo, @CustomerID, @ConcernID, @SalesAmount, @AdjustAmt, @DueSales, @InterestAmt, @TotalSalesAmt, @RecAmount, @CollectionAmt, @ReturnAmt, @Status, @Balance,@InstallmentPeriod

SET @BalanceTemp = @Balance
SET @CustomerIDTemp = @CustomerID

WHILE @@FETCH_STATUS = 0
BEGIN
	INSERT INTO #temp2
	VALUES (@TransDate, @InvoiceNo, @CustomerID, @ConcernID, @SalesAmount, @AdjustAmt, @DueSales, @InterestAmt, @TotalSalesAmt, @RecAmount, @CollectionAmt, @ReturnAmt, @Status, @BalanceTemp,@InstallmentPeriod)

	FETCH NEXT
	FROM cur
	INTO @TransDate, @InvoiceNo, @CustomerID, @ConcernID, @SalesAmount, @AdjustAmt, @DueSales, @InterestAmt, @TotalSalesAmt, @RecAmount, @CollectionAmt, @ReturnAmt, @Status, @Balance,@InstallmentPeriod

	IF (@CustomerIDTemp = @CustomerID)
		SET @BalanceTemp = @BalanceTemp + @Balance
	ELSE
		SET @BalanceTemp = @Balance

	SET @CustomerIDTemp = @CustomerID
END

----  select T.TransDate,T.CustomerID,T.ConcernID,CuS.Code, CUS.Name, isnull(CUS.Address,'') as Address,isnull(Cus.ContactNo,'') as ContactNo,T.SalesAmount,T.InterestAmt,T.TotalSalesAmt, T.RecAmount,T.CollectionAmt,T.Status,T.TotalSalesAmt-T.RecAmount-T.CollectionAmt as 'Balance' from #temp  T
-- --join Customers CUS on CUS.CustomerID=T.CustomerID order by T.ConcernID, CUS.CustomerID,T.TransDate
--select T.TransDate,  T.CustomerID,T.ConcernID,CUS.Code,Cus.Name, isnull(CUS.Address,'') as 'Address', isnull(CUS.ContactNo,'') as 'ContactNo', T.InvoiceNo,T.SalesAmount,T.DueSales,  T.InterestAmt,T.TotalSalesAmt,T.RecAmount,T.CollectionAmt  ,T.Status,T.Balance from #temp2 T join Customers CUS on CUS.CustomerID=T.CustomerID where T.TransDate>=@FromDate and T.TransDate<=@ToDate order by T.ConcernID, CUS.CustomerID,T.TransDate

IF(@IsOnlyDue=1)
BEGIN
SELECT T.TransDate, T.CustomerID, T.ConcernID, CUS.Code, Cus.Name, isnull(CUS.Address, '') AS 'Address', isnull(CUS.ContactNo, '') AS 'ContactNo', T.InvoiceNo, T.SalesAmount, T.AdjustAmt, T.DueSales, T.InterestAmt, T.TotalSalesAmt, T.RecAmount, T.CollectionAmt, T.ReturnAmt, T.STATUS, T.Balance,T.InstallmentPeriod
FROM #temp2 T
INNER JOIN Customers CUS ON CUS.CustomerID = T.CustomerID
where CUS.TotalDue!=0
ORDER BY T.ConcernID, CUS.CustomerID, T.TransDate, T.STATUS
END
ELSE
BEGIN
SELECT T.TransDate, T.CustomerID, T.ConcernID, CUS.Code, Cus.Name, isnull(CUS.Address, '') AS 'Address', isnull(CUS.ContactNo, '') AS 'ContactNo', T.InvoiceNo, T.SalesAmount, T.AdjustAmt, T.DueSales, T.InterestAmt, T.TotalSalesAmt, T.RecAmount, T.CollectionAmt, T.ReturnAmt, T.STATUS, T.Balance,T.InstallmentPeriod
FROM #temp2 T
INNER JOIN Customers CUS ON CUS.CustomerID = T.CustomerID
ORDER BY T.ConcernID, CUS.CustomerID, T.TransDate, T.STATUS
END
GO





======7/10/24=====
======Rizve====

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrders ADD
	CCAmount decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_CCAmount DEFAULT 0,
	CCAdjustment decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_CCAdjustment DEFAULT 0
GO
ALTER TABLE dbo.SOrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


-----------------------------------------------------------------------------------------------------

BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	CashBPercentage decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_CashBPercentage DEFAULT 0,
	CashBAmt decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_CashBAmt DEFAULT 0,
	YearlyBPercentage decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_YearlyBPercentage DEFAULT 0,
	YearlyBnsAmt decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_YearlyBnsAmt DEFAULT 0,
	InvoiceNo varchar(150) NOT NULL CONSTRAINT DF_CashCollections_InvoiceNo DEFAULT 0,
	InvoiceDue decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_InvoiceDue DEFAULT 0,
	SOrderID int NOT NULL CONSTRAINT DF_CashCollections_SOrderID DEFAULT 0
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT



======2/10/24=====
======Rizve====


BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrders ADD
	AfterCartonAmt decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_AfterCartonAmt DEFAULT 0,
	AfterCashAmt decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_AfterCashAmt DEFAULT 0,
	AfterYearlyAmt decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_AfterYearlyAmt DEFAULT 0
GO
ALTER TABLE dbo.SOrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT




-----------------------------------------------------------------------------------------------------



EXEC sys.sp_rename 'dbo.InsertSalesOrderTable', 'zInsertSalesOrderTable';
GO


CREATE TYPE [dbo].[InsertSalesOrderTable] AS TABLE(
	[InvoiceDate] [datetime] NULL,
	[InvoiceNo] [varchar](150) NULL,
	[VatPercentage] [decimal](18, 4) NULL,
	[VatAmount] [decimal](18, 4) NULL,
	[GrandTotal] [decimal](18, 4) NULL,
	[TDiscountPercentage] [decimal](18, 4) NULL,
	[TDiscountAmount] [decimal](18, 4) NULL,
	[RecAmt] [decimal](18, 4) NULL,
	[PaymentDue] [decimal](18, 4) NULL,
	[TotalAmount] [decimal](18, 4) NULL,
	[TotalDue] [decimal](18, 4) NULL,
	[AdjAmount] [decimal](18, 4) NULL,
	[Status] [int] NULL,
	[CustomerId] [int] NULL,
	[ConcernId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreateDate] [datetime] NULL,
	[TotalOffer] [decimal](18, 4) NULL,
	[NetDiscount] [decimal](18, 4) NULL,
	[Remarks] [varchar](150) NULL,
	[TotalFractionAmt] [decimal](18, 4) NULL,
	[PrevDue] [decimal](18, 4) NULL,
	[DepotId] [int] NULL,
	[Terms] [int] NULL,
	[PayCashAccountId] [int] NULL,
	[PayBankId] [int] NULL,
	[CartonPercentage] [decimal](18, 4) NULL,
	[CartonAmt] [decimal](18, 4) NULL,
	[CashBPercentage] [decimal](18, 4) NULL,
	[CashBAmt] [decimal](18, 4) NULL,
	[YearlyBPercentage] [decimal](18, 4) NULL,
	[YearlyBnsAmt] [decimal](18, 4) NULL,
	[AfterCartonAmt] [decimal](18, 4) NULL, -- New field
	[AfterCashAmt] [decimal](18, 4) NULL,   -- New field
	[AfterYearlyAmt] [decimal](18, 4) NULL  -- New field
)
GO


DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertSalesOrderTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO


DROP TYPE dbo.zInsertSalesOrderTable;
GO

-----------------------------------------------------------------------------------------------------------



/****** Object:  StoredProcedure [dbo].[AddSalesOrder]    Script Date: 10/2/2024 1:13:31 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, IsApproved, IsAdvanceSale,PayCashAccountId,Terms, PayBankId, 
	 CartonPercentage, CartonAmt, CashBPercentage, CashBAmt, YearlyBPercentage, YearlyBnsAmt, AfterCartonAmt, AfterCashAmt, AfterYearlyAmt)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, 1, 0, PayCashAccountId,Terms, PayBankId,
	  CartonPercentage, CartonAmt, CashBPercentage, CashBAmt, YearlyBPercentage, YearlyBnsAmt, AfterCartonAmt, AfterCashAmt, AfterYearlyAmt  FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL


	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL


UPDATE CashAccounts Set CashAccounts.TotalBalance = (CashAccounts.TotalBalance + s.RecAmt)
from @SalesOrder s
JOIN CashAccounts ON CashAccounts.Id = s.PayCashAccountId

UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount + s.RecAmt)
from @SalesOrder s
JOIN Banks ON Banks.BankID = s.PayBankId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0				
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH
GO







---------------OLD DB CHange-----------------


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	IsBanglaSmsEnable int NOT NULL CONSTRAINT DF_SystemInformations_IsBanglaSmsEnable DEFAULT ((0))
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT





/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	CustomerSmsWithCustomerName int NOT NULL CONSTRAINT DF_SystemInformations_CustomerSmsWithCustomerName DEFAULT ((0))
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
-----------------For bKash--------------------------------------------
-----------------28-09-2024-------------------------------------------
ALTER TABLE dbo.ServiceChargeDetails ADD
	ConcernName nvarchar(500) NULL			

ALTER TABLE dbo.SMSPaymentMasterDetails ADD
	ConcernName nvarchar(500) NULL

-------------Mostafizur---------
----------28-02-2024------------
-------------------------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	smsCharge decimal(18, 2) NOT NULL CONSTRAINT DF_SystemInformations_smsCharge DEFAULT ((0))
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT



-------------Mostafizur---------
----------05-02-2024------------
-------------------------------

select * from SystemInformations where SMSServiceEnable=1 and SMSProviderID=0
--update SystemInformations set SMSProviderID=4 where SMSServiceEnable=1 and SMSProviderID=0


--INSERT INTO [dbo].[SMSPaymentMasters]([OpeningBalance],[TotalRecAmt],[ConcernID],[ParentID],[IsMasking],[PerSMSCharge],[CreatedBy],[CreateDate])
Select 0 OpeningBalance,0 TotalRecAmt,SI.ConcernID,SC.ParentID,SI.SMSProviderID,
CASE WHEN SI.SMSProviderID = 4 THEN 0.45 WHEN SI.SMSProviderID = 5 THEN 0.70
WHEN (SI.SMSProviderID!=4 and SI.SMSProviderID!=5) THEN 0.45
END PerSMSCharge
,U.Id,GETDATE() CreatedDate
from SystemInformations SI
Inner Join SisterConcerns SC on SC.ConcernID=SI.ConcernID
Inner Join Users U on SI.ConcernID=U.ConcernID and SI.SMSServiceEnable=1
Inner Join UserRoles UR on UR.UserId=U.Id and UR.RoleId=1
order by ConcernID

--SMSProviderID=5 for Musking
--SMSProviderID=4 for Non Musking


-------------Mostafizur---------
----------05-02-2024------------
-------------------------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[SMSPaymentMasters](
	[SMSPaymentMasterID] [int] IDENTITY(1,1) NOT NULL,
	[OpeningBalance] [decimal](18, 2) NOT NULL,
	[TotalRecAmt] [decimal](18, 2) NOT NULL,
	[ConcernID] [int] NOT NULL,
	[ParentID] [int] NOT NULL,
	[IsMasking] [int] NOT NULL,
	[PerSMSCharge] [decimal](18, 2) NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_SMSPaymentMasters] PRIMARY KEY CLUSTERED 
(
	[SMSPaymentMasterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_OpeningBalance]  DEFAULT ((0)) FOR [OpeningBalance]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_ParentID]  DEFAULT ((0)) FOR [ParentID]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_IsMasking]  DEFAULT ((0)) FOR [IsMasking]
GO

ALTER TABLE [dbo].[SMSPaymentMasters] ADD  CONSTRAINT [DF_SMSPaymentMasters_PerSMSCharge]  DEFAULT ((0)) FOR [PerSMSCharge]
GO

ALTER TABLE [dbo].[SMSPaymentMasters]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasters_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[SMSPaymentMasters] CHECK CONSTRAINT [FK_SMSPaymentMasters_SisterConcerns]
GO

ALTER TABLE [dbo].[SMSPaymentMasters]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasters_Users] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[Users] ([Id])
GO

ALTER TABLE [dbo].[SMSPaymentMasters] CHECK CONSTRAINT [FK_SMSPaymentMasters_Users]
GO




-------------Mostafizur---------
----------05-02-2024------------
-------------------------------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[SMSPaymentMasterDetails](
	[SMSPaymentDetailsID] [int] IDENTITY(1,1) NOT NULL,
	[SMSPaymentMasterID] [int] NOT NULL,
	[ReceiptNo] [varchar](150) NOT NULL,
	[RecAmount] [decimal](18, 2) NOT NULL,
	[RecDate] [datetime] NOT NULL,
	[PaymentMobNo] [nvarchar](50) NULL,
	[TransactionId] [nvarchar](250) NULL,
	[TransactionStatus] [nvarchar](100) NULL,
	[StatusMessage] [nvarchar](100) NULL,
	[ErrorCocde] [nvarchar](50) NULL,
	[ErrorMessage] [nvarchar](500) NULL,
	[PaymentId] [nvarchar](150) NULL,
	[PaymentReference] [nvarchar](150) NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_SMSPaymentMasterDetails] PRIMARY KEY CLUSTERED 
(
	[SMSPaymentDetailsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails] ADD  CONSTRAINT [DF_SMSPaymentMasterDetails_RecAmount]  DEFAULT ((0)) FOR [RecAmount]
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasterDetails_SMSPaymentMasters] FOREIGN KEY([SMSPaymentMasterID])
REFERENCES [dbo].[SMSPaymentMasters] ([SMSPaymentMasterID])
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails] CHECK CONSTRAINT [FK_SMSPaymentMasterDetails_SMSPaymentMasters]
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails]  WITH CHECK ADD  CONSTRAINT [FK_SMSPaymentMasterDetails_Users] FOREIGN KEY([CreatedBy])
REFERENCES [dbo].[Users] ([Id])
GO

ALTER TABLE [dbo].[SMSPaymentMasterDetails] CHECK CONSTRAINT [FK_SMSPaymentMasterDetails_Users]
GO



------------------------------------
-------Date: 30-09-2024------------
--------------Rizve-------------



BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrders ADD
	CartonPercentage decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_CartonPercentage DEFAULT 0,
	CartonAmt decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_CartonAmt DEFAULT 0,
	CashBPercentage decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_CashBPercentage DEFAULT 0,
	CashBAmt decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_CashBAmt DEFAULT 0,
	YearlyBPercentage decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_YearlyBPercentage DEFAULT 0,
	YearlyBnsAmt decimal(18, 2) NOT NULL CONSTRAINT DF_SOrders_YearlyBnsAmt DEFAULT 0
GO
ALTER TABLE dbo.SOrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


------------------------------------------------------------------------------------------------


-- Step 1: Rename the existing table type to a temporary name
EXEC sys.sp_rename 'dbo.InsertSalesOrderTable', 'zInsertSalesOrderTable';
GO

-- Step 2: Create the new table type with the additional fields
CREATE TYPE [dbo].[InsertSalesOrderTable] AS TABLE (
    [InvoiceDate] [datetime] NULL,
    [InvoiceNo] [varchar](150) NULL,
    [VatPercentage] [decimal](18, 4) NULL,
    [VatAmount] [decimal](18, 4) NULL,
    [GrandTotal] [decimal](18, 4) NULL,
    [TDiscountPercentage] [decimal](18, 4) NULL,
    [TDiscountAmount] [decimal](18, 4) NULL,
    [RecAmt] [decimal](18, 4) NULL,
    [PaymentDue] [decimal](18, 4) NULL,
    [TotalAmount] [decimal](18, 4) NULL,
    [TotalDue] [decimal](18, 4) NULL,
    [AdjAmount] [decimal](18, 4) NULL,
    [Status] [int] NULL,
    [CustomerId] [int] NULL,
    [ConcernId] [int] NULL,
    [CreatedBy] [int] NULL,
    [CreateDate] [datetime] NULL,
    [TotalOffer] [decimal](18, 4) NULL,
    [NetDiscount] [decimal](18, 4) NULL,
    [Remarks] [varchar](150) NULL,
    [TotalFractionAmt] [decimal](18, 4) NULL,
    [PrevDue] [decimal](18, 4) NULL,
    [DepotId] [int] NULL,
    [Terms] [int] NULL,
    [PayCashAccountId] [int] NULL,
    [PayBankId] [int] NULL,
    
    -- New fields for Carton, Cash Bonus, and Yearly Bonus
    [CartonPercentage] [decimal](18, 4) NULL,
    [CartonAmt] [decimal](18, 4) NULL,
    [CashBPercentage] [decimal](18, 4) NULL,
    [CashBAmt] [decimal](18, 4) NULL,
    [YearlyBPercentage] [decimal](18, 4) NULL,
    [YearlyBnsAmt] [decimal](18, 4) NULL
);
GO

-- Step 3: Refresh dependencies for all referencing objects using the new table type
DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertSalesOrderTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO

-- Step 4: Drop the temporary table type
DROP TYPE dbo.zInsertSalesOrderTable;
GO



------------------------------------------------------------------------------------------------







/****** Object:  StoredProcedure [dbo].[AddSalesOrder]    Script Date: 9/30/2024 3:25:34 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, IsApproved, IsAdvanceSale,PayCashAccountId,Terms, PayBankId, 
	 CartonPercentage, CartonAmt, CashBPercentage, CashBAmt, YearlyBPercentage, YearlyBnsAmt)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, 1, 0, PayCashAccountId,Terms, PayBankId,
	  CartonPercentage, CartonAmt, CashBPercentage, CashBAmt, YearlyBPercentage, YearlyBnsAmt  FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL


	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL


UPDATE CashAccounts Set CashAccounts.TotalBalance = (CashAccounts.TotalBalance + s.RecAmt)
from @SalesOrder s
JOIN CashAccounts ON CashAccounts.Id = s.PayCashAccountId

UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount + s.RecAmt)
from @SalesOrder s
JOIN Banks ON Banks.BankID = s.PayBankId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0				
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH
GO






------------------------------------
-------Date: 15-09-2024------------
--------------Mostafizur-------------

UPDATE ShareInvestmentHeads SET OpeningDate = '2000-02-07 10:34:38.000' ;

------------------------------------
-------Date: 15-09-2024------------
--------------Mostafizur-------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ShareInvestmentHeads ADD
	OpeningBalance decimal(18, 2) NOT NULL CONSTRAINT DF_ShareInvestmentHeads_OpeningBalance DEFAULT ((0)),
	OpeningType nvarchar(15) NULL,
	OpeningDate datetime NULL
GO
ALTER TABLE dbo.ShareInvestmentHeads SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


------------------------------------
-------Date: 15-09-2024------------
--------------Mostafizur-------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, IsApproved, IsAdvanceSale,PayCashAccountId,Terms, PayBankId)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, 1, 0, PayCashAccountId,Terms, PayBankId FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL


	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL


UPDATE CashAccounts Set CashAccounts.TotalBalance = (CashAccounts.TotalBalance + s.RecAmt)
from @SalesOrder s
JOIN CashAccounts ON CashAccounts.Id = s.PayCashAccountId

UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount + s.RecAmt)
from @SalesOrder s
JOIN Banks ON Banks.BankID = s.PayBankId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0				
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

------------------------------------
-------Date: 15-09-2024------------
--------------Mostafizur-------------


/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrders ADD
	Terms int NOT NULL CONSTRAINT DF_SOrders_Terms DEFAULT ((0))
GO
ALTER TABLE dbo.SOrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

------------------------------------
-------Date: 27-04-2024-------------
---------------Nahid----------------

--exec sp_CustomerDueReport  '2000-06-04 00:00:00.000','2019-06-04 00:00:00.000',0
ALTER PROCEDURE [dbo].[sp_CustomerDueReport] (@FromDate DATETIME, @ToDate DATETIME,@IsOnlyDue int)
AS
CREATE TABLE #temp (TransDate DATETIME, InvoiceNo VARCHAR(250), CustomerID INT, ConcernID INT, SalesAmount DECIMAL, AdjustAmt DECIMAL, DueSales DECIMAL, InterestAmt DECIMAL, TotalSalesAmt DECIMAL, RecAmount DECIMAL, CollectionAmt DECIMAL, ReturnAmt DECIMAL, STATUS VARCHAR(250), InstallmentPeriod VARCHAR(250))

-- CreditCollection and Cash Collection
INSERT INTO #temp
SELECT CSS.PaymentDate, cs.InvoiceNo, CS.CustomerID, ConcernID, 0, 0, 0, 0, 0, 0, Sum(InstallmentAmt), 0, 'cCreditCollection',CS.InstallmentPeriod
FROM CreditSalesSchedules CSS
INNER JOIN CreditSales CS ON CS.CreditSalesID = CSS.CreditSalesID AND PAymentStatus = 'Paid' AND CSS.CreditSalesID IN (
		SELECT CreditSalesID
		FROM CreditSales
		)
GROUP BY CS.CustomerID, CSS.PaymentDate, cs.InvoiceNo, ConcernID,cs.InstallmentPeriod

INSERT INTO #temp
SELECT EntryDate, ReceiptNo, CustomerID, ConcernID, 0, sum(AdjustAmt), 0, 0, 0, 0, sum(Amount), 0, 'dCashCollection',''
FROM CashCollections
WHERE CustomerID IN (
		SELECT CustomerID
		FROM SOrders
		)
GROUP BY EntryDate, ReceiptNo, CustomerID, ConcernID

--Sales order and CreditSales
INSERT INTO #temp
SELECT InvoiceDate, InvoiceNo, CustomerID, ConcernID, sum(GrandTotal - NetDiscount), sum(AdjAmount), sum(GrandTotal - NetDiscount - AdjAmount - RecAmount), 0, sum(GrandTotal - NetDiscount + 0), sum(RecAmount), 0, 0, 'aSales',''
FROM Sorders SO
WHERE SO.STATUS = 1
GROUP BY SO.CustomerID, SO.InvoiceDate, InvoiceNo, ConcernID

INSERT INTO #temp
SELECT SalesDate, InvoiceNo, CustomerID, ConcernID, SUM(TSalesAmt - Discount), 
sum(LastPayAdjAmt), sum(TSalesAmt - Discount - LastPayAdjAmt - DownPayment), sum(PenaltyInterest), sum(TSalesAmt + PenaltyInterest - Discount - LastPayAdjAmt),
 SUM(DownPayment), 0, 0, 'bCreditSales',CS.InstallmentPeriod
FROM CreditSales CS
WHERE CS.IsStatus = 1
GROUP BY CS.CustomerID, InvoiceNo, CS.SalesDate, ConcernID,cs.InstallmentPeriod

INSERT INTO #temp
SELECT ModifiedDate, InvoiceNo, CustomerID, ConcernID, 0, 0, 0, 0, 0, 0, 0, sum(RO.GrandTotal), 'RSales',''
FROM ROrders RO
--WHERE RO.CustomerID = RO.CustomerID
GROUP BY RO.CustomerID, RO.ModifiedDate, InvoiceNo, ConcernID

INSERT INTO #temp
SELECT InvoiceDate, InvoiceNo, CustomerID, ConcernID, 0, 0, 0, 0, 0, 0, 0, sum(PaymentDue), 'RSales',''
FROM Sorders SO
WHERE SO.STATUS = 4
GROUP BY SO.CustomerID, SO.InvoiceDate, InvoiceNo, ConcernID

DECLARE cur CURSOR LOCAL
FOR
SELECT T.TransDate, T.InvoiceNo, T.CustomerID, T.ConcernID, T.SalesAmount, T.AdjustAmt, T.DueSales, T.InterestAmt, T.TotalSalesAmt, T.RecAmount, T.CollectionAmt, T.ReturnAmt, T.STATUS, (T.TotalSalesAmt - T.RecAmount - T.CollectionAmt - T.ReturnAmt - T.AdjustAmt) AS 'Balance',T.InstallmentPeriod
FROM #temp T
INNER JOIN Customers CUS ON CUS.CustomerID = T.CustomerID
ORDER BY CUS.CustomerID, T.TransDate, T.STATUS

CREATE TABLE #temp2 (TransDate DATETIME, InvoiceNo VARCHAR(250), CustomerID INT, ConcernID INT, SalesAmount DECIMAL, AdjustAmt DECIMAL, DueSales DECIMAL, InterestAmt DECIMAL, TotalSalesAmt DECIMAL, RecAmount DECIMAL, CollectionAmt DECIMAL, ReturnAmt DECIMAL, STATUS VARCHAR(250), Balance DECIMAL, InstallmentPeriod VARCHAR(250))

DECLARE @TransDate DATETIME, @InvoiceNo VARCHAR(250), @CustomerID INT, @ConcernID INT, @SalesAmount DECIMAL, @AdjustAmt DECIMAL, @DueSales DECIMAL, @InterestAmt DECIMAL, @TotalSalesAmt DECIMAL, @RecAmount DECIMAL, @CollectionAmt DECIMAL, @ReturnAmt DECIMAL, @Status VARCHAR(250), @Balance DECIMAL,@InstallmentPeriod VARCHAR(250)
DECLARE @BalanceTemp DECIMAL, @CustomerIDTemp INT

OPEN cur

FETCH NEXT
FROM cur
INTO @TransDate, @InvoiceNo, @CustomerID, @ConcernID, @SalesAmount, @AdjustAmt, @DueSales, @InterestAmt, @TotalSalesAmt, @RecAmount, @CollectionAmt, @ReturnAmt, @Status, @Balance,@InstallmentPeriod

SET @BalanceTemp = @Balance
SET @CustomerIDTemp = @CustomerID

WHILE @@FETCH_STATUS = 0
BEGIN
	INSERT INTO #temp2
	VALUES (@TransDate, @InvoiceNo, @CustomerID, @ConcernID, @SalesAmount, @AdjustAmt, @DueSales, @InterestAmt, @TotalSalesAmt, @RecAmount, @CollectionAmt, @ReturnAmt, @Status, @BalanceTemp,@InstallmentPeriod)

	FETCH NEXT
	FROM cur
	INTO @TransDate, @InvoiceNo, @CustomerID, @ConcernID, @SalesAmount, @AdjustAmt, @DueSales, @InterestAmt, @TotalSalesAmt, @RecAmount, @CollectionAmt, @ReturnAmt, @Status, @Balance,@InstallmentPeriod

	IF (@CustomerIDTemp = @CustomerID)
		SET @BalanceTemp = @BalanceTemp + @Balance
	ELSE
		SET @BalanceTemp = @Balance

	SET @CustomerIDTemp = @CustomerID
END

----  select T.TransDate,T.CustomerID,T.ConcernID,CuS.Code, CUS.Name, isnull(CUS.Address,'') as Address,isnull(Cus.ContactNo,'') as ContactNo,T.SalesAmount,T.InterestAmt,T.TotalSalesAmt, T.RecAmount,T.CollectionAmt,T.Status,T.TotalSalesAmt-T.RecAmount-T.CollectionAmt as 'Balance' from #temp  T
-- --join Customers CUS on CUS.CustomerID=T.CustomerID order by T.ConcernID, CUS.CustomerID,T.TransDate
--select T.TransDate,  T.CustomerID,T.ConcernID,CUS.Code,Cus.Name, isnull(CUS.Address,'') as 'Address', isnull(CUS.ContactNo,'') as 'ContactNo', T.InvoiceNo,T.SalesAmount,T.DueSales,  T.InterestAmt,T.TotalSalesAmt,T.RecAmount,T.CollectionAmt  ,T.Status,T.Balance from #temp2 T join Customers CUS on CUS.CustomerID=T.CustomerID where T.TransDate>=@FromDate and T.TransDate<=@ToDate order by T.ConcernID, CUS.CustomerID,T.TransDate

IF(@IsOnlyDue=1)
BEGIN
SELECT T.TransDate, T.CustomerID, T.ConcernID, CUS.Code, Cus.Name, isnull(CUS.Address, '') AS 'Address', isnull(CUS.ContactNo, '') AS 'ContactNo', T.InvoiceNo, T.SalesAmount, T.AdjustAmt, T.DueSales, T.InterestAmt, T.TotalSalesAmt, T.RecAmount, T.CollectionAmt, T.ReturnAmt, T.STATUS, T.Balance,T.InstallmentPeriod
FROM #temp2 T
INNER JOIN Customers CUS ON CUS.CustomerID = T.CustomerID
where CUS.TotalDue!=0
ORDER BY T.ConcernID, CUS.CustomerID, T.TransDate, T.STATUS
END
ELSE
BEGIN
SELECT T.TransDate, T.CustomerID, T.ConcernID, CUS.Code, Cus.Name, isnull(CUS.Address, '') AS 'Address', isnull(CUS.ContactNo, '') AS 'ContactNo', T.InvoiceNo, T.SalesAmount, T.AdjustAmt, T.DueSales, T.InterestAmt, T.TotalSalesAmt, T.RecAmount, T.CollectionAmt, T.ReturnAmt, T.STATUS, T.Balance,T.InstallmentPeriod
FROM #temp2 T
INNER JOIN Customers CUS ON CUS.CustomerID = T.CustomerID
ORDER BY T.ConcernID, CUS.CustomerID, T.TransDate, T.STATUS
END


-----------------------------------------------------------------------------------------------------------------------------------------
ALTER PROC [dbo].[sp_AddReturnOrder] (
@SalesOrder [InsertReturnOrderTable] readonly,
@SODetails [InsertReturnOrderDetailTable] readonly,
@ROrderID INT OUTPUT,
@Result INT OUTPUT
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO ROrders (InvoiceNo, ReturnDate, GrandTotal, CustomerID, PaidAmount, ConcernID,Remarks, CreatedBy, CreateDate, ModifiedBy, ModifiedDate)
   (SELECT InvoiceNo, InvoiceDate, GrandTotal, CustomerID, RecAmt, ConcernID,Remarks, CreatedBy, CreateDate, CreatedBy, CreateDate FROM @SalesOrder)

	SET @SalesOrderId = SCOPE_IDENTITY()

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate Decimal(18,4)
	DECLARE @PRate Decimal(18,4)
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @SalesQty INT
	DECLARE @UnitPrice  Decimal(18,4)
	DECLARE @MRPRate Decimal(18,4)
	DECLARE @SFTPerPCS  Decimal(18,4)
	DECLARE @SFTRate  Decimal(18,4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT sod1.ProductID, sod1.ColorID, sod1.Quantity,std.SDetailID,
	(CASE WHEN p.BundleQty=0 THEN p.PurchaseCSft/pu.ConvertValue ELSE p.PurchaseCSft/p.BundleQty END) as 'SFTPerPCS',sod1.SFTRate
	FROM @SODetails sod1
	JOIN StockDetails std ON sod1.StockDetailId = std.SDetailID
	JOIN Products p on sod1.ProductID = p.ProductID
	JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity,@SDetailID,@SFTPerPCS,@SFTRate

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SOrderDetailID = (
					SELECT min(sod.SOrderDetailID)
					FROM SOrderDetails sod
					JOIN SOrders SO ON sod.SOrderID = SO.SOrderID
					JOIN @SODetails sod1 ON sod1.ProductId = sod.ProductID
					JOIN @SalesOrder so1 ON so1.CustomerID = SO.CustomerID
					WHERE IsProductReturn != 1 and SO.Status=1 and SOD.Quantity-SOD.RQuantity>0 and SOD.ProductID=@ProductID and SOD.SDetailID=@SDetailID
						--sod.SDetailID>  @SOrderDetailID  and 
					)
			--and sod.ProductID=7088 and CustomerID=4
			SET @SalesQty = (
					SELECT sum(quantity - RQuantity)
					FROM SOrderDetails
					WHERE SOrderDetailID = @SOrderDetailID
					)
			SET @SDetailID = (
					SELECT min(SDetailID)
					FROM SOrderDetails
					WHERE SOrderDetailID = @SOrderDetailID
					)

			IF (@SalesQty > @Quantity)
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @Quantity,TotalSFT=TotalSFT+(@Quantity*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @Quantity,TotalSFT=TotalSFT+(@Quantity*@SFTPerPCS)
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 0, RQuantity = RQuantity + @Quantity
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate) 
				(SELECT @SalesOrderId, ProductId, @Quantity, UnitPrice, TAmount, @SDetailID, ColorId, 1, @SalesQty, @Quantity, @SOrderDetailID,(@Quantity*@SFTPerPCS),@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID
				)

				SET @Quantity = 0
			END
			ELSE IF (@SalesQty < @Quantity)
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS),Status=1
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 1, RQuantity = RQuantity + @SalesQty
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate) 
				(SELECT @SalesOrderId, ProductId, @SalesQty, UnitPrice, TAmount, @SDetailID, @ColorID, 2, @SalesQty, @Quantity, @SOrderDetailID,(@SalesQty*@SFTPerPCS),@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID)

				SET @Quantity = @Quantity - @SalesQty
			END
					--Check No 3
			ELSE
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS),Status=1
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 1, RQuantity = RQuantity + @SalesQty
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate)
				(SELECT @SalesOrderId, ProductId, @SalesQty, UnitPrice, TAmount, @SDetailID, @ColorID, 3, @SalesQty, @Quantity, @SOrderDetailID,(@SalesQty*@SFTPerPCS),@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID)

				SET @Quantity = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity,@SDetailID,@SFTPerPCS,@SFTRate
	END

	UPDATE Customers
	SET Customers.TotalDue = (Customers.TotalDue - s.TotalDue)
	FROM @SalesOrder s
	JOIN Customers ON Customers.CustomerID = s.CustomerID

	UPDATE StockDetails
	SET StockDetails.STATUS = 1
	FROM @SODetails s
	JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
	JOIN Products ON Products.ProductID = StockDetails.ProductID
	WHERE Products.ProductType = 2 
	COMMIT
	Select @Result=1,@ROrderID=@SalesOrderId

	--COMMIT
	--RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	Select @Result=0,@ROrderID=0
END CATCH

UPDATE SOrderDetails
SET RQuantity = 0
WHERE RQuantity IS NULL
GO




------------------------------------
-------Date: 25-04-2024-------------
---------------Nahid----------------
ALTER PROC [dbo].[sp_AddReturnOrder] (
@SalesOrder [InsertReturnOrderTable] readonly,
@SODetails [InsertReturnOrderDetailTable] readonly,
@ROrderID INT OUTPUT,
@Result INT OUTPUT
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO ROrders (InvoiceNo, ReturnDate, GrandTotal, CustomerID, PaidAmount, ConcernID,Remarks, CreatedBy, CreateDate, ModifiedBy, ModifiedDate)
   (SELECT InvoiceNo, InvoiceDate, GrandTotal, CustomerID, RecAmt, ConcernID,Remarks, CreatedBy, CreateDate, CreatedBy, CreateDate FROM @SalesOrder)

	SET @SalesOrderId = SCOPE_IDENTITY()

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate Decimal(18,4)
	DECLARE @PRate Decimal(18,4)
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @SalesQty INT
	DECLARE @UnitPrice  Decimal(18,4)
	DECLARE @MRPRate Decimal(18,4)
	DECLARE @SFTPerPCS  Decimal(18,4)
	DECLARE @SFTRate  Decimal(18,4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT sod1.ProductID, sod1.ColorID, sod1.Quantity,std.SDetailID,
	(CASE WHEN p.BundleQty=0 THEN p.PurchaseCSft/pu.ConvertValue ELSE p.PurchaseCSft/p.BundleQty END) as 'SFTPerPCS',sod1.SFTRate
	FROM @SODetails sod1
	JOIN StockDetails std ON sod1.StockDetailId = std.SDetailID
	JOIN Products p on sod1.ProductID = p.ProductID
	JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity,@SDetailID,@SFTPerPCS,@SFTRate

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SOrderDetailID = (
					SELECT min(sod.SOrderDetailID)
					FROM SOrderDetails sod
					JOIN SOrders SO ON sod.SOrderID = SO.SOrderID
					JOIN @SODetails sod1 ON sod1.ProductId = sod.ProductID
					JOIN @SalesOrder so1 ON so1.CustomerID = SO.CustomerID
					WHERE IsProductReturn != 1 and SO.Status=1 and SOD.Quantity-SOD.RQuantity>0 and SOD.ProductID=@ProductID and SOD.SDetailID=@SDetailID
						--sod.SDetailID>  @SOrderDetailID  and 
					)
			--and sod.ProductID=7088 and CustomerID=4
			SET @SalesQty = (
					SELECT sum(quantity - RQuantity)
					FROM SOrderDetails
					WHERE SOrderDetailID = @SOrderDetailID
					)
			SET @SDetailID = (
					SELECT min(SDetailID)
					FROM SOrderDetails
					WHERE SOrderDetailID = @SOrderDetailID
					)

			IF (@SalesQty > @Quantity)
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @Quantity,TotalSFT=TotalSFT+(@Quantity*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @Quantity,TotalSFT=TotalSFT+(@Quantity*@SFTPerPCS)
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 0, RQuantity = RQuantity + @Quantity
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate) 
				(SELECT @SalesOrderId, ProductId, @Quantity, UnitPrice, TAmount, @SDetailID, ColorId, 1, @SalesQty, @Quantity, @SOrderDetailID,0,@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID
				)

				SET @Quantity = 0
			END
			ELSE IF (@SalesQty < @Quantity)
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS),Status=1
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 1, RQuantity = RQuantity + @SalesQty
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate) 
				(SELECT @SalesOrderId, ProductId, @SalesQty, UnitPrice, TAmount, @SDetailID, @ColorID, 2, @SalesQty, @Quantity, @SOrderDetailID,0,@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID)

				SET @Quantity = @Quantity - @SalesQty
			END
					--Check No 3
			ELSE
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS),Status=1
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 1, RQuantity = RQuantity + @SalesQty
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate)
				(SELECT @SalesOrderId, ProductId, @SalesQty, UnitPrice, TAmount, @SDetailID, @ColorID, 3, @SalesQty, @Quantity, @SOrderDetailID,0, @SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID)

				SET @Quantity = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity,@SDetailID,@SFTPerPCS,@SFTRate
	END

	UPDATE Customers
	SET Customers.TotalDue = (Customers.TotalDue - s.TotalDue)
	FROM @SalesOrder s
	JOIN Customers ON Customers.CustomerID = s.CustomerID

	UPDATE StockDetails
	SET StockDetails.STATUS = 1
	FROM @SODetails s
	JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
	JOIN Products ON Products.ProductID = StockDetails.ProductID
	WHERE Products.ProductType != 2
	COMMIT
	Select @Result=1,@ROrderID=@SalesOrderId

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	Select @Result=0,@ROrderID=0
END CATCH

UPDATE SOrderDetails
SET RQuantity = 0
WHERE RQuantity IS NULL

------------------------------------
-------Date: 04-04-2024-------------
---------------Nahid----------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BankTransactions ADD
	PayCashAccountId int NULL
GO
ALTER TABLE dbo.BankTransactions SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


------------------------------------
-------Date: 03-04-2024-------------
---------------Nahid----------------

--exec sp_DailyCashInHand '2020-03-28 00:00:00','2020-03-28 00:00:00','7'
ALTER PROCEDURE [dbo].[sp_DailyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

--IF (@ConcernID = 1)
--	SET @CashInHand = 1263.00
--ELSE IF (@ConcernID = 5)
IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
begin
	SET @CashInHand = - 2.00
END
ELSE IF (@ConcernID = 4)
begin
	SET @CashInHand = 65000.00
END
ELSE IF (@ConcernID = (Select ConcernId from CashAccounts where ConcernId=@ConcernID))
begin
	SET @CashInHand = (Select OpeningBalance from CashAccounts where ConcernId=@ConcernID)
	set @StartDate = (Select OpeningDate from CashAccounts where ConcernId=@ConcernID)
END
--SET @CashInHand = @CashInHand + isnull((
--			SELECT sum(Amount)
--			FROM ShareInvestments SI
--			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
--			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
--			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
--			), 0)
--SET @CashInHand = @CashInHand + isnull((
--			SELECT sum(OpeningBalance)
--			FROM CashAccounts CA
--			WHERE CA.ConcernID = @ConcernID
--			), 0)




--set @CashInHand = ISNULL((SELECT TOP 1 OpeningBalance from CashAccounts 
--where OpeningDate>=@FromDate AND concernid=@ConcernID
--ORDER BY OpeningDate),0)

--set @StartDate = ISNULL((SELECT TOP 1 OpeningDate from CashAccounts 
--where OpeningDate>=@FromDate AND concernid=@ConcernID
--ORDER BY OpeningDate),@FromDate)


CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(DAY, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	--	DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	--	DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	--SET @total = isnull((
	--			SELECT sum(RecAmt)
	--			FROM POrders
	--			WHERE ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate)
	--			), 0)

	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	set @total = isnull((
				select sum(RecAmt)
				from POrders
				where ConcernID = @ConcernID and status = 1 AND PayCashAccountId > 0 and DAY(Convert(date, OrderDate)) = DAY(@StartDate)
				and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data1
		select @StartDate, 'Cash Paid', 0, '', 0, 'Order'

		insert into #temp_Data1
		select @StartDate, s.Name, sum(RecAmt), 'Cash Sales', 0, 'Order'
		from POrders po
		join Suppliers s on po.SupplierID = s.SupplierID
		where po.ConcernID = @ConcernID and status = 1 AND PayCashAccountId > 0 and DAY(Convert(date, OrderDate)) = DAY(@StartDate)
		and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate) and po.RecAmt>0
		group by s.SupplierID,s.Name

		insert into #temp_Data1
		select @StartDate, 'Total Cash Paid', @total, '', 0, 'Header'

END 

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections cc
				join Suppliers s on cc.SupplierID = s.SupplierID
				where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
				and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data1
		select @StartDate,'Cash Delivery', 0, '', 0, 'Header'

		insert into #temp_Data1
		select @StartDate,s.Name, sum(cc.amount), '', 0, 'Cash'
		from CashCollections cc
		join Suppliers s on cc.SupplierID = s.SupplierID
		where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
		and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
		group by s.SupplierID,s.Name

		insert into #temp_Data1
		select @StartDate,'Total Cash Delivery', @total, '', 0, 'Header'
END

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
	END

		------------------------------------------------------Expense in Product return----------------------------------
	set @total = isnull((
				select sum(PaidAmount)
				from ROrders
				where ConcernID = @ConcernID and DAY(Convert(date, ReturnDate)) = DAY(@StartDate) and Month(Convert(date, ReturnDate)) = Month(@StartDate) and Year(Convert(date, ReturnDate)) = Year(@StartDate)
				), 0)

if (@total != 0)
BEGIN

	insert into #temp_Data1
	select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

END

	-------------------------------------------------------- Expense Cash Collection Return------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Cash Collection Return', @total, 'Cash Collection Return', 0, 'Cash'


	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE ParentId = 4 AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE ParentId IN (4) AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name
	----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)

	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE (SIH.ParentId=3  AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name+'(Lia. Pay)', sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE (SIH.ParentId=3  AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name

	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 2  AND PayCashAccountId > 0 AND SI.CashInHandReportStatus = 0  AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		), 0)
IF (@total != 0)
BEGIN
	insert into #temp_Data1
	select @StartDate,'Lia. Pay', 0, '', 0, 'Header'

	INSERT INTO #temp_Data1
	SELECT @StartDate, SIH.Name+'(Lia. Pay)', sum(Amount), 'Liabilities Paid', 0, 'Cash'
	FROM ShareInvestments SI
	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	WHERE (SIH.ParentId=3  AND SIH.ConcernID=@ConcernID) AND TransactionType = 2  AND PayCashAccountId > 0  AND SI.CashInHandReportStatus = 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	GROUP BY SIH.Name

	insert into #temp_Data1
	select @StartDate,'Total Lia. Pay', @total, '', 0, 'Header'
END
	----------------------------------------------Opening Cash In Hand in Income Table--------------------------------------------------------------- 
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount),
		('('+ B.AccountNo + ',' + B.BankName +')'+ (case when c.CustomerType=1 or c.CustomerType=3 then ' Previous Bank collections(Retail)' else 'Previous Bank collections(Dealer)' end))
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		inner join Customers c on bt.CustomerID=c.CustomerID
		where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName,c.CustomerType

	----------------------------------------Income from Fund IN------------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.AnotherBankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.AnotherBankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, Convert(varchar(10),c.CustomerType)+'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
	    insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections',@total, 'Header')
		
		END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	if (
			(
				isnull((
						select sum(Amount)
						from Expenditures EX
						inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
						where E.ConcernID = @ConcernID and E.status = 2 AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate as TransDate, '', 0, E.Description, sum(Amount), E.Description
		from Expenditures EX
		inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
		where E.ConcernID = @ConcernID and E.status = 2 AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
		group by E.Description
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Total Direct Income',@total, 'Header')
	
	end

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Liabilites Received', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Total Liabilites Received',@total, 'Header')
	END

	   SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0.00,SIH.Name+'(Current Asset)',  sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name

		insert into #temp_Data2 values(@StartDate, 'Current Asset', 0.00, 'Total Current Asset',@total, 'Header')
	END

	insert into #temp_Data3
	select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '', 0.00,  ''
	from #temp_Data1 T1
	UNION ALL
	select @StartDate, 0,  '', 0, isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00), isnull(T2.Module, '')
	from #temp_Data2 T2

	declare @a decimal(18, 2)
	declare @b decimal(18, 2)
	declare @ExpenseWithinDate decimal(18, 2)
	declare @IncomeWithinDate decimal(18, 2)
	declare @CashInHandWithinDate decimal(18, 2)

	set @a = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @b = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @ExpenseWithinDate = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @IncomeWithinDate = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	set @CashInHand = @CashInHand + (@b - @a)

	insert into #temp_Data3
	values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	insert into #temp_Data3
	values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	insert into #temp_Data3
	values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	set @StartDate = DATEADD(DAY, 1, @StartDate)
	--select *From #temp_Data1
	--select *From #temp_Data2
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)

------------------------------------
-------Date: 02-04-2024-------------
---------------Nahid----------------

--exec sp_DailyCashInHand '2020-03-28 00:00:00','2020-03-28 00:00:00','7'
ALTER PROCEDURE [dbo].[sp_DailyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

--IF (@ConcernID = 1)
--	SET @CashInHand = 1263.00
--ELSE IF (@ConcernID = 5)
IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
begin
	SET @CashInHand = - 2.00
END
ELSE IF (@ConcernID = 4)
begin
	SET @CashInHand = 65000.00
END
ELSE IF (@ConcernID = (Select ConcernId from CashAccounts where ConcernId=@ConcernID))
begin
	SET @CashInHand = (Select OpeningBalance from CashAccounts where ConcernId=@ConcernID)
	set @StartDate = (Select OpeningDate from CashAccounts where ConcernId=@ConcernID)
END
--SET @CashInHand = @CashInHand + isnull((
--			SELECT sum(Amount)
--			FROM ShareInvestments SI
--			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
--			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
--			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
--			), 0)
--SET @CashInHand = @CashInHand + isnull((
--			SELECT sum(OpeningBalance)
--			FROM CashAccounts CA
--			WHERE CA.ConcernID = @ConcernID
--			), 0)




--set @CashInHand = ISNULL((SELECT TOP 1 OpeningBalance from CashAccounts 
--where OpeningDate>=@FromDate AND concernid=@ConcernID
--ORDER BY OpeningDate),0)

--set @StartDate = ISNULL((SELECT TOP 1 OpeningDate from CashAccounts 
--where OpeningDate>=@FromDate AND concernid=@ConcernID
--ORDER BY OpeningDate),@FromDate)


CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(DAY, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	--	DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	--	DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	--SET @total = isnull((
	--			SELECT sum(RecAmt)
	--			FROM POrders
	--			WHERE ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate)
	--			), 0)

	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	set @total = isnull((
				select sum(RecAmt)
				from POrders
				where ConcernID = @ConcernID and status = 1 AND PayCashAccountId > 0 and DAY(Convert(date, OrderDate)) = DAY(@StartDate)
				and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data1
		select @StartDate, 'Cash Paid', 0, '', 0, 'Order'

		insert into #temp_Data1
		select @StartDate, s.Name, sum(RecAmt), 'Cash Sales', 0, 'Order'
		from POrders po
		join Suppliers s on po.SupplierID = s.SupplierID
		where po.ConcernID = @ConcernID and status = 1 AND PayCashAccountId > 0 and DAY(Convert(date, OrderDate)) = DAY(@StartDate)
		and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate) and po.RecAmt>0
		group by s.SupplierID,s.Name

		insert into #temp_Data1
		select @StartDate, 'Total Cash Paid', @total, '', 0, 'Header'

END 

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections cc
				join Suppliers s on cc.SupplierID = s.SupplierID
				where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
				and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data1
		select @StartDate,'Cash Delivery', 0, '', 0, 'Header'

		insert into #temp_Data1
		select @StartDate,s.Name, sum(cc.amount), '', 0, 'Cash'
		from CashCollections cc
		join Suppliers s on cc.SupplierID = s.SupplierID
		where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
		and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
		group by s.SupplierID,s.Name

		insert into #temp_Data1
		select @StartDate,'Total Cash Delivery', @total, '', 0, 'Header'
END

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
	END

		------------------------------------------------------Expense in Product return----------------------------------
	set @total = isnull((
				select sum(PaidAmount)
				from ROrders
				where ConcernID = @ConcernID and DAY(Convert(date, ReturnDate)) = DAY(@StartDate) and Month(Convert(date, ReturnDate)) = Month(@StartDate) and Year(Convert(date, ReturnDate)) = Year(@StartDate)
				), 0)

if (@total != 0)
BEGIN

	insert into #temp_Data1
	select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

END

	-------------------------------------------------------- Expense Cash Collection Return------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Cash Collection Return', @total, 'Cash Collection Return', 0, 'Cash'


	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE ParentId = 4 AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE ParentId IN (4) AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name
	----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)

	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				INNER JOIN ShareInvestmentHeads PH  ON SIH.ParentId = PH.SIHID
				WHERE (PH.Name='Liability' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name+'(Lia. Pay)', sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		INNER JOIN ShareInvestmentHeads PH  ON SIH.ParentId = PH.SIHID
		WHERE (PH.Name='Liability' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name


	----------------------------------------------Opening Cash In Hand in Income Table--------------------------------------------------------------- 
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount),
		('('+ B.AccountNo + ',' + B.BankName +')'+ (case when c.CustomerType=1 or c.CustomerType=3 then ' Previous Bank collections(Retail)' else 'Previous Bank collections(Dealer)' end))
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		inner join Customers c on bt.CustomerID=c.CustomerID
		where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName,c.CustomerType

	----------------------------------------Income from Fund IN------------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.AnotherBankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.AnotherBankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, Convert(varchar(10),c.CustomerType)+'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
	    insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections',@total, 'Header')
		
		END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	if (
			(
				isnull((
						select sum(Amount)
						from Expenditures EX
						inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
						where E.ConcernID = @ConcernID and E.status = 2 AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate as TransDate, '', 0, E.Description, sum(Amount), E.Description
		from Expenditures EX
		inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
		where E.ConcernID = @ConcernID and E.status = 2 AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
		group by E.Description
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Total Direct Income',@total, 'Header')
	
	end

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Liabilites Received', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Total Liabilites Received',@total, 'Header')
	END

	   SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0.00,SIH.Name+'(Current Asset)',  sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name

		insert into #temp_Data2 values(@StartDate, 'Current Asset', 0.00, 'Total Current Asset',@total, 'Header')
	END

	insert into #temp_Data3
	select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '', 0.00,  ''
	from #temp_Data1 T1
	UNION ALL
	select @StartDate, 0,  '', 0, isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00), isnull(T2.Module, '')
	from #temp_Data2 T2

	declare @a decimal(18, 2)
	declare @b decimal(18, 2)
	declare @ExpenseWithinDate decimal(18, 2)
	declare @IncomeWithinDate decimal(18, 2)
	declare @CashInHandWithinDate decimal(18, 2)

	set @a = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @b = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @ExpenseWithinDate = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @IncomeWithinDate = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	set @CashInHand = @CashInHand + (@b - @a)

	insert into #temp_Data3
	values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	insert into #temp_Data3
	values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	insert into #temp_Data3
	values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	set @StartDate = DATEADD(DAY, 1, @StartDate)
	--select *From #temp_Data1
	--select *From #temp_Data2
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)


------------------------------------
-------Date: 01-04-2024-------------
---------------Nahid----------------

ALTER TABLE dbo.Expenditures ADD
	ExpenseIncomeStatus int NOT NULL CONSTRAINT DF_Expenditures_ExpenseIncomeStatus DEFAULT ((1))
GO


------------------------------------
-------Date: 31-03-2024-------------
---------------Nahid----------------

ALTER TABLE dbo.Banks ADD
	OpeningDate datetime NOT NULL CONSTRAINT DF_Banks_OpeningDate DEFAULT (getdate())
GO
------------------------------------
-------Date: 30-03-2024-------------
---------------Nahid----------------

--exec sp_DailyCashInHand '2020-03-28 00:00:00','2020-03-28 00:00:00','7'
ALTER PROCEDURE [dbo].[sp_DailyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

--IF (@ConcernID = 1)
--	SET @CashInHand = 1263.00
--ELSE IF (@ConcernID = 5)
IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
begin
	SET @CashInHand = - 2.00
END
ELSE IF (@ConcernID = 4)
begin
	SET @CashInHand = 65000.00
END
ELSE IF (@ConcernID = (Select ConcernId from CashAccounts where ConcernId=@ConcernID))
begin
	SET @CashInHand = (Select OpeningBalance from CashAccounts where ConcernId=@ConcernID)
	set @StartDate = (Select OpeningDate from CashAccounts where ConcernId=@ConcernID)
END
--SET @CashInHand = @CashInHand + isnull((
--			SELECT sum(Amount)
--			FROM ShareInvestments SI
--			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
--			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
--			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
--			), 0)
--SET @CashInHand = @CashInHand + isnull((
--			SELECT sum(OpeningBalance)
--			FROM CashAccounts CA
--			WHERE CA.ConcernID = @ConcernID
--			), 0)




--set @CashInHand = ISNULL((SELECT TOP 1 OpeningBalance from CashAccounts 
--where OpeningDate>=@FromDate AND concernid=@ConcernID
--ORDER BY OpeningDate),0)

--set @StartDate = ISNULL((SELECT TOP 1 OpeningDate from CashAccounts 
--where OpeningDate>=@FromDate AND concernid=@ConcernID
--ORDER BY OpeningDate),@FromDate)


CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(DAY, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	--	DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	--	DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections cc
				join Suppliers s on cc.SupplierID = s.SupplierID
				where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
				and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data1
		select @StartDate,'Cash Delivery', 0, '', 0, 'Header'

		insert into #temp_Data1
		select @StartDate,s.Name, sum(cc.amount), '', 0, 'Cash'
		from CashCollections cc
		join Suppliers s on cc.SupplierID = s.SupplierID
		where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
		and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
		group by s.SupplierID,s.Name

		insert into #temp_Data1
		select @StartDate,'Total Cash Delivery', @total, '', 0, 'Header'
END

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
	END

		------------------------------------------------------Expense in Product return----------------------------------
	set @total = isnull((
				select sum(PaidAmount)
				from ROrders
				where ConcernID = @ConcernID and DAY(Convert(date, ReturnDate)) = DAY(@StartDate) and Month(Convert(date, ReturnDate)) = Month(@StartDate) and Year(Convert(date, ReturnDate)) = Year(@StartDate)
				), 0)

if (@total != 0)
BEGIN

	insert into #temp_Data1
	select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

END

	-------------------------------------------------------- Expense Cash Collection Return------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Cash Collection Return', @total, 'Cash Collection Return', 0, 'Cash'


	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE ParentId = 4 AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE ParentId IN (4) AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name
	----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)

	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				INNER JOIN ShareInvestmentHeads PH  ON SIH.ParentId = PH.SIHID
				WHERE (PH.Name='Liability' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name+'(Lia. Pay)', sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		INNER JOIN ShareInvestmentHeads PH  ON SIH.ParentId = PH.SIHID
		WHERE (PH.Name='Liability' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name


	----------------------------------------------Opening Cash In Hand in Income Table--------------------------------------------------------------- 
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount),
		('('+ B.AccountNo + ',' + B.BankName +')'+ (case when c.CustomerType=1 or c.CustomerType=3 then ' Previous Bank collections(Retail)' else 'Previous Bank collections(Dealer)' end))
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		inner join Customers c on bt.CustomerID=c.CustomerID
		where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName,c.CustomerType

	----------------------------------------Income from Fund IN------------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.AnotherBankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.AnotherBankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, Convert(varchar(10),c.CustomerType)+'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
	    insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections',@total, 'Header')
		
		END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	if (
			(
				isnull((
						select sum(Amount)
						from Expenditures EX
						inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
						where E.ConcernID = @ConcernID and E.status = 2 AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate as TransDate, '', 0, E.Description, sum(Amount), E.Description
		from Expenditures EX
		inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
		where E.ConcernID = @ConcernID and E.status = 2 AND PayCashAccountId > 0 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
		group by E.Description
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Total Direct Income',@total, 'Header')
	
	end

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Liabilites Received', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Total Liabilites Received',@total, 'Header')
	END

	   SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0.00,SIH.Name+'(Current Asset)',  sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND PayCashAccountId > 0 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name

		insert into #temp_Data2 values(@StartDate, 'Current Asset', 0.00, 'Total Current Asset',@total, 'Header')
	END

	insert into #temp_Data3
	select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '', 0.00,  ''
	from #temp_Data1 T1
	UNION ALL
	select @StartDate, 0,  '', 0, isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00), isnull(T2.Module, '')
	from #temp_Data2 T2

	declare @a decimal(18, 2)
	declare @b decimal(18, 2)
	declare @ExpenseWithinDate decimal(18, 2)
	declare @IncomeWithinDate decimal(18, 2)
	declare @CashInHandWithinDate decimal(18, 2)

	set @a = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @b = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @ExpenseWithinDate = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @IncomeWithinDate = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	set @CashInHand = @CashInHand + (@b - @a)

	insert into #temp_Data3
	values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	insert into #temp_Data3
	values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	insert into #temp_Data3
	values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	set @StartDate = DATEADD(DAY, 1, @StartDate)
	--select *From #temp_Data1
	--select *From #temp_Data2
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)

------------------------------------
-------Date: 28-03-2024-------------
---------------Nahid----------------

ALTER TABLE dbo.Expenditures ADD
	PayCashAccountId int NULL,
	PayBankId int NULL
GO
-----------------------------------------------------------------------------------------------------------------------------

ALTER TABLE dbo.ShareInvestments ADD
	PayCashAccountId int NULL,
	PayBankId int NULL
GO

------------------------------------
-------Date: 27-03-2024-------------
---------------Nahid----------------
ALTER TABLE dbo.SOrders ADD
	PayCashAccountId int NULL,
	PayBankId int NULL
GO
-----------------------------------------------------------------------------------------------------------------------------


EXEC sys.sp_rename 'dbo.InsertSalesOrderTable', 'zInsertSalesOrderTable';
GO

CREATE TYPE [dbo].[InsertSalesOrderTable] AS TABLE(
	[InvoiceDate] [datetime] NULL,
	[InvoiceNo] [varchar](150) NULL,
	[VatPercentage] [decimal](18, 4) NULL,
	[VatAmount] [decimal](18, 4) NULL,
	[GrandTotal] [decimal](18, 4) NULL,
	[TDiscountPercentage] [decimal](18, 4) NULL,
	[TDiscountAmount] [decimal](18, 4) NULL,
	[RecAmt] [decimal](18, 4) NULL,
	[PaymentDue] [decimal](18, 4) NULL,
	[TotalAmount] [decimal](18, 4) NULL,
	[TotalDue] [decimal](18, 4) NULL,
	[AdjAmount] [decimal](18, 4) NULL,
	[Status] [int] NULL,
	[CustomerId] [int] NULL,
	[ConcernId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreateDate] [datetime] NULL,
	[TotalOffer] [decimal](18, 4) NULL,
	[NetDiscount] [decimal](18, 4) NULL,
	[Remarks] [varchar](150) NULL,
	[TotalFractionAmt] [decimal](18, 4) NULL,
	[PrevDue] [decimal](18, 4) NULL,
	[DepotId] [int] NULL,
	[Terms] [int] NULL,
	[PayCashAccountId] [int] NULL,
	[PayBankId] [int] NULL
)
GO

DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertSalesOrderTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO
DROP TYPE dbo.zInsertSalesOrderTable;
GO


-----------------------------------------------------------------------------------------------------------------------------

ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, IsApproved, IsAdvanceSale, PayCashAccountId, PayBankId)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, 1, 0, PayCashAccountId, PayBankId FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL


	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL


UPDATE CashAccounts Set CashAccounts.TotalBalance = (CashAccounts.TotalBalance + s.RecAmt)
from @SalesOrder s
JOIN CashAccounts ON CashAccounts.Id = s.PayCashAccountId

UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount + s.RecAmt)
from @SalesOrder s
JOIN Banks ON Banks.BankID = s.PayBankId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0				
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH
------------------------------------
-------Date: 25-03-2024-------------
---------------Nahid----------------

ALTER TABLE dbo.POrders ADD
	PayCashAccountId int NULL,
	PayBankId int NULL
GO

-----------------------------------------------------------------------------------------------------------------------------
ALTER TABLE dbo.CashCollections ADD
	PayCashAccountId int NULL,
	PayBankId int NULL
GO
-----------------------------------------------------------------------------------------------------------------------------


EXEC sys.sp_rename 'dbo.InsertPurchaseOrderTable', 'zInsertPurchaseOrderTable';
GO

CREATE TYPE [dbo].[InsertPurchaseOrderTable] AS TABLE(
	[OrderDate] [datetime] NULL,
	[ChallanNo] [varchar](150) NULL,
	[SupplierId] [int] NULL,
	[GrandTotal] [decimal](18, 2) NULL,
	[TDiscount] [decimal](18, 2) NULL,
	[TotalAmt] [decimal](18, 2) NULL,
	[RecAmt] [decimal](18, 2) NULL,
	[PaymentDue] [decimal](18, 2) NULL,
	[TotalDue] [decimal](18, 2) NULL,
	[AdjAmount] [decimal](18, 2) NULL,
	[Status] [int] NULL,
	[PPTDisAmt] [decimal](18, 2) NULL,
	[NetDiscount] [decimal](18, 2) NULL,
	[LabourCost] [decimal](18, 2) NULL,
	[ConcernId] [int] NULL,
	[CreateDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[IsDamageOrder] [int] NULL,
	[Remarks] [varchar](150) NULL,
	[PayCashAccountId] [int] NULL,
	[PayBankId] [int] NULL

)
GO
DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertPurchaseOrderTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO
DROP TYPE dbo.zInsertPurchaseOrderTable;
GO


-----------------------------------------------------------------------------------------------------------------------------

ALTER PROC [dbo].[AddPurchaseOrder]
(
	@PurchaseOrder [InsertPurchaseOrderTable] readonly,
	@PODetails [InsertPODetailTable] readonly,
	@POProductDetails [InsertPOProductDetailTable] readonly,
	@Stocks [InsertStockTable] readonly,
	@StockDetails [InsertStockDetailTable] readonly
)
  
AS 
DECLARE @PurchaseOrderId int

BEGIN TRY  
 BEGIN TRANSACTION 
  
INSERT INTO POrders
(
OrderDate, ChallanNo, SupplierID, GrandTotal, TDiscount, TotalAmt, AdjAmount, RecAmt, PaymentDue, TotalDue,
Status, PPDisAmt, NetDiscount, LaborCost, ConcernID, CreateDate, CreatedBy,IsDamageOrder, Remarks, PayCashAccountId, PayBankId
)
(
Select OrderDate, ChallanNo, SupplierID, GrandTotal, TDiscount, TotalAmt, AdjAmount, RecAmt, PaymentDue, TotalDue,
Status, PPTDisAmt, NetDiscount, LabourCost, ConcernID, CreateDate, CreatedBy,IsDamageOrder,Remarks, PayCashAccountId, PayBankId from @PurchaseOrder)

UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue + p.PaymentDue)
from @PurchaseOrder p
JOIN Suppliers ON Suppliers.SupplierID = p.SupplierId
where p.IsDamageOrder!=1

UPDATE CashAccounts Set CashAccounts.TotalBalance = (CashAccounts.TotalBalance - p.RecAmt)
from @PurchaseOrder p
JOIN CashAccounts ON CashAccounts.Id = p.PayCashAccountId
where p.IsDamageOrder!=1

UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount - p.RecAmt)
from @PurchaseOrder p
JOIN Banks ON Banks.BankID = p.PayBankId
where p.IsDamageOrder!=1

SET @PurchaseOrderId = SCOPE_IDENTITY()

INSERT INTO PriceProtections
(
ProductID, ColorID, PrvPrice, ChangePrice, POrderID, ConcernID, SupplierID, PrvStockQty, PChangeDate
)
(
Select stk.ProductId, stk.ColorId, stk.MRPPrice, stkt.MRPPrice, @PurchaseOrderId, stk.ConcernID, (Select SupplierId From POrders Where POrderID = @PurchaseOrderId), stk.Quantity, GETDATE()
From @Stocks stkt INNER JOIN Stocks stk ON stk.ProductID = stkt.ProductId AND stk.ColorID = stkt.ColorId
Where stk.MRPPrice > stkt.MRPPrice
)

INSERT INTO POrderDetails
(
ProductID, ColorID, Quantity, UnitPrice, TAmount, PPDISPer, 
PPDISAmt, MRPRate, POrderID,SalesRate,ExtraPPDISPer,ExtraPPDISAmt,
PPOFFER,CreditSalesRate,CRSalesRate12Month,CRSalesRate3Month,GodownID,SFTRate,TotalSFT
)
(
Select ProductId, ColorId, Quantity, UnitPrice, TAmount,  PPDisPer,
PPDisAmt, MrpRate, @PurchaseOrderId POrderID,SalesRate,ExtraPPDISPer,ExtraPPDISAmt,
PPOffer,CreditSalesRate,CRSalesRate12Month,CRSalesRate3Month,GodownId,SFTRate,TotalSFT from @PODetails)

INSERT INTO POProductDetails
(
ProductID, ColorID, IMENO, POrderDetailID,DamagePOPDID
)
(
Select POPD.ProductId, POPD.ColorId, POPD.IMENo, POD.POrderDetailID,DamagePOPDID from @POProductDetails POPD
INNER JOIN POrderDetails POD ON POD.ProductID = POPD.ProductId AND POD.ColorID = POPD.ColorId AND POD.POrderID = @PurchaseOrderId
)

UPDate POProductDetails set IsDamageReplaced=1 
from @POProductDetails dtPOPD 
join POProductDetails POPD on dtPOPD.DamagePOPDID=POPD.POPDID

UPDATE Stocks
SET Stocks.Quantity = (Stocks.Quantity + s.Quantity),Stocks.TotalSFT =Stocks.TotalSFT+ s.TotalSFT, Stocks.MRPPrice = s.MRPPrice,
LPPrice = s.LPPrice, ModifiedBy = s.CreatedBy, ModifiedDate =  s.CreateDate
from @Stocks s
JOIN Stocks ON Stocks.StockID = s.StockID

INSERT INTO Stocks
(
StockCode, EntryDate, Quantity, ProductID, ColorID, MRPPrice, LPPrice, ConcernID, CreatedBy, CreateDate,GodownID,TotalSFT
)
(
Select StockCode, EntryDate, Quantity, ProductId, ColorId, MRPPrice, LPPrice, ConcernId, CreatedBy,
CreateDate,GodownId,TotalSFT from @Stocks Where StockId Is Null
)

----For No Barcode
--update StockDetails set status=2
--from @StockDetails dtsd
--join StockDetails on StockDetails.ColorID = dtsd.ColorId and StockDetails.ProductId = dtsd.ProductId and StockDetails.IMENo = dtsd.IMENo

INSERT INTO StockDetails
(
StockID, StockCode, ProductID, ColorID, POrderDetailID, IMENO, Status,PRate,SRate,CreditSRate,
CRSalesRate12Month,CRSalesRate3Month,Quantity,GodownID,SFTRate,TotalSFT
)
(Select 
stk.StockID, stkd.StockCode, stkd.ProductId, stkd.ColorId, POD.POrderDetailID, stkd.IMENo, stkd.Status,POD.UnitPrice,stkd.SalesRate,stkd.CreditSRate,
POD.CRSalesRate12Month,POD.CRSalesRate3Month,POD.Quantity,stkd.GodownId,stkd.SFTRate,stkd.TotalSFT from @StockDetails stkd
INNER JOIN Stocks stk ON stk.ProductID = stkd.ProductId AND stk.ColorID = stkd.ColorID
INNER JOIN POrderDetails POD ON POD.ProductID = stkd.ProductId AND POD.ColorID = stkd.ColorId AND POD.POrderID = @PurchaseOrderId
INNER JOIN Products P on P.ProductID =stk.ProductID
where  P.ProductType=2
)

INSERT INTO StockDetails
(
StockID, StockCode, ProductID, ColorID, POrderDetailID, IMENO, Status,PRate,SRate,CreditSRate,
CRSalesRate12Month,CRSalesRate3Month,SFTRate,TotalSFT
)
(
Select stk.StockID, stkd.StockCode, stkd.ProductId, stkd.ColorId, POD.POrderDetailID, stkd.IMENo, stkd.Status,POD.UnitPrice,stkd.SalesRate,stkd.CreditSRate,
POD.CRSalesRate12Month,POD.CRSalesRate3Month,stkd.SFTRate,stkd.TotalSFT from @StockDetails stkd
INNER JOIN Stocks stk ON stk.ProductID = stkd.ProductId AND stk.ColorID = stkd.ColorID
INNER JOIN POrderDetails POD ON POD.ProductID = stkd.ProductId AND POD.ColorID = stkd.ColorId AND POD.POrderID = @PurchaseOrderId
INNER JOIN Products P on P.ProductID =stk.ProductID
where  P.ProductType!=2
)


COMMIT

--RETURN
RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH
------------------------------------
-------Date: 24-03-2024-------------
---------------Nahid----------------

CREATE TABLE [dbo].[CashAccounts](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[OpeningBalance] [decimal](18, 2) NOT NULL,
	[TotalBalance] [decimal](18, 2) NOT NULL,
	[OpeningDate] [datetime] NOT NULL,
	[ConcernId] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_CashAccounts] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[CashAccounts]  WITH CHECK ADD  CONSTRAINT [FK_CashAccounts_SisterConcerns] FOREIGN KEY([ConcernId])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[CashAccounts] CHECK CONSTRAINT [FK_CashAccounts_SisterConcerns]
GO




------------------------------------
-------Date: 16-01-2024-------------
---------------Nahid----------------

ALTER TABLE dbo.POProductDetails ADD
	ReturnQty decimal(18, 2) NOT NULL CONSTRAINT DF_POProductDetails_ReturnQty DEFAULT ((0)),
	ReturnSDetailID int NULL
GO

------------------------------------------------------------------------------------------------------------------------------


CREATE TYPE [dbo].[InsertReturnPOProductDetailTable] AS TABLE(
	[ProductId] [int] NULL,
	[ColorId] [int] NULL,
	[IMENO] [nvarchar](max) NULL,
	[DamagePOPDID] [int] NULL,
	[ReturnSDetailID] [int] NULL,
	[ReturnQty] [decimal](18, 2) NULL
)
GO

------------------------------------------------------------------------------------------------------------------------------



Create PROC [dbo].[sp_AddRawStockOutOrder]
(
	@PurchaseOrder [InsertPurchaseOrderTable] readonly,
	@PODetails [InsertPODetailTable] readonly,
	@POProductDetails [InsertReturnPOProductDetailTable] readonly,
	@Result INT OUTPUT,
	@OutPOrderID INT OUTPUT
)
  
AS 
DECLARE @PurchaseOrderId int

BEGIN TRY  
 BEGIN TRANSACTION 
  
INSERT INTO POrders
(
OrderDate, ChallanNo, SupplierID, GrandTotal, TDiscount, TotalAmt, AdjAmount, RecAmt, PaymentDue, TotalDue,
Status, PPDisAmt, NetDiscount, LaborCost, ConcernID, CreateDate, CreatedBy,IsDamageOrder,Remarks
)
(
Select OrderDate, ChallanNo, SupplierID, GrandTotal, TDiscount, TotalAmt, AdjAmount, RecAmt, PaymentDue, TotalDue,
Status, PPTDisAmt, NetDiscount, LabourCost, ConcernID, CreateDate, CreatedBy,IsDamageOrder, Remarks from @PurchaseOrder)

--UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue - p.PaymentDue)
--from @PurchaseOrder p
--JOIN Suppliers ON Suppliers.SupplierID = p.SupplierId
--where p.IsDamageOrder!=1

SET @PurchaseOrderId = SCOPE_IDENTITY()


INSERT INTO POrderDetails
(
ProductID, ColorID, Quantity, UnitPrice, TAmount, PPDISPer, PPDISAmt, MRPRate, POrderID,SalesRate,ExtraPPDISPer,ExtraPPDISAmt,PPOFFER,CreditSalesRate,GodownID,SFTRate,TotalSFT
)
(
Select ProductId, ColorId, Quantity, UnitPrice, TAmount,  PPDisPer,
PPDisAmt, MrpRate, @PurchaseOrderId POrderID,SalesRate,ExtraPPDISPer,ExtraPPDISAmt,PPOffer,CreditSalesRate,GodownId,SFTRate,TotalSFT  from @PODetails)

INSERT INTO POProductDetails
(
ProductID, ColorID, IMENO, POrderDetailID,ReturnSDetailID,ReturnQty
)
(
Select POPD.ProductId, POPD.ColorId, POPD.IMENo, POD.POrderDetailID,POPD.ReturnSDetailID,POPD.ReturnQty from @POProductDetails POPD
INNER JOIN POrderDetails POD ON POD.ProductID = POPD.ProductId AND POD.ColorID = POPD.ColorId AND POD.POrderID = @PurchaseOrderId
)

-----------------------------Delete IMEI----------------------------------
declare @POrderID int
declare @SupplierID int
declare @ProductID int
declare @ColorID int
declare @ProductType int
declare @StockID int
declare @SDetailID int
declare @POrderDetailID int
declare @TotalDue decimal(18,2)
declare @GrandTotal decimal(18,2)
declare @TotalAmount decimal(18,2)
declare @NetDiscount decimal(18,2)
declare @PPDISAmt decimal(18,2)
declare @PaymentDue decimal(18,2)
declare @MRPRate decimal(18,2)
declare @UnitPrice decimal(18,2)
declare @PPDISPer decimal(18,2)
declare @IMEI varchar(300)
declare @POPDID int
declare @Quantity decimal(18,2)

declare cur CURSOR LOCAL 
for  select  sd.StockID,SDetailID,POrderDetailID,sd.ProductID,sd.IMENO,st.ReturnQty,p.ProductType,sd.ColorID
     from @POProductDetails st
     join StockDetails sd on st.ReturnSDetailID =sd.SDetailID
	 join Products p on sd.ProductID = p.ProductID
     where sd.Status=1
open cur
         fetch next from cur into @StockID,@SDetailID,@POrderDetailID,@ProductID,@IMEI,@Quantity,@ProductType,@ColorID
         
while @@FETCH_STATUS = 0
BEGIN


----Update stock Start
update Stocks set Quantity=Quantity-@Quantity where StockID=@StockID

IF(@ProductType=2)
BEGIN
update StockDetails set Quantity=Quantity-@Quantity where SDetailID=@SDetailID
update StockDetails set Status=2 where SDetailID=@SDetailID and Quantity=0
END
ELSE
update StockDetails set Status=2 where SDetailID=@SDetailID

delete [dbo].[SRVProductDetails] where SDetailID=@SDetailID


  fetch next from cur into @StockID,@SDetailID,@POrderDetailID,@ProductID,@IMEI,@Quantity,@ProductType,@ColorID
END


COMMIT

SET @Result=1
SET @OutPOrderID=@PurchaseOrderId

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

	SET @Result=0
    SET @OutPOrderID=0

END CATCH

------------------------------------
-------Date: 30-09-2023-------------
---------------Nahid----------------

ALTER TABLE [dbo].[SOrderDetails] DROP CONSTRAINT [DF_SOrderDetails_BonusQuantity]
GO
------------------------------------------------------
ALTER Table SOrderDetails
Drop Column BonusQuantity

------------------------------------------------------
ALTER TABLE [dbo].[SOrders] DROP CONSTRAINT [DF_SOrders_DepotID]
GO
---------------------------------------------------
ALTER Table SOrders
Drop Column DepotID
---------------------------------------------------

ALTER TABLE [dbo].[SOrders] DROP CONSTRAINT [DF_SOrders_Terms]
GO
---------------------------------------------------
ALTER Table SOrders
Drop Column Terms

-------------------------------------------------------------------------------------------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ProductionSetupDetails ADD
	ParentQuantity decimal(18, 2) NULL,
	ChildQuantity decimal(18, 2) NULL
GO
ALTER TABLE dbo.ProductionSetupDetails ADD CONSTRAINT
	DF_ProductionSetupDetails_ParentQuantity DEFAULT ((0)) FOR ParentQuantity
GO
ALTER TABLE dbo.ProductionSetupDetails ADD CONSTRAINT
	DF_ProductionSetupDetails_ChildQuantity DEFAULT ((0)) FOR ChildQuantity
GO
ALTER TABLE dbo.ProductionSetupDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

------------------------------------
-------Date: 27-09-2023-------------
---------------Nahid----------------

ALTER TABLE dbo.StockDetails ADD
	PDetailID int NOT NULL CONSTRAINT DF_StockDetails_PDetailID DEFAULT ((0))
GO

------------------------------------
-------Date: 26-09-2023-------------
---------------Nahid----------------

CREATE TABLE [dbo].[Productions](
	[ProductionID] [int] IDENTITY(1,1) NOT NULL,
	[ProductionCode] [varchar](50) NOT NULL,
	[Date] [date] NOT NULL,
	[Status] [int] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_Productions] PRIMARY KEY CLUSTERED 
(
	[ProductionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Productions]  WITH CHECK ADD  CONSTRAINT [FK_Productions_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[Productions] CHECK CONSTRAINT [FK_Productions_SisterConcerns]
GO


----------------------------------------------------------------------------------------------------------------------


CREATE TABLE [dbo].[ProductionDetails](
	[PDetailID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[TotalCost] [decimal](18, 2) NOT NULL,
	[ProductionID] [int] NOT NULL,
 CONSTRAINT [PK_ProductionDetails] PRIMARY KEY CLUSTERED 
(
	[PDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ProductionDetails]  WITH CHECK ADD  CONSTRAINT [FK_ProductionDetails_Productions] FOREIGN KEY([ProductionID])
REFERENCES [dbo].[Productions] ([ProductionID])
GO

ALTER TABLE [dbo].[ProductionDetails] CHECK CONSTRAINT [FK_ProductionDetails_Productions]
GO

ALTER TABLE [dbo].[ProductionDetails]  WITH CHECK ADD  CONSTRAINT [FK_ProductionDetails_Products] FOREIGN KEY([ProductID])
REFERENCES [dbo].[Products] ([ProductID])
GO

ALTER TABLE [dbo].[ProductionDetails] CHECK CONSTRAINT [FK_ProductionDetails_Products]
GO


----------------------------------------------------------------------------------------------------------------------


CREATE TABLE [dbo].[ProductionRawMaterials](
	[PRMID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[PRate] [decimal](18, 2) NOT NULL,
	[PDetailID] [int] NOT NULL,
	[SDetailID] [int] NOT NULL,
 CONSTRAINT [PK_ProductionRawMaterials] PRIMARY KEY CLUSTERED 
(
	[PRMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ProductionRawMaterials]  WITH CHECK ADD  CONSTRAINT [FK_ProductionRawMaterials_ProductionDetails] FOREIGN KEY([PDetailID])
REFERENCES [dbo].[ProductionDetails] ([PDetailID])
GO

ALTER TABLE [dbo].[ProductionRawMaterials] CHECK CONSTRAINT [FK_ProductionRawMaterials_ProductionDetails]
GO

ALTER TABLE [dbo].[ProductionRawMaterials]  WITH CHECK ADD  CONSTRAINT [FK_ProductionRawMaterials_Products] FOREIGN KEY([ProductID])
REFERENCES [dbo].[Products] ([ProductID])
GO

ALTER TABLE [dbo].[ProductionRawMaterials] CHECK CONSTRAINT [FK_ProductionRawMaterials_Products]
GO

ALTER TABLE [dbo].[ProductionRawMaterials]  WITH CHECK ADD  CONSTRAINT [FK_ProductionRawMaterials_StockDetails] FOREIGN KEY([SDetailID])
REFERENCES [dbo].[StockDetails] ([SDetailID])
GO

ALTER TABLE [dbo].[ProductionRawMaterials] CHECK CONSTRAINT [FK_ProductionRawMaterials_StockDetails]
GO



------------------------------------
-------Date: 24-09-2023-------------
---------------Nahid----------------

CREATE TABLE [dbo].[ProductionSetups](
	[PSID] [int] IDENTITY(1,1) NOT NULL,
	[FINProductID] [int] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_ProductionSetups] PRIMARY KEY CLUSTERED 
(
	[PSID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [IX_ProductionSetups] UNIQUE NONCLUSTERED 
(
	[FINProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ProductionSetups]  WITH CHECK ADD  CONSTRAINT [FK_ProductionSetups_Products] FOREIGN KEY([FINProductID])
REFERENCES [dbo].[Products] ([ProductID])
GO

ALTER TABLE [dbo].[ProductionSetups] CHECK CONSTRAINT [FK_ProductionSetups_Products]
GO

ALTER TABLE [dbo].[ProductionSetups]  WITH CHECK ADD  CONSTRAINT [FK_ProductionSetups_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[ProductionSetups] CHECK CONSTRAINT [FK_ProductionSetups_SisterConcerns]
GO

-------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE [dbo].[ProductionSetupDetails](
	[PSDID] [int] IDENTITY(1,1) NOT NULL,
	[RAWProductID] [int] NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[PSID] [int] NOT NULL,
 CONSTRAINT [PK_ProductionSetupDetails] PRIMARY KEY CLUSTERED 
(
	[PSDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ProductionSetupDetails]  WITH CHECK ADD  CONSTRAINT [FK_ProductionSetupDetails_ProductionSetups] FOREIGN KEY([PSID])
REFERENCES [dbo].[ProductionSetups] ([PSID])
ON DELETE CASCADE
GO

ALTER TABLE [dbo].[ProductionSetupDetails] CHECK CONSTRAINT [FK_ProductionSetupDetails_ProductionSetups]
GO

ALTER TABLE [dbo].[ProductionSetupDetails]  WITH CHECK ADD  CONSTRAINT [FK_ProductionSetupDetails_Products] FOREIGN KEY([RAWProductID])
REFERENCES [dbo].[Products] ([ProductID])
GO

ALTER TABLE [dbo].[ProductionSetupDetails] CHECK CONSTRAINT [FK_ProductionSetupDetails_Products]
GO



------------------------------------
-------Date: 23-09-2023-------------
---------------Nahid----------------

ALTER TABLE [dbo].[Products] DROP CONSTRAINT [DF_Products_DiaSizeID]
GO
---------------------------------------------------------------------------------------

Alter Table Products
Drop Column DiaSizeID

----------------------------------------------------------------------------------------

ALTER FUNCTION [dbo].[CheckProductStatusByPOId]
(
  @PurchaseOrderId int
)  
  RETURNS int
AS 
 BEGIN
	DECLARE	@Sold int
    
    SELECT @Sold = COUNT(*)
	FROM StockDetails
	JOIN POrderDetails POD ON POD.POrderDetailID = StockDetails.POrderDetailID 
	join POrders PO on POD.POrderID = PO.POrderID
	join Products p on POD.ProductID = p.ProductID
	WHERE p.ProductType <> 2 and POD.POrderID = @PurchaseOrderId AND StockDetails.Status = 2


	
	
	IF @Sold IS NULL OR @Sold = 0
		begin
			SET @Sold=0

			set @Sold =  (select ISNULL(COUNT(*), 0) FROM StockDetails sd
			JOIN POrderDetails POD ON POD.POrderDetailID = sd.POrderDetailID 
			join POrders PO on POD.POrderID = PO.POrderID
			JOIN SOrderDetails sod on sod.SDetailID = sd.SDetailID
			join Products p on POD.ProductID = p.ProductID
			WHERE p.ProductType = 2 and POD.POrderID = @PurchaseOrderId)


		end
	  
	  
	RETURN  @Sold
  END

  --select dbo.CheckProductStatusByPOId(76903)
------------------------------------
-------Date: 20-09-2023-------------
---------------Nahid----------------
ALTER TABLE dbo.Products ADD
	ProductStockType int NOT NULL CONSTRAINT DF_Products_ProductStockType DEFAULT ((2)),
	DP decimal(18, 2) NOT NULL CONSTRAINT DF_Products_DP DEFAULT ((0))
GO

------------------------------------
-------Date: 29-04-2023-------------
---------------Mostafizur----------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ServiceChargeDetails](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Month] [int] NOT NULL,
	[ExpectedServiceCharge] [decimal](18, 2) NOT NULL,
	[PaidServiceCharge] [decimal](18, 2) NOT NULL,
	[IsPaid] [bit] NOT NULL,
	[TransactionId] [nvarchar](250) NULL,
	[TransactionDate] [datetime] NULL,
	[PaymentMobNo] [nvarchar](50) NULL,
	[InvoiceNo] [nvarchar](50) NULL,
	[PaymentId] [nvarchar](150) NULL,
	[PaymentReference] [nvarchar](150) NULL,
	[TransactionStatus] [nvarchar](100) NULL,
	[Currency] [nvarchar](10) NULL,
	[Intent] [nvarchar](20) NULL,
	[StatusCode] [nvarchar](30) NULL,
	[StatusMessage] [nvarchar](500) NULL,
	[ErrorCocde] [nvarchar](30) NULL,
	[ErrorMessage] [nvarchar](500) NULL,
	[ServiceChargeId] [int] NOT NULL,
 CONSTRAINT [PK_ServiceChargeDetails] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ServiceChargeDetails]  WITH CHECK ADD  CONSTRAINT [FK_ServiceChargeDetails_ServiceCharges] FOREIGN KEY([ServiceChargeId])
REFERENCES [dbo].[ServiceCharges] ([Id])
GO

ALTER TABLE [dbo].[ServiceChargeDetails] CHECK CONSTRAINT [FK_ServiceChargeDetails_ServiceCharges]
GO


------------------------------------
-------Date: 29-04-2023-------------
---------------Mostafizur----------------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ServiceCharges](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ConcernId] [int] NOT NULL,
	[TotalServiceCollection] [decimal](18, 2) NOT NULL,
	[ServiceYear] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_ServiceCharges] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ServiceCharges]  WITH CHECK ADD  CONSTRAINT [FK_ServiceCharges_SisterConcerns] FOREIGN KEY([ConcernId])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[ServiceCharges] CHECK CONSTRAINT [FK_ServiceCharges_SisterConcerns]
GO




------------------------------------
-------Date: 29-04-2023-------------
---------------Mostafizur----------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SisterConcerns ADD
	ServiceCharge decimal(18, 2) NOT NULL CONSTRAINT DF_SisterConcerns_ServiceCharge DEFAULT ((0)),
	SmsContactNo nvarchar(20) NULL
GO
ALTER TABLE dbo.SisterConcerns SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


---------------------------
------Date: 21-03-2023----- 
----------Nahid------------

CREATE TABLE [dbo].[DiaSizes](
	[DiaSizeID] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](150) NOT NULL,
	[Description] [nvarchar](max) NOT NULL,
	[ConcernID] [int] NOT NULL,
 CONSTRAINT [PK_DiaSizes] PRIMARY KEY CLUSTERED 
(
	[DiaSizeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[DiaSizes]  WITH CHECK ADD  CONSTRAINT [FK_DiaSizes_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[DiaSizes] CHECK CONSTRAINT [FK_DiaSizes_SisterConcerns]
GO

----------------------------------------------------------------------------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Products ADD
	DiaSizeID int NOT NULL CONSTRAINT DF_Products_DiaSizeID DEFAULT ((0))
GO
ALTER TABLE dbo.Products SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
---------------------------
------Date: 19-03-2023----- 
----------Nahid------------

ALTER PROCEDURE [dbo].[ApproveAdvanceSalesOrder] 
(
@SalesOrderId INT
)
AS

BEGIN TRY
	BEGIN TRANSACTION

	DECLARE @EmployeeID INT = (SELECT EmployeeID FROM SOrders WHERE SOrderID = @SalesOrderId)


	UPDATE SOrders SET IsApproved = 1, Status = 1 WHERE SOrderID = @SalesOrderId

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM SOrders s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE s.SOrderID = @SalesOrderId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM SOrderDetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			--AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid
			WHERE s.SOrderID = @SalesOrderId

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM SOrderDetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.SDetailID
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE s.SOrderID = @SalesOrderId AND (products.producttype = 1
		OR products.producttype = 3)

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, sd.colorid, s.quantity, s.TotalSFT, sorderdetailid,UnitPrice,s.SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM SOrderDetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	INNER JOIN StockDetails sd ON s.SDetailID = sd.SDetailID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM SOrderDetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.SDetailID AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------------------------------------------------------------------------------------------------


ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, DepotID, Terms, IsApproved, IsAdvanceSale)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, DepotId, Terms, 1, 0 FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL
	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity - s.BonusQuantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - (@Quantity + @BonusQuantity)
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT, BonusQuantity) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS), SOD.BonusQuantity FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0				
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT, BonusQuantity) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS), SOD.BonusQuantity
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT, BonusQuantity)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS), SOD.BonusQuantity
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------------------------------------------------------------------------------------------------------------


ALTER PROCEDURE [dbo].[AddAdvanceSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, DepotID, Terms, IsApproved, IsAdvanceSale)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, DepotId, Terms, 0, 1 FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)
	DECLARE @BonusQuantity INT

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS, BonusQuantity
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)


				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT, BonusQuantity) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS), SOD.BonusQuantity FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT


				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT, BonusQuantity) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS), SOD.BonusQuantity
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT,BonusQuantity)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS),SOD.BonusQuantity
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS, @BonusQuantity
	END


	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------
------Date: 18-03-2023----- 
----------Nahid------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrderDetails ADD
	BonusQuantity decimal(18, 2) NOT NULL CONSTRAINT DF_SOrderDetails_BonusQuantity DEFAULT ((0))
GO
ALTER TABLE dbo.SOrderDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


---------------------------------------------------------------------------------


EXEC sys.sp_rename 'dbo.InsertSODetailTable', 'zInsertSODetailTable';
GO

CREATE TYPE [dbo].[InsertSODetailTable] AS TABLE(
	[SOrderDetailID] [int] NULL,
	[ProductId] [int] NULL,
	[StockDetailId] [int] NULL,
	[ColorId] [int] NULL,
	[Status] [int] NULL,
	[Quantity] [decimal](18, 2) NULL,
	[UnitPrice] [decimal](18, 4) NULL,
	[TAmount] [decimal](18, 4) NULL,
	[PPDisPer] [decimal](18, 2) NULL,
	[PPDisAmt] [decimal](18, 2) NULL,
	[MrpRate] [decimal](18, 4) NULL,
	[PPOffer] [decimal](18, 2) NULL,
	[Compressor] [int] NULL,
	[Motor] [int] NULL,
	[Panel] [int] NULL,
	[Spareparts] [int] NULL,
	[Service] [int] NULL,
	[SFTRate] [decimal](18, 4) NULL,
	[TotalSFT] [decimal](18, 4) NULL,
	[FractionQty] [decimal](18, 4) NULL,
	[FractionAmt] [decimal](18, 4) NULL,
	[ActualSFT] [decimal](18, 4) NULL,
	[BonusQuantity] [decimal](18, 2) NULL
)
GO

DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertSODetailTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO
DROP TYPE dbo.zInsertSODetailTable;
GO





---------------------------
------Date: 14-03-2023----- 
----------Nahid------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[CCBanks](
	[CCBankID] [int] IDENTITY(1,1) NOT NULL,
	[CCBankCode] [varchar](250) NOT NULL,
	[CCBankName] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_CCBanks] PRIMARY KEY CLUSTERED 
(
	[CCBankID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

-----------------------------------------------------------------------------------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	CCBankID int NOT NULL CONSTRAINT DF_CashCollections_CCBankID DEFAULT ((0))
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

---------------------------
------Date: 12-03-2023----- 
----------Nahid------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	ApprovalSystemEnable int NOT NULL CONSTRAINT DF_SystemInformations_ApprovalSystemEnable DEFAULT ((0))
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

------------------------------------------------------------------------------------------------------------------


ALTER PROC [dbo].[UpdateTotalDue]
(
	@CusId int,
	@SupId int,
	@BankDepositId int,
	@BankWithdrawId int,
	@CollectionAmount decimal(18,2)
)
  
AS 

IF(@CusId>0)
BEGIN
	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - @CollectionAmount)
	where CustomerID=@CusId

	UPDATE EmployeeWiseCustomerDues SET EmployeeWiseCustomerDues.CustomerDue = (EmployeeWiseCustomerDues.CustomerDue  - @CollectionAmount)
	where CustomerID=@CusId
END
 IF(@SupId>0)
BEGIN
	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue - @CollectionAmount)
	where SupplierID=@SupId
END


 IF(@BankDepositId>0)
BEGIN
	UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount + @CollectionAmount)
	where BankID=@BankDepositId
END
  
 IF(@BankWithdrawId>0)
BEGIN
	UPDATE Banks Set Banks.TotalAmount = (Banks.TotalAmount - @CollectionAmount)
	where BankID=@BankWithdrawId
END

RETURN


---------------------------
------Date: 06-03-2023----- 
----------Rakib------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[ReturnAdvanceSalesOrder]
(
	@SalesOrderId int,
	@UserId int
)
  
AS 
BEGIN TRY
 BEGIN TRANSACTION

 --ExistingBC = 1,
 --NoBarcode = 2,
 --AutoBC = 3  
 
Update SOrders Set Status = 2,ModifiedBy=@UserId,ModifiedDate=GETDATE() Where SOrderID = @SalesOrderId

COMMIT
RETURN 1

END TRY

BEGIN CATCH
 IF(@@TRANCOUNT>0)
   ROLLBACK
   RETURN 0
END CATCH


---------------------------
------Date: 06-03-2023----- 
----------Rakib------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[UpdateAdvanceSalesOrder]
(
	@UserId int,
	@SalesOrderId int,
	@SalesOrder [InsertSalesOrderTable] readonly,
	@SODetails [InsertSODetailTable] readonly,
	@EmployeeID int
)
  
AS 
 
 BEGIN TRY  
 BEGIN TRANSACTION 
 --status New=3,Updated=4,Deleted=5


Update SOrders SET
InvoiceDate = s.InvoiceDate, InvoiceNo = s.InvoiceNo, CustomerID = s.CustomerID, VATPercentage = s.VATPercentage,
VATAmount = s.VATAmount, GrandTotal = s.GrandTotal, TDPercentage = s.TDiscountPercentage, TDAmount = s.TDiscountAmount,NetDiscount=s.NetDiscount,
TotalAmount = s.TotalAmount, PaymentDue = s.PaymentDue, RecAmount = s.RecAmt, AdjAmount = s.AdjAmount, TotalDue = s.TotalDue, Status = s.Status,
ConcernID = s.ConcernID, ModifiedBy = s.CreatedBy, ModifiedDate = s.CreateDate, Remarks = s.Remarks, TotalFractionAmt=s.TotalFractionAmt,
EmployeeID = @EmployeeID, DepotId = s.DepotId, Terms = s.Terms
FROM @SalesOrder s
Where SOrderID = @SalesOrderId

Update SOrderDetails
SET SOrderDetails.ProductID = SD.ProductId, SOrderDetails.Quantity = SD.Quantity, SOrderDetails.UnitPrice = SD.UnitPrice, 
SOrderDetails.UTAmount = SD.TAmount, SOrderDetails.PPDPercentage = SD.PPDisPer, SOrderDetails.PPDAmount = SD.PPDisAmt,
SOrderDetails.MPRate = SD.MrpRate, SOrderDetails.SOrderID = @SalesOrderId, SOrderDetails.SDetailID = SD.StockDetailId,
SOrderDetails.Compressor=p.CompressorWarrentyMonth,SOrderDetails.Motor=p.MotorWarrentyMonth,SOrderDetails.Panel=p.PanelWarrentyMonth,
SOrderDetails.Spareparts=p.SparePartsWarrentyMonth,SOrderDetails.Service = p.ServiceWarrentyMonth,
SOrderDetails.SFTRate=SD.SFTRate,SORderDetails.TotalSFT=SD.TotalSFT,
SOrderDetails.FractionQty=SD.FractionQty,SORderDetails.FractionAmt=SD.FractionAmt
FROM @SODetails SD
join Products p on SD.ProductId = p.ProductID
WHERE SD.Status = 4

INSERT INTO SOrderDetails
(
ProductID, Quantity, UnitPrice, UTAmount, PPDPercentage, PPDAmount, MPRate, SOrderID, SDetailID,Compressor,Motor,Panel,Spareparts,Service,
SFTRate,TotalSFT,FractionAmt,FractionQty
)
(
Select sd.ProductId, Quantity, UnitPrice, TAmount,  PPDisPer,
PPDisAmt, MrpRate, @SalesOrderId SOrderID, StockDetailId,p.CompressorWarrentyMonth,p.PanelWarrentyMonth,p.MotorWarrentyMonth,p.SparePartsWarrentyMonth,p.ServiceWarrentyMonth,
sd.SFTRate ,TotalSFT,FractionAmt,FractionQty
from @SODetails sd
join Products p on sd.ProductID = p.ProductID
WHERE Status = 3
)

DELETE FROM SOrderDetails WHERE SOrderDetailID IN (SELECT SOrderDetailID FROM @SODetails WHERE Status = 5)


COMMIT

RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH

---------------------------
------Date: 06-03-2023----- 
----------Rakib------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ApproveAdvanceSalesOrder] 
(
@SalesOrderId INT
)
AS

BEGIN TRY
	BEGIN TRANSACTION

	DECLARE @EmployeeID INT = (SELECT EmployeeID FROM SOrders WHERE SOrderID = @SalesOrderId)


	UPDATE SOrders SET IsApproved = 1, Status = 1 WHERE SOrderID = @SalesOrderId

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM SOrders s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE s.SOrderID = @SalesOrderId

	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity)
	FROM SOrderDetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			--AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid
			WHERE s.SOrderID = @SalesOrderId

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM SOrderDetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.SDetailID
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE s.SOrderID = @SalesOrderId AND (products.producttype = 1
		OR products.producttype = 3)

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, sd.colorid, s.quantity, s.TotalSFT, sorderdetailid,UnitPrice,s.SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS
	FROM SOrderDetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	INNER JOIN StockDetails sd ON s.SDetailID = sd.SDetailID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM SOrderDetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.SDetailID AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------
------Date: 06-03-2023----- 
----------Rakib------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[AddAdvanceSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, DepotID, Terms, IsApproved, IsAdvanceSale)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, DepotId, Terms, 0, 1 FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)


				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT


				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS
	END


	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------
------Date: 06-03-2023----- 
----------Rakib------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE,
@EmployeeID int
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt, EmployeeID, PrevDue, DepotID, Terms, IsApproved, IsAdvanceSale)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, Remarks, TotalFractionAmt,@EmployeeID,PrevDue, DepotId, Terms, 1, 0 FROM @SalesOrder)

	  SET @SalesOrderId = Scope_identity()

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL
	--Custmer due part
	declare @CustomerId int
	declare @ConcernId int
	declare @CreateDate datetime
	declare @CreatedBy int

	set @CustomerId = ISNULL((Select CustomerID from SOrders where SOrderID=@SalesOrderId),0)
	set @ConcernId = ISNULL((Select ConcernID from SOrders where SOrderID=@SalesOrderId),0)
	set @CreateDate = ISNULL((Select CreateDate from SOrders where SOrderID=@SalesOrderId),0)
	set @CreatedBy = ISNULL((Select CreatedBy from SOrders where SOrderID=@SalesOrderId),0)
	if(@EmployeeID!=0 and (Select Count(*) from EmployeeWiseCustomerDues where EmployeeID=@EmployeeID and CustomerID=@CustomerId)=0)
	begin
	  Insert EmployeeWiseCustomerDues(EmployeeID,CustomerID,CustomerDue, ConcernID, CreateDate, CreatedBy) 
		values(@EmployeeID,@CustomerId,0, @ConcernId, @CreateDate, @CreatedBy)
	ENd

	UPDATE EmployeeWiseCustomerDues set CustomerDue=ewc.CustomerDue+s.PaymentDue
	From SOrders s 
	JOIN EmployeeWiseCustomerDues ewc on s.CustomerID = ewc.CustomerID and s.EmployeeID=ewc.EmployeeID
	where s.SOrderID=@SalesOrderId and @EmployeeID!=0
	--End customer due

	

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------
------Date: 06-03-2023----- 
----------Rakib------------

ALTER TABLE SOrders
    ADD IsAdvanceSale BIT NOT NULL DEFAULT (0),
		IsApproved BIT NOT NULL DEFAULT (1)	
    
GO

---------------------------
------Date: 05-03-2023----- 
----------Nahid------------

CREATE TABLE [dbo].[EmployeeWiseCustomerDues](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeID] [int] NOT NULL,
	[CustomerID] [int] NOT NULL,
	[CustomerDue] [decimal](18, 2) NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[CustomerOpeningDue] [decimal](18, 2) NOT NULL,
 CONSTRAINT [PK_EmployeeWiseCustomerDues] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [unq_EmployeeWiseCustomerDues_EmployeeID_CustomerID] UNIQUE NONCLUSTERED 
(
	[EmployeeID] ASC,
	[CustomerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues] ADD  CONSTRAINT [DF_EmployeeWiseCustomerDues_CustomerDue]  DEFAULT ((0)) FOR [CustomerDue]
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues] ADD  CONSTRAINT [DF_EmployeeWiseCustomerDues_CreatedBy]  DEFAULT ((0)) FOR [CreatedBy]
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues] ADD  CONSTRAINT [DF_EmployeeWiseCustomerDues_CustomerOpeningDue]  DEFAULT ((0)) FOR [CustomerOpeningDue]
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues]  WITH CHECK ADD  CONSTRAINT [FK_EmployeeWiseCustomerDues_Customers] FOREIGN KEY([CustomerID])
REFERENCES [dbo].[Customers] ([CustomerID])
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues] CHECK CONSTRAINT [FK_EmployeeWiseCustomerDues_Customers]
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues]  WITH CHECK ADD  CONSTRAINT [FK_EmployeeWiseCustomerDues_Employees] FOREIGN KEY([EmployeeID])
REFERENCES [dbo].[Employees] ([EmployeeID])
GO

ALTER TABLE [dbo].[EmployeeWiseCustomerDues] CHECK CONSTRAINT [FK_EmployeeWiseCustomerDues_Employees]
GO


--------------------------------------------------------------------------------------------------------



ALTER PROC [dbo].[UpdateTotalDueWhenEdit]
(
	@CusId int,
	@SupId int,
	@CashCollectionID int,
	@BankTransactionID int,
	@NewCollectionAmount DECIMAL(18,2)
)
  
AS 
Declare @Amount decimal
Declare @PreviousCustomerID int
Declare @TransactionType int
Declare @FromBankID int
Declare @ToBankID int
BEGIN TRY
BEGIN TRANSACTION

IF(@CusId>0)
BEGIN
    Select @Amount=(Amount+AdjustAmt + OfferAmt + BonusAmt) from CashCollections where CashCollectionID=@CashCollectionID
	Select @PreviousCustomerID=CustomerID from CashCollections where CashCollectionID=@CashCollectionID

	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue + @Amount)
	where CustomerID=@PreviousCustomerID

	UPDATE EmployeeWiseCustomerDues SET EmployeeWiseCustomerDues.CustomerDue = (EmployeeWiseCustomerDues.CustomerDue  + @Amount)
	where CustomerID=@PreviousCustomerID

	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - @NewCollectionAmount)
	where CustomerID=@CusId

	UPDATE EmployeeWiseCustomerDues Set EmployeeWiseCustomerDues.CustomerDue = (EmployeeWiseCustomerDues.CustomerDue - @NewCollectionAmount)
	where CustomerID=@CusId
END
ELSE IF(@SupId>0)
BEGIN
    Select @Amount=(Amount+AdjustAmt) from CashCollections where CashCollectionID=@CashCollectionID
    Select @PreviousCustomerID=SupplierID from CashCollections where CashCollectionID=@CashCollectionID

	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue + @Amount)
	where SupplierID=@PreviousCustomerID

	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue - @NewCollectionAmount)
	where SupplierID=@SupId
END
ELSE IF(@BankTransactionID>0)
BEGIN

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5

Select @TransactionType=Transactiontype,@Amount=Amount,@FromBankID=BankID,@ToBankID=AnotherBankID,@PreviousCustomerID=CustomerID From BankTransactions where BankTranID=@BankTransactionID

if(@TransactionType=1)
 update Banks set TotalAmount=TotalAmount-@Amount where BankID=@FromBankID
 else if(@TransactionType=2 OR @TransactionType=4)
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 else if(@TransactionType=3)
  BEGIN
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 update Customers set TotalDue=TotalDue-@Amount where CustomerID=@PreviousCustomerID
 END
 else if(@TransactionType=5)
 BEGIN
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 update Banks set TotalAmount=TotalAmount-@Amount where BankID=@ToBankID
 END

END

COMMIT

RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH




---------------------------
------Date: 01-03-2023----- 
----------Nahid------------
ALTER TABLE Expenditures ALTER COLUMN EmployeeID int NULL


---------------------------
------Date: 20-02-2023----- 
----------Nahid------------
--------------------------------------------------------------------------------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	OfferAmt decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_OfferAmt DEFAULT ((0)),
	BonusAmt decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_BonusAmt DEFAULT ((0))
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

----------------------------------------------------------------------------

ALTER PROC [dbo].[UpdateTotalDueWhenEdit]
(
	@CusId int,
	@SupId int,
	@CashCollectionID int,
	@BankTransactionID int,
	@NewCollectionAmount DECIMAL(18,2)
)
  
AS 
Declare @Amount decimal
Declare @PreviousCustomerID int
Declare @TransactionType int
Declare @FromBankID int
Declare @ToBankID int
BEGIN TRY
BEGIN TRANSACTION

IF(@CusId>0)
BEGIN
    Select @Amount=(Amount+AdjustAmt + OfferAmt + BonusAmt) from CashCollections where CashCollectionID=@CashCollectionID
	Select @PreviousCustomerID=CustomerID from CashCollections where CashCollectionID=@CashCollectionID

	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue + @Amount)
	where CustomerID=@PreviousCustomerID

	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - @NewCollectionAmount)
	where CustomerID=@CusId
END
ELSE IF(@SupId>0)
BEGIN
    Select @Amount=(Amount+AdjustAmt) from CashCollections where CashCollectionID=@CashCollectionID
    Select @PreviousCustomerID=SupplierID from CashCollections where CashCollectionID=@CashCollectionID

	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue + @Amount)
	where SupplierID=@PreviousCustomerID

	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue - @NewCollectionAmount)
	where SupplierID=@SupId
END
ELSE IF(@BankTransactionID>0)
BEGIN

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5

Select @TransactionType=Transactiontype,@Amount=Amount,@FromBankID=BankID,@ToBankID=AnotherBankID,@PreviousCustomerID=CustomerID From BankTransactions where BankTranID=@BankTransactionID

if(@TransactionType=1)
 update Banks set TotalAmount=TotalAmount-@Amount where BankID=@FromBankID
 else if(@TransactionType=2 OR @TransactionType=4)
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 else if(@TransactionType=3)
  BEGIN
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 update Customers set TotalDue=TotalDue-@Amount where CustomerID=@PreviousCustomerID
 END
 else if(@TransactionType=5)
 BEGIN
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 update Banks set TotalAmount=TotalAmount-@Amount where BankID=@ToBankID
 END

END

COMMIT

RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH

----------------------------------------------------------------------------------------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrders ADD
	DepotID int NOT NULL CONSTRAINT DF_SOrders_DepotID DEFAULT ((0)),
	Terms int NOT NULL CONSTRAINT DF_SOrders_Terms DEFAULT ((0))
GO
ALTER TABLE dbo.SOrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


-----------------------------------------------------------------------------------
EXEC sys.sp_rename 'dbo.InsertSalesOrderTable', 'zInsertSalesOrderTable';
GO
CREATE TYPE [dbo].[InsertSalesOrderTable] AS TABLE(
	[InvoiceDate] [datetime] NULL,
	[InvoiceNo] [varchar](150) NULL,
	[VatPercentage] [decimal](18, 4) NULL,
	[VatAmount] [decimal](18, 4) NULL,
	[GrandTotal] [decimal](18, 4) NULL,
	[TDiscountPercentage] [decimal](18, 4) NULL,
	[TDiscountAmount] [decimal](18, 4) NULL,
	[RecAmt] [decimal](18, 4) NULL,
	[PaymentDue] [decimal](18, 4) NULL,
	[TotalAmount] [decimal](18, 4) NULL,
	[TotalDue] [decimal](18, 4) NULL,
	[AdjAmount] [decimal](18, 4) NULL,
	[Status] [int] NULL,
	[CustomerId] [int] NULL,
	[ConcernId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreateDate] [datetime] NULL,
	[TotalOffer] [decimal](18, 4) NULL,
	[NetDiscount] [decimal](18, 4) NULL,
	[Remarks] [varchar](150) NULL,
	[TotalFractionAmt] [decimal](18, 4) NULL,
	[EmployeeID] [int] NULL,
	[PrevDue] [decimal](18, 4) NULL,
	[DepotId] [int] NULL,
	[Terms] [int] NULL
)
GO

DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertSalesOrderTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO
DROP TYPE dbo.zInsertSalesOrderTable;
GO
---------------------------------------------------------------------------------------------

ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, TotalFractionAmt, EmployeeID, PrevDue, DepotID, Terms)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, TotalFractionAmt,EmployeeID,PrevDue, DepotId, Terms FROM @SalesOrder)

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL

	SET @SalesOrderId = Scope_identity()

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, SOD.TAmount, SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH

---------------------------
------Date: 19-02-2023----- 
----------Nahid------------

CREATE TABLE [dbo].[Territories](
	[TerritoryID] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](250) NOT NULL,
	[TerritoryName] [nvarchar](250) NOT NULL,
	[ConcernID] [int] NOT NULL,
 CONSTRAINT [PK_Territories] PRIMARY KEY CLUSTERED 
(
	[TerritoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Territories]  WITH CHECK ADD  CONSTRAINT [FK_Territories_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[Territories] CHECK CONSTRAINT [FK_Territories_SisterConcerns]
GO



-------------------------------------------------------------------------------------------------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Customers ADD
	TerritoryID int NOT NULL CONSTRAINT DF_Customers_TerritoryID DEFAULT ((0))
GO
ALTER TABLE dbo.Customers SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

---------------------------------------------------------------------------------------------------------


CREATE TABLE [dbo].[Depots](
	[DepotID] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](250) NOT NULL,
	[DepotName] [nvarchar](250) NOT NULL,
	[ConcernID] [int] NOT NULL,
 CONSTRAINT [PK_Depos] PRIMARY KEY CLUSTERED 
(
	[DepotID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Depots]  WITH CHECK ADD  CONSTRAINT [FK_Depots_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[Depots] CHECK CONSTRAINT [FK_Depots_SisterConcerns]
GO

---------------------------
------Date: 18-02-2023----- 
----------Nahid------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Expenditures ADD
	EmployeeID int NOT NULL CONSTRAINT DF_Expenditures_EmployeeID DEFAULT ((0))
GO
ALTER TABLE dbo.Expenditures SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


-------------------------------------------------------------------------------------------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	EmployeeWiseTransactionEnable int NOT NULL CONSTRAINT DF_SystemInformations_EmployeeWiseTransactionEnable DEFAULT ((0))
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

---------------------------
------Date: 13-02-2023----- 
----------Nahid------------

ALTER TABLE [dbo].[EmployeeTargetSetups] DROP CONSTRAINT [DF_EmployeeTargetSetups_Commission]
GO

ALTER TABLE [dbo].[EmployeeTargetSetups] DROP CONSTRAINT [DF_EmployeeTargetSetups_AmtTo]
GO

ALTER TABLE [dbo].[EmployeeTargetSetups] DROP CONSTRAINT [DF_EmployeeTargetSetups_AmtFrom]
GO

/****** Object:  Table [dbo].[EmployeeTargetSetups]    Script Date: 13-Feb-23 09:16:49 AM ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EmployeeTargetSetups]') AND type in (N'U'))
DROP TABLE [dbo].[EmployeeTargetSetups]
GO

/****** Object:  Table [dbo].[EmployeeTargetSetups]    Script Date: 13-Feb-23 09:16:49 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[EmployeeTargetSetups](
	[ETSID] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeID] [int] NOT NULL,
	[TargetAmt] [decimal](18, 2) NOT NULL,
	[TargetMonth] [datetime] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_EmployeeTargetSetups] PRIMARY KEY CLUSTERED 
(
	[ETSID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[EmployeeTargetSetups] ADD  CONSTRAINT [DF_EmployeeTargetSetups_TargetAmt]  DEFAULT ((0)) FOR [TargetAmt]
GO




---------------------------
------Date: 11-02-2023----- 
----------Nahid------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.AdvanceSalaries ADD
	SalaryType int NOT NULL CONSTRAINT DF_AdvanceSalaries_SalaryType DEFAULT ((0)),
	IsAdvanceLoanPay int NOT NULL CONSTRAINT DF_AdvanceSalaries_IsAdvanceLoanPay DEFAULT ((0))
GO
ALTER TABLE dbo.AdvanceSalaries SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


--------------------------------------------------------------------------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Employees ADD
	AdvanceLoanAmt decimal(18, 2) NOT NULL CONSTRAINT DF_Employees_AdvanceLoanAmt DEFAULT ((0))
GO
ALTER TABLE dbo.Employees SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

-------------------------------------------------------------------------------------------------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[EmployeeCommissions](
	[ECID] [int] IDENTITY(1,1) NOT NULL,
	[CommissionMonth] [date] NOT NULL,
	[EmployeeID] [int] NOT NULL,
	[CommissionAmt] [decimal](18, 2) NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_EmployeeCommissions] PRIMARY KEY CLUSTERED 
(
	[ECID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[EmployeeCommissions]  WITH CHECK ADD  CONSTRAINT [FK_EmployeeCommissions_Employees] FOREIGN KEY([EmployeeID])
REFERENCES [dbo].[Employees] ([EmployeeID])
GO

ALTER TABLE [dbo].[EmployeeCommissions] CHECK CONSTRAINT [FK_EmployeeCommissions_Employees]
GO

ALTER TABLE [dbo].[EmployeeCommissions]  WITH CHECK ADD  CONSTRAINT [FK_EmployeeCommissions_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[EmployeeCommissions] CHECK CONSTRAINT [FK_EmployeeCommissions_SisterConcerns]
GO




---------------------------
------Date: 07-02-2023----- 
----------Nahid------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SOrders ADD
	EmployeeID int NOT NULL CONSTRAINT DF_SOrders_EmployeeID DEFAULT ((0)),
	PrevDue decimal(18, 4) NOT NULL CONSTRAINT DF_SOrders_PrevDue DEFAULT ((0))
GO
ALTER TABLE dbo.SOrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

---------------------------------------------------------------------------------------
EXEC sys.sp_rename 'dbo.InsertSalesOrderTable', 'zInsertSalesOrderTable';
GO
CREATE TYPE [dbo].[InsertSalesOrderTable] AS TABLE(
	[InvoiceDate] [datetime] NULL,
	[InvoiceNo] [varchar](150) NULL,
	[VatPercentage] [decimal](18, 4) NULL,
	[VatAmount] [decimal](18, 4) NULL,
	[GrandTotal] [decimal](18, 4) NULL,
	[TDiscountPercentage] [decimal](18, 4) NULL,
	[TDiscountAmount] [decimal](18, 4) NULL,
	[RecAmt] [decimal](18, 4) NULL,
	[PaymentDue] [decimal](18, 4) NULL,
	[TotalAmount] [decimal](18, 4) NULL,
	[TotalDue] [decimal](18, 4) NULL,
	[AdjAmount] [decimal](18, 4) NULL,
	[Status] [int] NULL,
	[CustomerId] [int] NULL,
	[ConcernId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreateDate] [datetime] NULL,
	[TotalOffer] [decimal](18, 4) NULL,
	[NetDiscount] [decimal](18, 4) NULL,
	[Remarks] [varchar](150) NULL,
	[TotalFractionAmt] [decimal](18, 4) NULL,
	[EmployeeID] [int] NULL,
	[PrevDue] [decimal](18, 4) NULL
)
GO

DECLARE @Name NVARCHAR(776);

DECLARE REF_CURSOR CURSOR FOR
SELECT referencing_schema_name + '.' + referencing_entity_name
FROM sys.dm_sql_referencing_entities('dbo.InsertSalesOrderTable', 'TYPE');

OPEN REF_CURSOR;

FETCH NEXT FROM REF_CURSOR INTO @Name;
WHILE (@@FETCH_STATUS = 0)
BEGIN
    EXEC sys.sp_refreshsqlmodule @name = @Name;
    FETCH NEXT FROM REF_CURSOR INTO @Name;
END;

CLOSE REF_CURSOR;
DEALLOCATE REF_CURSOR;
GO
DROP TYPE dbo.zInsertSalesOrderTable;
GO


---------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, TotalFractionAmt, EmployeeID, PrevDue)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, TotalFractionAmt,EmployeeID,PrevDue FROM @SalesOrder)

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL

	SET @SalesOrderId = Scope_identity()

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,(@Quantity *SOD.unitprice), SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, (@StockQty*SOD.unitprice), SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, (@Quantity*SOD.unitprice), SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH


---------------------------
------Date: 01-02-2023----- 
----------Nahid------------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	EmployeeID int NOT NULL CONSTRAINT DF_CashCollections_EmployeeID DEFAULT ((0))
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


---------------------------
------Date: 31-01-2023----- 
----------Nahid------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[MonthlyAttendences](
	[MAID] [int] IDENTITY(1,1) NOT NULL,
	[Month] [date] NOT NULL,
	[EmployeeID] [int] NOT NULL,
	[Days] [int] NOT NULL,
	[OTDays] [int] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_MonthlyAttendences] PRIMARY KEY CLUSTERED 
(
	[MAID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MonthlyAttendences]  WITH CHECK ADD  CONSTRAINT [FK_MonthlyAttendences_Employees] FOREIGN KEY([EmployeeID])
REFERENCES [dbo].[Employees] ([EmployeeID])
GO

ALTER TABLE [dbo].[MonthlyAttendences] CHECK CONSTRAINT [FK_MonthlyAttendences_Employees]
GO

ALTER TABLE [dbo].[MonthlyAttendences]  WITH CHECK ADD  CONSTRAINT [FK_MonthlyAttendences_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[MonthlyAttendences] CHECK CONSTRAINT [FK_MonthlyAttendences_SisterConcerns]
GO

------------------------------------------------------------------------------------------------------------------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ManualAttendences](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Date] [datetime] NOT NULL,
	[EmployeeID] [int] NOT NULL,
	[OnDuty] [varchar](250) NULL,
	[OffDuty] [varchar](250) NULL,
	[ClockIn] [varchar](250) NULL,
	[ClockOut] [varchar](250) NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [datetime] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_ManualAttendences] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ManualAttendences]  WITH CHECK ADD  CONSTRAINT [FK_ManualAttendences_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[ManualAttendences] CHECK CONSTRAINT [FK_ManualAttendences_SisterConcerns]
GO


------------------------------------------------------------------------------------------------------------------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[EmployeeTargetSetups](
	[ETSID] [int] IDENTITY(1,1) NOT NULL,
	[EmployeeID] [int] NOT NULL,
	[AmtFrom] [decimal](18, 2) NOT NULL,
	[AmtTo] [decimal](18, 2) NOT NULL,
	[Commission] [decimal](18, 2) NOT NULL,
	[TargetMonth] [datetime] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_EmployeeTargetSetups] PRIMARY KEY CLUSTERED 
(
	[ETSID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[EmployeeTargetSetups] ADD  CONSTRAINT [DF_EmployeeTargetSetups_AmtFrom]  DEFAULT ((0)) FOR [AmtFrom]
GO

ALTER TABLE [dbo].[EmployeeTargetSetups] ADD  CONSTRAINT [DF_EmployeeTargetSetups_AmtTo]  DEFAULT ((0)) FOR [AmtTo]
GO

ALTER TABLE [dbo].[EmployeeTargetSetups] ADD  CONSTRAINT [DF_EmployeeTargetSetups_Commission]  DEFAULT ((0)) FOR [Commission]
GO




---------------------------
------Date: 16-01-2022----- 
----------Mostafizur-------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[ReturnSalesOrder]
(
	@SalesOrderId int,
	@UserId int
)
  
AS 
BEGIN TRY
 BEGIN TRANSACTION

 --ExistingBC = 1,
 --NoBarcode = 2,
 --AutoBC = 3  
 Create table #temp(Id int identity(1,1),ProductID int,ColorID int ,GodownID int,Qty decimal(18,2))
 Insert Into #temp(ProductID,ColorID,GodownID,Qty)
 select sod.ProductID,ColorID,GodownID,sum(sod.Quantity) from SOrderDetails sod
 join StockDetails sd on sod.SDetailID = sd.SDetailID
 where sod.SOrderID=@SalesOrderId
 group by sod.ProductID,sd.ColorID,sd.GodownID

UPDATE Stocks
SET Stocks.Quantity = (Stocks.Quantity + d.Qty), ModifiedBy = @UserId, ModifiedDate = GETDATE()
FROM #temp d
JOIN Stocks ON Stocks.ProductID = d.ProductID and Stocks.ColorID=d.ColorID and Stocks.GodownID=d.GodownID

----Update StockDetails---------------------------------------------

UPDATE StockDetails
SET StockDetails.Status = 1, Quantity=StockDetails.Quantity+d.Quantity
FROM SOrderDetails d
JOIN StockDetails ON StockDetails.SDetailID = d.SDetailID
JOIN Products ON Products.ProductID= StockDetails.ProductID
WHERE d.SOrderID = @SalesOrderId and Products.ProductType=2

UPDATE StockDetails
SET StockDetails.Status = 1
FROM SOrderDetails d
JOIN StockDetails ON StockDetails.SDetailID = d.SDetailID
JOIN Products ON Products.ProductID= StockDetails.ProductID
WHERE d.SOrderID = @SalesOrderId and Products.ProductType!=2
--------------------------------------------------------------------------------------------

UPDATE SRVProductDetails
SET SRVProductDetails.Status = 3
from SOrderDetails s
JOIN SRVProductDetails ON SRVProductDetails.SDetailID = s.SDetailID
where SRVProductDetails.Status=2


UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - s.PaymentDue)
FROM SOrders s
JOIN Customers ON Customers.CustomerID = s.CustomerID
WHERE s.SOrderID = @SalesOrderId

--DELETE FROM SOrderDetails WHERE SOrderID = @SalesOrderId
Update SOrders Set Status = 2,ModifiedBy=@UserId,ModifiedDate=GETDATE() Where SOrderID = @SalesOrderId

COMMIT
RETURN 1

END TRY

BEGIN CATCH
 IF(@@TRANCOUNT>0)
   ROLLBACK
   RETURN 0
END CATCH



---------------------------
------Date: 16-01-2022----- 
----------Mostafizur-------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[AddSalesOrder] 
(
@SalesOrder [INSERTSALESORDERTABLE] readonly,
@SODetails [INSERTSODETAILTABLE] readonly,
@RemindDate DATE
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO sorders (invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal, 
	tdpercentage, tdamount, netdiscount, totalamount, paymentdue, recamount, adjamount, totaldue,
	 STATUS, concernid, createdby, createdate, totaloffer, TotalFractionAmt)
	 (SELECT 
	  invoicedate, invoiceno, customerid, vatpercentage, vatamount, grandtotal,
	  tdiscountpercentage, tdiscountamount, netdiscount, totalamount, paymentdue, recamt, adjamount, totaldue, 
	  STATUS, concernid, createdby, createdate, totaloffer, TotalFractionAmt FROM @SalesOrder)

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue), reminddate = @RemindDate
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NOT NULL

	UPDATE customers
	SET customers.totaldue = (customers.totaldue + s.totaldue)
	FROM @SalesOrder s
	INNER JOIN customers
		ON customers.customerid = s.customerid
	WHERE @RemindDate IS NULL

	SET @SalesOrderId = Scope_identity()

	UPDATE stocks
	SET stocks.quantity = (stocks.quantity - s.quantity)
	FROM @SODetails s
	INNER JOIN stocks
		ON stocks.productid = s.productid
			AND stocks.colorid = s.colorid
			--AND Stocks.GodownID = s.colorid

	--For barCode Product 
	UPDATE stockdetails
	SET stockdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN stockdetails
		ON stockdetails.sdetailid = s.stockdetailid
	INNER JOIN products
		ON stockdetails.productid = products.productid
	WHERE products.producttype = 1
		OR products.producttype = 3

	--For No barCode Product 

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate INT
	DECLARE @PRate INT
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @StockQty DECIMAL(18, 4)
	DECLARE @UnitPrice INT
	DECLARE @MRPRate INT
	DECLARE @TotalSFT DECIMAL(18, 4)
	DECLARE @StockTotalSFT DECIMAL(18, 4)
	DECLARE @SFTRate DECIMAL(18, 4)
	DECLARE @SFTPerPCS DECIMAL(18, 4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT s.productid, colorid, quantity, TotalSFT, sorderdetailid,UnitPrice,SFTRate,(Case when p.BundleQty=0 then p.SalesCSft/pu.ConvertValue else p.SalesCSft/p.BundleQty end) as SFTPerPCS
	FROM @SODetails s
	INNER JOIN products p ON p.productid = s.productid
	INNER JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID
	WHERE p.producttype = 2

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SDetailID = (
					SELECT Min(sdetailid)
					FROM stockdetails
					WHERE productid = @ProductID AND colorid = @ColorID AND quantity != 0 AND STATUS = 1
					)
			SET @StockQty = (
					SELECT quantity
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)
			SET @StockTotalSFT = (
					SELECT TotalSFT
					FROM stockdetails
					WHERE sdetailid = @SDetailID
					)

			IF (@StockQty > @Quantity)
			BEGIN
				SET @StockQty = @StockQty - @Quantity
				SET @StockTotalSFT = @StockTotalSFT - (@Quantity*@SFTPerPCS)

				UPDATE stockdetails
				SET quantity = @StockQty, TotalSFT = @StockTotalSFT
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer, 
				srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) 
				(SELECT 
					SOD.productid, @Quantity, SOD.unitprice,(@Quantity *SOD.unitprice), SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, 
					(SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, 
					SOD.SFTRate, @TotalSFT,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS) FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
				)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
			ELSE IF (@StockQty < @Quantity)
			BEGIN
				SET @Quantity = @Quantity - @StockQty
				--SET @TotalSFT = (@StockQty*@SFTPerPCS) - @StockTotalSFT

				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, sorderid, sdetailid, ppoffer,
				 srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT) (
					SELECT SOD.productid, @StockQty, SOD.unitprice, (@StockQty*SOD.unitprice), SOD.ppdisper, SOD.ppdisamt, SOD.mrprate, @SalesOrderId SOrderID, @SDetailID, SOD.ppoffer,
					 (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth, p.motorwarrentymonth, p.sparepartswarrentymonth, 
					 p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@StockQty*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)
					SET @TotalSFT = 0
			END
			ELSE
			BEGIN
				UPDATE stockdetails
				SET quantity = 0, TotalSFT = 0, STATUS = 2
				WHERE sdetailid = @SDetailID

				INSERT INTO sorderdetails (productid, quantity, unitprice, utamount, ppdpercentage, ppdamount, mprate, 
				sorderid, sdetailid, ppoffer, srate, prate, compressor, motor, panel, spareparts, service, SFTRate, TotalSFT,FractionQty,FractionAmt,ActualSFT)
				 (SELECT
				    SOD.productid, @Quantity, SOD.unitprice, (@Quantity*SOD.unitprice), SOD.ppdisper, SOD.ppdisamt, SOD.mrprate,
					@SalesOrderId SOrderID, @SDetailID, SOD.ppoffer, (SOD.unitprice - SOD.ppdisamt), STD.prate, p.compressorwarrentymonth, p.panelwarrentymonth,
					p.motorwarrentymonth, p.sparepartswarrentymonth, p.servicewarrentymonth, SOD.SFTRate, @TotalSFT ,SOD.FractionQty,SOD.FractionAmt,(@Quantity*@SFTPerPCS)
					FROM @SODetails SOD INNER JOIN stockdetails STD
					ON STD.sdetailid = SOD.stockdetailid INNER JOIN products p
					ON STD.productid = p.productid WHERE SOD.productid = @ProductID AND SOD.colorid = @ColorID
					)

				SET @Quantity = 0
				SET @TotalSFT = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity, @TotalSFT,@SOrderDetailID,@UnitPrice,@SFTRate,@SFTPerPCS
	END

	--For barCode Product SRVisit Status update 
	UPDATE srvproductdetails
	SET srvproductdetails.STATUS = 2
	FROM @SODetails s
	INNER JOIN srvproductdetails
		ON srvproductdetails.sdetailid = s.stockdetailid AND srvproductdetails.STATUS = 1
	INNER JOIN products
		ON srvproductdetails.productid = products.productid
	WHERE products.producttype = 1 OR products.producttype = 3

	COMMIT

	RETURN 1;
END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	RETURN 0;
END CATCH


---------------------------
------Date: 02-01-2022----- 
----------Mostafizur-------

INSERT INTO SMSFormates(SMSFormateID, Code, SMSDescription, SMSType )
VALUES (1, '00001', 'Sales', 1),
(2, '00002', 'Purchase', 2),
(3, '00003', 'CashCollection', 3),
(4, '00004', 'InstallmentCollection', 4),
(5, '00005', 'Installment Alert', 5),
(6, '00006', 'Offer', 6),
(7, '00007', 'Registration', 7),
(8, '00008', 'Error', 8);

---------------------------
------Date: 02-01-2022----- 
----------Mostafizur-------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SMSStatus ADD
	Message_ID int NULL
GO
ALTER TABLE dbo.SMSStatus SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

---------------------------
------Date: 02-01-2022----- 
----------Mostafizur-------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[SMSBillPayments](
	[BillPayID] [int] IDENTITY(1,1) NOT NULL,
	[ReceiptNo] [varchar](150) NOT NULL,
	[PaidFromDate] [datetime] NOT NULL,
	[PaidToDate] [datetime] NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[Remarks] [nvarchar](max) NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_SMSBillPayments] PRIMARY KEY CLUSTERED 
(
	[BillPayID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

ALTER TABLE [dbo].[SMSBillPayments] ADD  CONSTRAINT [DF_SMSBillPayments_CreatedBy]  DEFAULT ((1)) FOR [CreatedBy]
GO

ALTER TABLE [dbo].[SMSBillPayments]  WITH CHECK ADD  CONSTRAINT [FK_SMSBillPayments_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[SMSBillPayments] CHECK CONSTRAINT [FK_SMSBillPayments_SisterConcerns]
GO




---------------------------
------Date: 02-01-2022----- 
----------Mostafizur-------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	IsRetailSMSEnable int NULL,
	IsHireSMSEnable int NULL,
	IsCashcollSMSEnable int NULL,
	IsInstallmentSMSEnable int NULL,
	IsRemindSMSEnable int NULL,
	SenderId varchar(100) NULL,
	CompanyURL nvarchar(MAX) NULL
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


--------------------------------
----Date :30-11-2022-----------
----------Mostafizur-----------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TransferHistories](
	[TransferHID] [int] IDENTITY(1,1) NOT NULL,
	[TransferDate] [datetime] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[FromGodown] [int] NOT NULL,
	[ToGodown] [int] NOT NULL,
	[ProductId] [int] NOT NULL,
	[Qty] [decimal](18, 0) NOT NULL,
	[FromSDetailID] [int] NULL,
	[ToSDetailID] [int] NULL,
	[POrderDetailID] [int] NULL,
	[ConcernID] [int] NULL,
 CONSTRAINT [PK_TransferHistories] PRIMARY KEY CLUSTERED 
(
	[TransferHID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[TransferHistories] ADD  CONSTRAINT [DF_TransferHistories_Qty]  DEFAULT ((0)) FOR [Qty]
GO

ALTER TABLE [dbo].[TransferHistories] ADD  CONSTRAINT [DF_TransferHistories_ConcernID]  DEFAULT ((1)) FOR [ConcernID]
GO

ALTER TABLE [dbo].[TransferHistories]  WITH CHECK ADD  CONSTRAINT [FK_TransferHistories_Products] FOREIGN KEY([ProductId])
REFERENCES [dbo].[Products] ([ProductID])
GO

ALTER TABLE [dbo].[TransferHistories] CHECK CONSTRAINT [FK_TransferHistories_Products]
GO



--------------------------------
----Date :30-11-2022-----------
----------Mostafizur-----------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[TransferDetails](
	[TDetailID] [int] IDENTITY(1,1) NOT NULL,
	[ProductID] [int] NOT NULL,
	[ToProductID] [int] NOT NULL,
	[ToColorID] [int] NOT NULL,
	[ToGodownID] [int] NOT NULL,
	[PRate] [decimal](18, 2) NOT NULL,
	[Quantity] [decimal](18, 2) NOT NULL,
	[UTAmount] [decimal](18, 2) NOT NULL,
	[TransferID] [int] NOT NULL,
	[SDetailID] [int] NOT NULL,
	[IMEI] [varchar](250) NOT NULL,
 CONSTRAINT [PK_TransferDetails] PRIMARY KEY CLUSTERED 
(
	[TDetailID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[TransferDetails] ADD  CONSTRAINT [DF_Table_1_SOrderID]  DEFAULT ((0)) FOR [TransferID]
GO

ALTER TABLE [dbo].[TransferDetails] ADD  CONSTRAINT [DF_TransferDetails_SDetailID]  DEFAULT ((0)) FOR [SDetailID]
GO

ALTER TABLE [dbo].[TransferDetails]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetails_Products] FOREIGN KEY([ProductID])
REFERENCES [dbo].[Products] ([ProductID])
GO

ALTER TABLE [dbo].[TransferDetails] CHECK CONSTRAINT [FK_TransferDetails_Products]
GO

ALTER TABLE [dbo].[TransferDetails]  WITH CHECK ADD  CONSTRAINT [FK_TransferDetails_Transfers] FOREIGN KEY([TransferID])
REFERENCES [dbo].[Transfers] ([TransferID])
GO

ALTER TABLE [dbo].[TransferDetails] CHECK CONSTRAINT [FK_TransferDetails_Transfers]
GO


--------------------------------
----Date :30-11-2022-----------
----------Mostafizur-----------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Transfers](
	[TransferID] [int] IDENTITY(1,1) NOT NULL,
	[TransferNo] [varchar](150) NOT NULL,
	[TransferDate] [datetime] NOT NULL,
	[TotalAmount] [decimal](18, 2) NOT NULL,
	[Remarks] [varchar](350) NULL,
	[ToConcernID] [int] NOT NULL,
	[FromConcernID] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_Transfers] PRIMARY KEY CLUSTERED 
(
	[TransferID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Transfers] ADD  CONSTRAINT [DF_Transfers_Status]  DEFAULT ((0)) FOR [Status]
GO

ALTER TABLE [dbo].[Transfers] ADD  CONSTRAINT [DF_Transfers_CreatedBy]  DEFAULT ((0)) FOR [CreatedBy]
GO

ALTER TABLE [dbo].[Transfers]  WITH CHECK ADD  CONSTRAINT [FK_Transfers_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[Transfers] CHECK CONSTRAINT [FK_Transfers_SisterConcerns]
GO



--------------------------------
----Date :30-11-2022-----------
----------Mostafizur-----------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SisterConcerns ADD
	ParentID int NOT NULL CONSTRAINT DF_SisterConcerns_ParentID DEFAULT ((0))
GO
ALTER TABLE dbo.SisterConcerns SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--------------------------------
----Date :30-11-2022-----------
----------Mostafizur-----------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SisterConcerns ADD
	SalesShowPercent decimal(18, 2) NOT NULL CONSTRAINT DF_SisterConcerns_SalesShowPercent DEFAULT ((0))
GO
ALTER TABLE dbo.SisterConcerns SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--------------------------------
----Date : 03-12-2022-----------
---------Mostafizur-----------

/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BankTransactions ADD
	WFStatus int NULL,
	SIHID int NULL,
	ExpenseItemID int NULL
GO
ALTER TABLE dbo.BankTransactions ADD CONSTRAINT
	DF_BankTransactions_WFStatus DEFAULT ((2)) FOR WFStatus
GO
ALTER TABLE dbo.BankTransactions SET (LOCK_ESCALATION = TABLE)
GO
COMMIT



--------------------------------
----Date : 03-12-2022-----------
---------Mostafizur-----------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ShareInvestmentHeads ADD
	Balance decimal(18, 2) NOT NULL CONSTRAINT DF_ShareInvestmentHeads_Balance DEFAULT ((0))
GO
ALTER TABLE dbo.ShareInvestmentHeads SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--------------------------------
----Date : 03-12-2022-----------
---------Mostafizur-----------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ShareInvestments ADD
	LiabilityType int NOT NULL CONSTRAINT DF_ShareInvestments_LiabilityType DEFAULT ((0)),
	CashInHandReportStatus int NOT NULL CONSTRAINT DF_ShareInvestments_CashInHandReportStatus DEFAULT ((0))
GO
ALTER TABLE dbo.ShareInvestments SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


--------------------------------
----Date : 20-12-2021-----------
--------------------------------

USE [EHIMSWEB]
GO
/****** Object:  StoredProcedure [dbo].[sp_DailyCashInHand]    Script Date: 1/6/2022 11:19:45 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec sp_DailyCashInHand '2020-03-28 00:00:00','2020-03-28 00:00:00','7'
ALTER PROCEDURE [dbo].[sp_DailyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

IF (@ConcernID = 1)
	SET @CashInHand = 1263.00
ELSE IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
	SET @CashInHand = - 2.00
ELSE IF (@ConcernID = 4)
	SET @CashInHand = 65000.00
SET @CashInHand = @CashInHand + isnull((
			SELECT sum(Amount)
			FROM ShareInvestments SI
			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
			), 0)

CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(DAY, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	--	DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	--	DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections cc
				join Suppliers s on cc.SupplierID = s.SupplierID
				where cc.ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
				and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data1
		select @StartDate,'Cash Delivery', 0, '', 0, 'Header'

		insert into #temp_Data1
		select @StartDate,s.Name, sum(cc.amount), '', 0, 'Cash'
		from CashCollections cc
		join Suppliers s on cc.SupplierID = s.SupplierID
		where cc.ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) 
		and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
		group by s.SupplierID,s.Name

		insert into #temp_Data1
		select @StartDate,'Total Cash Delivery', @total, '', 0, 'Header'
END

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
	END

		------------------------------------------------------Expense in Product return----------------------------------
	set @total = isnull((
				select sum(PaidAmount)
				from ROrders
				where ConcernID = @ConcernID and DAY(Convert(date, ReturnDate)) = DAY(@StartDate) and Month(Convert(date, ReturnDate)) = Month(@StartDate) and Year(Convert(date, ReturnDate)) = Year(@StartDate)
				), 0)

if (@total != 0)
BEGIN

	insert into #temp_Data1
	select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

END

	-------------------------------------------------------- Expense Cash Collection Return------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Cash Collection Return', @total, 'Cash Collection Return', 0, 'Cash'


	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE ParentId = 4 AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE ParentId IN (4) AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name
	----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)

	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				INNER JOIN ShareInvestmentHeads PH  ON SIH.ParentId = PH.SIHID
				WHERE (PH.Name='Liability' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name+'(Lia. Pay)', sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		INNER JOIN ShareInvestmentHeads PH  ON SIH.ParentId = PH.SIHID
		WHERE (PH.Name='Liability' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name


	----------------------------------------------Opening Cash In Hand in Income Table--------------------------------------------------------------- 
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount),
		('('+ B.AccountNo + ',' + B.BankName +')'+ (case when c.CustomerType=1 or c.CustomerType=3 then ' Previous Bank collections(Retail)' else 'Previous Bank collections(Dealer)' end))
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		inner join Customers c on bt.CustomerID=c.CustomerID
		where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName,c.CustomerType

	----------------------------------------Income from Fund IN------------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.AnotherBankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.AnotherBankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, Convert(varchar(10),c.CustomerType)+'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
	    insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections',@total, 'Header')
		
		END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	if (
			(
				isnull((
						select sum(Amount)
						from Expenditures EX
						inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
						where E.ConcernID = @ConcernID and E.status = 2 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate as TransDate, '', 0, E.Description, sum(Amount), E.Description
		from Expenditures EX
		inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
		where E.ConcernID = @ConcernID and E.status = 2 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
		group by E.Description
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Total Direct Income',@total, 'Header')
	
	end

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Liabilites Received', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=3 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name
		insert into #temp_Data2 values(@StartDate, 'Liabilites Received', 0.00, 'Total Liabilites Received',@total, 'Header')
	END

	   SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0.00,SIH.Name+'(Current Asset)',  sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.ParentId=2 AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name

		insert into #temp_Data2 values(@StartDate, 'Current Asset', 0.00, 'Total Current Asset',@total, 'Header')
	END

	insert into #temp_Data3
	select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '', 0.00,  ''
	from #temp_Data1 T1
	UNION ALL
	select @StartDate, 0,  '', 0, isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00), isnull(T2.Module, '')
	from #temp_Data2 T2

	declare @a decimal(18, 2)
	declare @b decimal(18, 2)
	declare @ExpenseWithinDate decimal(18, 2)
	declare @IncomeWithinDate decimal(18, 2)
	declare @CashInHandWithinDate decimal(18, 2)

	set @a = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @b = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header'
				), 0.00)
	set @ExpenseWithinDate = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @IncomeWithinDate = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and Module!='Header' and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	set @CashInHand = @CashInHand + (@b - @a)

	insert into #temp_Data3
	values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	insert into #temp_Data3
	values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	insert into #temp_Data3
	values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	set @StartDate = DATEADD(DAY, 1, @StartDate)
	--select *From #temp_Data1
	--select *From #temp_Data2
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)

--------------------------------
----Date : 20-12-2021-----------
--------------------------------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CashCollections ADD
	InterestAmt decimal(18, 2) NOT NULL CONSTRAINT DF_CashCollections_InterestAmt DEFAULT ((0))
GO
ALTER TABLE dbo.CashCollections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--------------------------------
----Date : 03-07-2021-----------
--------------------------------
update SystemInformations set ExpireDate='2021-07-10 00:00:00.000', 
WarningMsg=N'আপনার সফটওয়্যার এর মেয়াদ আগামী ১০ তারিখে শেষ হবে। দয়া করে ১০ তারিখের মধ্যে সার্ভিস চার্জ পরিশোধ করুন। বিকাশ/নগদ(ব্যক্তিগত) নাম্বারঃ
01724939433,
01777535899',
ExpireMessage=N'আপনার সফটওয়্যার এর মেয়াদ শেষ। দয়া করে আপনার সার্ভিস চার্জ পরিশোধ করুন। বিকাশ/নগদ(ব্যক্তিগত) নাম্বারঃ
01724939433,
01777535899'
--------------------------------
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SystemInformations ADD
	ExpireDate datetime NULL,
	ExpireMessage nvarchar(MAX) NULL,
	WarningMsg nvarchar(MAX) NULL
GO
ALTER TABLE dbo.SystemInformations SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
--******************Date: 10-12-20*******************
--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Products ADD
	MRP decimal(18, 2) NOT NULL CONSTRAINT DF_Products_MRP DEFAULT 0
GO
ALTER TABLE dbo.Products SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
--******************Date: 12-11-20*******************
--***************************************************
--exec sp_DailyCashInHand '2020-03-28 00:00:00','2020-03-28 00:00:00','7'
ALTER PROCEDURE [dbo].[sp_DailyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

IF (@ConcernID = 1)
	SET @CashInHand = 1263.00
ELSE IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
	SET @CashInHand = - 2.00
ELSE IF (@ConcernID = 4)
	SET @CashInHand = 65000.00
SET @CashInHand = @CashInHand + isnull((
			SELECT sum(Amount)
			FROM ShareInvestments SI
			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
			), 0)

CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(DAY, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	--	DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	--	DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 2
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Delivery to Supplier', @total, 'Due Collection', 0, 'Cash'

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
	END

	------------------------------------------------------Expense in Product return----------------------------------
	SET @total = isnull((
				SELECT sum(PaidAmount)
				FROM ROrders
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, ReturnDate)) = DAY(@StartDate) AND Month(Convert(DATE, ReturnDate)) = Month(@StartDate) AND Year(Convert(DATE, ReturnDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE ParentId = 4 AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE ParentId IN (4) AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name
	----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.Name = 'Liability Pay' AND SIH.ConcernID = @ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name

	----------------------------------------------Opening Cash In Hand in Income Table--------------------------------------------------------------- 
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND DAY(Convert(DATE, InvoiceDate)) = DAY(@StartDate) AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate)

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND DAY(Convert(DATE, TranDate)) = DAY(@StartDate) AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate)
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 1
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Due Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 1

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections', @total, 'Header')
	END

	-------------------------------------------------------- income Cash saving by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 3
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Saving', 0.00, 'Cash Saving', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 3

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Saving', 0.00, 'Total Cash Saving', @total, 'Header')
	END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND DAY(Convert(DATE, SalesDate)) = DAY(@StartDate) AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate)
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND DAY(Convert(DATE, OrderDate)) = DAY(@StartDate) AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND DAY(Convert(DATE, PaymentDate)) = DAY(@StartDate) AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate)
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	set @total=isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
						), 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate AS TransDate, '', 0, E.Description, sum(Amount), 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY E.Description

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Direct Income', 0.00, 'Total Direct Income', @total, 'Header')
	END

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.Name = 'Liability Receive' AND SIH.ConcernID = @ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.Name = 'Liability Receive' AND SIH.ConcernID = @ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name

	INSERT INTO #temp_Data3
	SELECT @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00), (CASE WHEN T2.Module IS NULL THEN (CASE WHEN T1.Module IS NULL THEN '' ELSE T1.Module END) ELSE T2.Module END)
	FROM #temp_Data1 T1
	FULL JOIN #temp_Data2 T2 ON T1.id = T2.id

	DECLARE @a DECIMAL(18, 2)
	DECLARE @b DECIMAL(18, 2)
	DECLARE @ExpenseWithinDate DECIMAL(18, 2)
	DECLARE @IncomeWithinDate DECIMAL(18, 2)
	DECLARE @CashInHandWithinDate DECIMAL(18, 2)

	SET @a = isnull((
				SELECT sum(ExpenseAmt)
				FROM #temp_Data1
				WHERE Expense NOT IN ('Total Payable', 'Opening Cash In Hand') AND Module != 'Header'
				), 0.00)
	SET @b = isnull((
				SELECT sum(IncomeAmt)
				FROM #temp_Data2
				WHERE Income NOT IN ('Total Receivable', 'Opening Cash In Hand') AND Module != 'Header'
				), 0.00)
	SET @ExpenseWithinDate = isnull((
				SELECT sum(ExpenseAmt)
				FROM #temp_Data1
				WHERE Expense NOT IN ('Total Payable', 'Opening Cash In Hand') AND Module != 'Header' AND TransDate >= @FromDate AND TransDate <= @ToDate
				), 0.00)
	SET @IncomeWithinDate = isnull((
				SELECT sum(IncomeAmt)
				FROM #temp_Data2
				WHERE Income NOT IN ('Total Receivable', 'Opening Cash In Hand') AND Module != 'Header' AND TransDate >= @FromDate AND TransDate <= @ToDate
				), 0.00)
	SET @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	SET @CashInHand = @CashInHand + (@b - @a)

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	SET @StartDate = DATEADD(DAY, 1, @StartDate)
END

SELECT Convert(DATETIME, TransDate) AS TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt, Module
FROM #temp_Data3
WHERE Convert(DATE, TransDate) >= Convert(DATE, @FromDate) AND Convert(DATE, TransDate) <= Convert(DATE, @ToDate)
--***************************************************
--exec sp_MonthlyCashInHand '2020-03-01 00:00:00','2020-03-28 00:00:00','7'
--EXEC sp_DailyCashInHand  '01 Feb 2019 12:00:00 AM','07 Feb 2019 11:59:59 PM',1
ALTER PROCEDURE [dbo].[sp_MonthlyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE
DECLARE @InitailDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

IF (@ConcernID = 1)
	SET @CashInHand = 1263.00
ELSE IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
	SET @CashInHand = - 2.00
ELSE IF (@ConcernID = 4)
	SET @CashInHand = 65000.00
SET @CashInHand = @CashInHand + isnull((
			SELECT sum(Amount)
			FROM ShareInvestments SI
			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
			), 0)

CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

SET @InitailDate = @StartDate

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(MONTH, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	-- DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	-- DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND OrderDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate AND TransactionType = 2
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Delivery to Supplier', @total, 'Due Collection', 0, 'Cash'

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND EntryDate >= @InitailDate AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, '', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate AND TransactionType = 4
	END

	------------------------------------------------------Expense in Product return----------------------------------
	SET @total = isnull((
				SELECT sum(PaidAmount)
				FROM ROrders
				WHERE ConcernID = @ConcernID AND Month(Convert(DATE, ReturnDate)) = Month(@StartDate) AND Year(Convert(DATE, ReturnDate)) = Year(@StartDate) AND ReturnDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE SIH.Name = 'Liability Pay' AND SI.ConcernID = @ConcernID AND TransactionType = 2 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE SIH.Name = 'Liability Pay' AND SI.ConcernID = @ConcernID AND TransactionType = 2 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY SIH.Name

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	-- SELECT sum(Amount)
	-- FROM ShareInvestments SI
	-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	-- WHERE ParentId = 2 AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	-- ), 0)
	--IF (@total != 0)
	-- INSERT INTO #temp_Data1
	-- SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	-- FROM ShareInvestments SI
	-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	-- WHERE ParentId IN (2) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	-- GROUP BY SIH.Name
	----------------------------------------------Opening Cash In Hand in Income Table---------------------------------------------------------------
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate) AND InvoiceDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND Month(Convert(DATE, InvoiceDate)) = Month(@StartDate) AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate) AND InvoiceDate >= @InitailDate

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Month(Convert(DATE, TranDate)) = Month(@StartDate) AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 1 AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Due Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate AND TransactionType = 1

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections', @total, 'Header')
	END

	-------------------------------------------------------- income Cash saving by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 3 AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Saving', 0.00, 'Cash Saving', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 3 AND EntryDate >= @InitailDate
	END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate) AND SalesDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND Month(Convert(DATE, SalesDate)) = Month(@StartDate) AND Year(Convert(DATE, SalesDate)) = Year(@StartDate) AND SalesDate >= @InitailDate
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND Month(Convert(DATE, OrderDate)) = Month(@StartDate) AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND OrderDate >= @InitailDate AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate) AND PaymentDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND Month(Convert(DATE, PaymentDate)) = Month(@StartDate) AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate) AND PaymentDate >= @InitailDate
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	set @total=isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 2 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
						), 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate AS TransDate, '', 0, E.Description, sum(Amount), 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 2 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY E.Description

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Direct Income', 0.00, 'Total Direct Income', @total, 'Header')
	END

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE SIH.Name = 'Liability Receive' AND SI.ConcernID = @ConcernID AND TransactionType = 1 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE SIH.Name = 'Liability Receive' AND SI.ConcernID = @ConcernID AND TransactionType = 1 AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY SIH.Name

	--insert into #temp_Data3
	--select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00),
	--	(case when T2.Module is null then ( case when T1.Module is null then '' else T1.Module end) else T2.Module end )
	--from #temp_Data1 T1
	--full join #temp_Data2 T2 on T1.id = T2.id
	INSERT INTO #temp_Data3
	SELECT @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '', 0.00, T1.Module
	FROM #temp_Data1 T1

	INSERT INTO #temp_Data3
	SELECT @StartDate, isnull(T1.id, 3), '', isnull(T1.ExpenseAmt, 0.00), isnull(T1.Income, ''), isnull(T1.IncomeAmt, 0.00), T1.Module
	FROM #temp_Data2 T1

	DECLARE @a DECIMAL(18, 2)
	DECLARE @b DECIMAL(18, 2)
	DECLARE @ExpenseWithinDate DECIMAL(18, 2)
	DECLARE @IncomeWithinDate DECIMAL(18, 2)
	DECLARE @CashInHandWithinDate DECIMAL(18, 2)

	SET @a = isnull((
				SELECT sum(ExpenseAmt)
				FROM #temp_Data1
				WHERE Expense NOT IN ('Total Payable', 'Opening Cash In Hand') AND Module != 'Header'
				), 0.00)
	SET @b = isnull((
				SELECT sum(IncomeAmt)
				FROM #temp_Data2
				WHERE Income NOT IN ('Total Receivable', 'Opening Cash In Hand') AND Module != 'Header'
				), 0.00)
	SET @ExpenseWithinDate = isnull((
				SELECT sum(ExpenseAmt)
				FROM #temp_Data1
				WHERE Expense NOT IN ('Total Payable', 'Opening Cash In Hand') AND Module != 'Header' AND TransDate >= @FromDate AND TransDate <= @ToDate
				), 0.00)
	SET @IncomeWithinDate = isnull((
				SELECT sum(IncomeAmt)
				FROM #temp_Data2
				WHERE Income NOT IN ('Total Receivable', 'Opening Cash In Hand') AND Module != 'Header' AND TransDate >= @FromDate AND TransDate <= @ToDate
				), 0.00)
	SET @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	SET @CashInHand = @CashInHand + (@b - @a)

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	SET @StartDate = DATEADD(MONTH, 1, @StartDate)
END

SELECT Convert(DATETIME, TransDate) AS TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt, Module
FROM #temp_Data3
WHERE Convert(DATE, TransDate) >= Convert(DATE, @FromDate) AND Convert(DATE, TransDate) <= Convert(DATE, @ToDate)
--***************************************************
--exec sp_MonthlyCashInHand'2020-01-01 00:00:00','2020-01-31 23:59:59','1'
--EXEC sp_DailyCashInHand  '01 Feb 2019 12:00:00 AM','07 Feb 2019 11:59:59 PM',1
ALTER PROCEDURE [dbo].[sp_YearlyCashInHand] (@FromDate DATETIME, @ToDate DATETIME, @ConcernID INT)
AS
DECLARE @id INT
DECLARE @total DECIMAL(18, 2)
DECLARE @CashInHand DECIMAL(18, 2)
DECLARE @StartDate DATE
DECLARE @InitailDate DATE

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
SET @StartDate = '2019-02-02'
SET @CashInHand = 0

IF (@ConcernID = 4)
	SET @StartDate = '2019-02-09'

IF (@ConcernID = 1)
	SET @CashInHand = 1263.00
ELSE IF (@ConcernID = 5)
	SET @CashInHand = 8755.00
ELSE IF (@ConcernID = 6)
	SET @CashInHand = - 2.00
ELSE IF (@ConcernID = 4)
	SET @CashInHand = 65000.00
ELSE IF (@ConcernID = 20)
BEGIN
	SET @CashInHand = 137340.00
	SET @StartDate = '2020-03-12'
END

SET @CashInHand = @CashInHand + isnull((
			SELECT sum(Amount)
			FROM ShareInvestments SI
			INNER JOIN ShareInvestmentHeads SIH ON SIH.SIHID = SI.SIHID
			INNER JOIN ShareInvestmentHeads ph ON SIH.ParentId = ph.SIHID
			WHERE SIH.ConcernID = @ConcernID AND ph.Name = 'Current Asset'
			), 0)

CREATE TABLE #temp_Data1 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data2 (TransDate DATE, id INT IDENTITY(1, 1), Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

CREATE TABLE #temp_Data3 (TransDate DATE, id INT, Expense VARCHAR(250), ExpenseAmt DECIMAL(18, 2), Income VARCHAR(250), IncomeAmt DECIMAL(18, 2), Module VARCHAR(250))

SET @InitailDate = @StartDate

---------------------------------------------------------------------------------------------------------------------------------------
WHILE (@StartDate) < DATEADD(YEAR, 1, Convert(DATE, GetDate()))
BEGIN
	PRINT @StartDate

	DELETE
	FROM #temp_Data1

	DELETE
	FROM #temp_Data2

	-- DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	-- DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	INSERT INTO #temp_Data1
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND OrderDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	---------------------------------Expense from Bank Deposit--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 1 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate AND TransactionType = 2
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Cash Delivery to Supplier', @total, 'Due Collection', 0, 'Cash'

	-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND EntryDate >= @InitailDate AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 4
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data1
		VALUES (@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		INSERT INTO #temp_Data1
		SELECT @StartDate, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, '', 0, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate AND TransactionType = 4
	END

	------------------------------------------------------Expense in Product return----------------------------------
	SET @total = isnull((
				SELECT sum(PaidAmount)
				FROM ROrders
				WHERE ConcernID = @ConcernID AND Year(Convert(DATE, ReturnDate)) = Year(@StartDate) AND ReturnDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'

	------------- -------------------------------------------- Direct Expense--------------------------------------------
	IF (
			(
				isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
						), 0)
				) != 0
			)
	BEGIN
		INSERT INTO #temp_Data1
		SELECT @StartDate AS TransDate, E.Description, sum(Amount), '', 0, 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 1 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY E.Description
	END

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE SIH.Name = 'Liability Pay' AND SI.ConcernID = @ConcernID AND TransactionType = 2 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE SIH.Name = 'Liability Pay' AND SI.ConcernID = @ConcernID AND TransactionType = 2 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY SIH.Name

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	-- SELECT sum(Amount)
	-- FROM ShareInvestments SI
	-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	-- WHERE ParentId = 2 AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate)  AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	-- ), 0)
	--IF (@total != 0)
	-- INSERT INTO #temp_Data1
	-- SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	-- FROM ShareInvestments SI
	-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	-- WHERE ParentId IN (2) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate)  AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	-- GROUP BY SIH.Name
	----------------------------------------------Opening Cash In Hand in Income Table---------------------------------------------------------------
	INSERT INTO #temp_Data2
	SELECT @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	SET @total = isnull((
				SELECT sum(RecAmount)
				FROM SOrders
				WHERE ConcernID = @ConcernID AND STATUS = 1 AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate) AND InvoiceDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate 'TransDate', 'Cash Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, so.RecAmount, 'Order'
		FROM SOrders so
		INNER JOIN Customers c ON so.CustomerID = c.CustomerID
		WHERE so.ConcernID = @ConcernID AND STATUS = 1 AND Year(Convert(DATE, InvoiceDate)) = Year(@StartDate) AND InvoiceDate >= @InitailDate

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Sales', 0.00, 'Total Cash Sales', @total, 'Header')
	END

	---------------------------------Income from Bank Withdwal--------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Bank Withdwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 2 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Withdwal', 0.00, 'Total Bank Withdwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Bank Cash Delivery as withdrwal', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 4 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Delivery as withdrwal', 0.00, 'Total Bank Cash Delivery as withdrwal', @total, 'Header')
	END

	---------------------------------Income from Bank Cash Collection---------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.BankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Bank Cash Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.BankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 3 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Cash Collection', 0.00, 'Total Bank Cash Collection', @total, 'Header')
	END

	----------------------------------------Income from Fund IN------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM BankTransactions BT
				INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
				WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Bank Fund IN', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		FROM BankTransactions BT
		INNER JOIN Banks B ON BT.AnotherBankID = B.BankID
		WHERE BT.ConcernID = @ConcernID AND TransactionType = 5 AND Year(Convert(DATE, TranDate)) = Year(@StartDate) AND TranDate >= @InitailDate
		GROUP BY B.BankID, B.AccountNo, B.BankName

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Bank Fund IN', 0.00, 'Total Bank Fund IN', @total, 'Header')
	END

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 1 AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Due Paid', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate AND TransactionType = 1

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Collections', 0.00, 'Total Cash Collections', @total, 'Header')
	END

	-------------------------------------------------------- income Cash saving by customer------------------------------------------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM CashCollections
				WHERE ConcernID = @ConcernID AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 3 AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Cash Saving', 0.00, 'Cash Saving', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, cc.Amount, 'Cash'
		FROM CashCollections cc
		INNER JOIN Customers c ON cc.CustomerID = c.CustomerID
		WHERE cc.ConcernID = @ConcernID AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND TransactionType = 3 AND EntryDate >= @InitailDate
	END

	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	SET @total = isnull((
				SELECT isnull(sum(DownPayment), 0)
				FROM CreditSales
				WHERE ConcernID = @ConcernID AND IsStatus = 1 AND Year(Convert(DATE, SalesDate)) = Year(@StartDate) AND SalesDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, DownPayment, 'DownPayment'
		FROM CreditSales cs
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND IsStatus = 1 AND Year(Convert(DATE, SalesDate)) = Year(@StartDate) AND SalesDate >= @InitailDate
	END

	--------------------------------------Income in Purchase Product return----------------------------------
	SET @total = isnull((
				SELECT sum(RecAmt)
				FROM POrders
				WHERE ConcernID = @ConcernID AND Year(Convert(DATE, OrderDate)) = Year(@StartDate) AND OrderDate >= @InitailDate AND STATUS = 5
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	SET @total = isnull((
				SELECT sum(InstallmentAmt)
				FROM CreditSalesSchedules css
				INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
				WHERE ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate) AND PaymentDate >= @InitailDate
				), 0)

	IF (@total != 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate, '', 0, RTrim(c.Code) + ',' + c.Name + ',' + c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		FROM CreditSalesSchedules css
		INNER JOIN CreditSales cs ON css.CreditSalesID = cs.CreditSalesID
		INNER JOIN Customers c ON cs.CustomerID = c.CustomerID
		WHERE cs.ConcernID = @ConcernID AND css.InstallmentAmt != 0 AND cs.IsStatus = 1 AND PaymentStatus = 'Paid' AND Year(Convert(DATE, PaymentDate)) = Year(@StartDate) AND PaymentDate >= @InitailDate
	END

	-----------------------------------Income from Direct Income------------------------------------------------
	set @total=isnull((
						SELECT sum(Amount)
						FROM Expenditures EX
						INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
						WHERE EX.ConcernID = @ConcernID AND E.STATUS = 2 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
						), 0)
	BEGIN
		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		INSERT INTO #temp_Data2
		SELECT @StartDate AS TransDate, '', 0, E.Description, sum(Amount), 'EX'
		FROM Expenditures EX
		INNER JOIN ExpenseItems E ON E.ExpenseItemID = EX.ExpenseItemID
		WHERE EX.ConcernID = @ConcernID AND E.STATUS = 2 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY E.Description

		INSERT INTO #temp_Data2
		VALUES (@StartDate, 'Direct Income', 0.00, 'Total Direct Income', @total, 'Header')
	END

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE SIH.Name = 'Liability Receive' AND SI.ConcernID = @ConcernID AND TransactionType = 1 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE SIH.Name = 'Liability Receive' AND SI.ConcernID = @ConcernID AND TransactionType = 1 AND Year(Convert(DATE, EntryDate)) = Year(@StartDate) AND EntryDate >= @InitailDate
		GROUP BY SIH.Name

	--insert into #temp_Data3
	--select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00),
	--	(case when T2.Module is null then ( case when T1.Module is null then '' else T1.Module end) else T2.Module end )
	--from #temp_Data1 T1
	--full join #temp_Data2 T2 on T1.id = T2.id
	INSERT INTO #temp_Data3
	SELECT @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '', 0.00, T1.Module
	FROM #temp_Data1 T1

	INSERT INTO #temp_Data3
	SELECT @StartDate, isnull(T1.id, 3), '', isnull(T1.ExpenseAmt, 0.00), isnull(T1.Income, ''), isnull(T1.IncomeAmt, 0.00), T1.Module
	FROM #temp_Data2 T1

	DECLARE @a DECIMAL(18, 2)
	DECLARE @b DECIMAL(18, 2)
	DECLARE @ExpenseWithinDate DECIMAL(18, 2)
	DECLARE @IncomeWithinDate DECIMAL(18, 2)
	DECLARE @CashInHandWithinDate DECIMAL(18, 2)

	SET @a = isnull((
				SELECT sum(ExpenseAmt)
				FROM #temp_Data1
				WHERE Expense NOT IN ('Total Payable', 'Opening Cash In Hand') AND Module != 'Header'
				), 0.00)
	SET @b = isnull((
				SELECT sum(IncomeAmt)
				FROM #temp_Data2
				WHERE Income NOT IN ('Total Receivable', 'Opening Cash In Hand') AND Module != 'Header'
				), 0.00)
	SET @ExpenseWithinDate = isnull((
				SELECT sum(ExpenseAmt)
				FROM #temp_Data1
				WHERE Expense NOT IN ('Total Payable', 'Opening Cash In Hand') AND Module != 'Header' AND TransDate >= @FromDate AND TransDate <= @ToDate
				), 0.00)
	SET @IncomeWithinDate = isnull((
				SELECT sum(IncomeAmt)
				FROM #temp_Data2
				WHERE Income NOT IN ('Total Receivable', 'Opening Cash In Hand') AND Module != 'Header' AND TransDate >= @FromDate AND TransDate <= @ToDate
				), 0.00)
	SET @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	SET @CashInHand = @CashInHand + (@b - @a)

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	INSERT INTO #temp_Data3
	VALUES (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	SET @StartDate = DATEADD(YEAR, 1, @StartDate)
END

SELECT Convert(DATETIME, TransDate) AS TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt, Module
FROM #temp_Data3
WHERE Convert(DATE, TransDate) >= Convert(DATE, @FromDate) AND Convert(DATE, TransDate) <= Convert(DATE, @ToDate)

--***************************************************
--******************Date: 28-10-20*******************
--***************************************************
ALTER PROC [dbo].[UpdateTotalDueWhenEdit]
(
	@CusId int,
	@SupId int,
	@CashCollectionID int,
	@BankTransactionID int,
	@NewCollectionAmount DECIMAL(18,2)
)
  
AS 
Declare @Amount decimal
Declare @PreviousCustomerID int
Declare @TransactionType int
Declare @FromBankID int
Declare @ToBankID int
BEGIN TRY
BEGIN TRANSACTION

IF(@CusId>0)
BEGIN
    Select @Amount=(Amount+AdjustAmt) from CashCollections where CashCollectionID=@CashCollectionID
	Select @PreviousCustomerID=CustomerID from CashCollections where CashCollectionID=@CashCollectionID

	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue + @Amount)
	where CustomerID=@PreviousCustomerID

	UPDATE Customers Set Customers.TotalDue = (Customers.TotalDue - @NewCollectionAmount)
	where CustomerID=@CusId
END
ELSE IF(@SupId>0)
BEGIN
    Select @Amount=(Amount+AdjustAmt) from CashCollections where CashCollectionID=@CashCollectionID
    Select @PreviousCustomerID=SupplierID from CashCollections where CashCollectionID=@CashCollectionID

	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue + @Amount)
	where SupplierID=@PreviousCustomerID

	UPDATE Suppliers Set Suppliers.TotalDue = (Suppliers.TotalDue - @NewCollectionAmount)
	where SupplierID=@SupId
END
ELSE IF(@BankTransactionID>0)
BEGIN

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5

Select @TransactionType=Transactiontype,@Amount=Amount,@FromBankID=BankID,@ToBankID=AnotherBankID,@PreviousCustomerID=CustomerID From BankTransactions where BankTranID=@BankTransactionID

if(@TransactionType=1)
 update Banks set TotalAmount=TotalAmount-@Amount where BankID=@FromBankID
 else if(@TransactionType=2 OR @TransactionType=4)
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 else if(@TransactionType=3)
  BEGIN
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 update Customers set TotalDue=TotalDue-@Amount where CustomerID=@PreviousCustomerID
 END
 else if(@TransactionType=5)
 BEGIN
 update Banks set TotalAmount=TotalAmount+@Amount where BankID=@FromBankID
 update Banks set TotalAmount=TotalAmount-@Amount where BankID=@ToBankID
 END

END

COMMIT

RETURN 1;

END TRY

BEGIN CATCH

    IF @@TRANCOUNT > 0
        ROLLBACK

		RETURN 0;
END CATCH







--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.BankTransactions ADD
	CreatedBy int NOT NULL CONSTRAINT DF_BankTransactions_CreatedBy DEFAULT ((1)),
	CreateDate datetime NULL,
	ModifiedBy int NULL,
	ModifiedDate datetime NULL
GO
ALTER TABLE dbo.BankTransactions SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
--******************Date: 28-10-20*******************
--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Colors
	DROP CONSTRAINT FK_Colors_SisterConcerns
GO
ALTER TABLE dbo.SisterConcerns SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Colors
	DROP CONSTRAINT DF_Colors_ConcernID
GO
CREATE TABLE dbo.Tmp_Colors
	(
	ColorID int NOT NULL IDENTITY (1, 1),
	Name nvarchar(MAX) NOT NULL,
	Code varchar(250) NOT NULL,
	ConcernID int NOT NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Colors SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Colors ADD CONSTRAINT
	DF_Colors_ConcernID DEFAULT ((1)) FOR ConcernID
GO
SET IDENTITY_INSERT dbo.Tmp_Colors ON
GO
IF EXISTS(SELECT * FROM dbo.Colors)
	 EXEC('INSERT INTO dbo.Tmp_Colors (ColorID, Name, Code, ConcernID)
		SELECT ColorID, CONVERT(nvarchar(MAX), Name), Code, ConcernID FROM dbo.Colors WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Colors OFF
GO
ALTER TABLE dbo.ROrderDetails
	DROP CONSTRAINT FK_ReturnDetails_Colors
GO
ALTER TABLE dbo.ROProductDetails
	DROP CONSTRAINT FK_ReturnProductDetails_Colors
GO
ALTER TABLE dbo.POrderDetails
	DROP CONSTRAINT FK_POrderDetails_Colors
GO
ALTER TABLE dbo.Stocks
	DROP CONSTRAINT FK_Stocks_Colors
GO
ALTER TABLE dbo.POProductDetails
	DROP CONSTRAINT FK_POProductDetails_Colors
GO
ALTER TABLE dbo.PriceProtections
	DROP CONSTRAINT FK_PriceProtection_Colors
GO
ALTER TABLE dbo.StockDetails
	DROP CONSTRAINT FK_StockDetails_Colors
GO
ALTER TABLE dbo.SRVisitDetails
	DROP CONSTRAINT FK_SRVisitDetails_Colors
GO
ALTER TABLE dbo.SRVProductDetails
	DROP CONSTRAINT FK_SRVProductDetails_Colors
GO
DROP TABLE dbo.Colors
GO
EXECUTE sp_rename N'dbo.Tmp_Colors', N'Colors', 'OBJECT' 
GO
ALTER TABLE dbo.Colors ADD CONSTRAINT
	PK_Colors PRIMARY KEY CLUSTERED 
	(
	ColorID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Colors ADD CONSTRAINT
	FK_Colors_SisterConcerns FOREIGN KEY
	(
	ConcernID
	) REFERENCES dbo.SisterConcerns
	(
	ConcernID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SRVProductDetails ADD CONSTRAINT
	FK_SRVProductDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.SRVProductDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.SRVisitDetails ADD CONSTRAINT
	FK_SRVisitDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.SRVisitDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.StockDetails ADD CONSTRAINT
	FK_StockDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.StockDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.PriceProtections ADD CONSTRAINT
	FK_PriceProtection_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.PriceProtections SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.POProductDetails ADD CONSTRAINT
	FK_POProductDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.POProductDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Stocks ADD CONSTRAINT
	FK_Stocks_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Stocks SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.POrderDetails ADD CONSTRAINT
	FK_POrderDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.POrderDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROProductDetails ADD CONSTRAINT
	FK_ReturnProductDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ROProductDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROrderDetails ADD CONSTRAINT
	FK_ReturnDetails_Colors FOREIGN KEY
	(
	ColorID
	) REFERENCES dbo.Colors
	(
	ColorID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ROrderDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Companies
	DROP CONSTRAINT FK_Companies_SisterConcerns
GO
ALTER TABLE dbo.SisterConcerns SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Companies
	DROP CONSTRAINT DF_Companies_ConcernID
GO
CREATE TABLE dbo.Tmp_Companies
	(
	CompanyID int NOT NULL IDENTITY (1, 1),
	Code varchar(250) NOT NULL,
	Name nvarchar(MAX) NOT NULL,
	ConcernID int NOT NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]
GO
ALTER TABLE dbo.Tmp_Companies SET (LOCK_ESCALATION = TABLE)
GO
ALTER TABLE dbo.Tmp_Companies ADD CONSTRAINT
	DF_Companies_ConcernID DEFAULT ((1)) FOR ConcernID
GO
SET IDENTITY_INSERT dbo.Tmp_Companies ON
GO
IF EXISTS(SELECT * FROM dbo.Companies)
	 EXEC('INSERT INTO dbo.Tmp_Companies (CompanyID, Code, Name, ConcernID)
		SELECT CompanyID, Code, CONVERT(nvarchar(MAX), Name), ConcernID FROM dbo.Companies WITH (HOLDLOCK TABLOCKX)')
GO
SET IDENTITY_INSERT dbo.Tmp_Companies OFF
GO
ALTER TABLE dbo.Products
	DROP CONSTRAINT FK_Products_Companies
GO
DROP TABLE dbo.Companies
GO
EXECUTE sp_rename N'dbo.Tmp_Companies', N'Companies', 'OBJECT' 
GO
ALTER TABLE dbo.Companies ADD CONSTRAINT
	PK_Companies PRIMARY KEY CLUSTERED 
	(
	CompanyID
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO
ALTER TABLE dbo.Companies ADD CONSTRAINT
	FK_Companies_SisterConcerns FOREIGN KEY
	(
	ConcernID
	) REFERENCES dbo.SisterConcerns
	(
	ConcernID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.Products ADD CONSTRAINT
	FK_Products_Companies FOREIGN KEY
	(
	CompanyID
	) REFERENCES dbo.Companies
	(
	CompanyID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.Products SET (LOCK_ESCALATION = TABLE)
GO
COMMIT


--***************************************************
--******************Date: 14-07-20*******************
--***************************************************

--exec sp_TrialBalance  '01 Dec 2019 12:00:00 AM','31 Dec 2019 11:59:59 PM',3
alter PROC [dbo].[sp_TrialBalance]
(
  @FromDate datetime,
  @ToDate datetime,
  @ConcernID int
)
AS
BEGIN
DECLARE @CashInHandNeg decimal(18,2)
DECLARE @CashInHandPos decimal(18,2)

Create table #temp(ID int identity(1,1) not null,Particulars nvarchar(MAX),Debit decimal(18,2),Credit decimal(18,2),SerialNum int)

--****************************************************
--***************Debit Start**************************
--****************************************************

--Insert Into #temp(Particulars,Debit,Credit,SerialNum)
--select 'Cash at Banks', ISNULL(sum(TotalAmount),0.0),0.00,1 from Banks
--where ConcernID=@ConcernID

------------------Investment-----------------------------------------------------
declare @OpeningBalance decimal(18,2)
set @OpeningBalance = ISNULL((select sum(Amount)from ShareInvestments i
JOIN ShareInvestmentHeads ih ON i.SIHID = ih.SIHID
JOIN ShareInvestmentHeads p ON ih.ParentId = p.SIHID
where i.ConcernID=@ConcernID AND ih.Name LIKE 'Opening%' AND (p.Name='Current Asset' OR p.Name='Fixed Asset')),0.00)

--if(@Assets!=0.00)
--Insert Into #temp(Particulars,Debit,Credit,SerialNum) values('Assets',@Assets,0.00,2)

if(@OpeningBalance!=0.00)
Insert Into #temp(Particulars,Debit,Credit,SerialNum) values('Capital',0.00,@OpeningBalance,2)

-------------------------------------------Cash In Hand--------------------------------------------
Declare @TotalIncome decimal(18,2)

Declare @TotalExpense decimal(18,2)
set @TotalIncome=0.00
set @TotalExpense=0.00

--direct expense
set @TotalExpense =ISNULL((
select SUM(Amount) from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=1),0)

--cash delivery
set @TotalExpense =@TotalExpense+ISNULL((
select sum(cc.Amount) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=2 and cc.SupplierID!=0)),0)

--sales return
set @TotalExpense =@TotalExpense+ ISNULL((
select SUM(so.PaidAmount) from ROrders so
where so.ConcernID=@ConcernID and (so.ReturnDate>=@FromDate and so.ReturnDate<=@ToDate)
),0)

---cash purchase
set @TotalExpense =@TotalExpense+ ISNULL((
select SUM(po.RecAmt) From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID
),0)

--cash deposite
set @TotalExpense =@TotalExpense+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=1 and bt.ConcernID=@ConcernID
),0)

-----------------Income----------------

set @TotalIncome = @TotalIncome+@OpeningBalance;
--cash collection
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(cc.Amount) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)),0)

--installment collections
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(css.InstallmentAmt) from CreditSales so
join CreditSalesSchedules css on so.CreditSalesID=css.CreditSalesID
where so.ConcernID=@ConcernID and (css.PaymentDate>=@FromDate and PaymentDate<=@ToDate) and so.IsStatus=1 and (css.InstallmentAmt>0 and css.PaymentStatus='Paid')),0)

--direct income
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(ex.Amount) from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=2
),0)

--hire sales downpayment
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(so.DownPayment) from CreditSales so
where so.ConcernID=@ConcernID and ( so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1),0)

--cash sales
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(so.RecAmount) from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1
),0)

--cash withdraw from bank
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=2 and bt.ConcernID=@ConcernID
),0)

IF(@TotalIncome-@TotalExpense!=0)
Insert Into #temp(Particulars,Debit,Credit,SerialNum) values ('Cash in hand',@TotalIncome-@TotalExpense,0.00,1)

-------------------------------------------Cash in the bank--------------------------------------------
set @TotalIncome=0
set @TotalExpense=0
--Deposit
set @TotalIncome= ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=1 and bt.ConcernID=@ConcernID),0)
--Collection from Customer
set @TotalIncome=@TotalIncome+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=3 and bt.CustomerID!=0 and bt.ConcernID=@ConcernID
),0)

--Withdraw
set @TotalExpense= ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=2 and bt.ConcernID=@ConcernID
),0)

--Delivery to suppliers
set @TotalExpense=@TotalExpense+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=4 and bt.ConcernID=@ConcernID and bt.SupplierID!=0
),0)

IF(@TotalIncome-@TotalExpense!=0)
Insert Into #temp(Particulars,Debit,Credit,SerialNum) values ('Cash in bank',@TotalIncome-@TotalExpense,0.00,2)

--------------------------------------------Direct Expense-----------------------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select exi.Description,Amount,0.00,3 from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=1

---------------------------------------------Purchase----------------------------------------
DECLARE @CashCollection decimal(18,2)

Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Purchase',po.GrandTotal,0.00,4 From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID

---------------------------------------Transfer In and Transfer Receivables--------------------
--Insert Into #temp(Particulars,Debit,Credit,SerialNum)
--select 'Transfer In',(td.Quantity*td.PRate),0.00,4 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.ToConcernID=@ConcernID and t.WFStatus=4


--Insert Into #temp(Particulars,Debit,Credit,SerialNum)
--select 'Transfer Receivables',(td.Quantity*td.PRate),0.00,4 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.FromConcernID=@ConcernID and t.WFStatus=4

----------------------------------------Adjustment------------------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Adjustment',cc.AdjustAmt,0.0,8 from CashCollections cc
where cc.ConcernID=@ConcernID and cc.AdjustAmt>0 and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)

Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Adjustment',css.LastPayAdjust,0.0,8 from CreditSales so
join CreditSalesSchedules css on so.CreditSalesID=css.CreditSalesID
where so.ConcernID=@ConcernID and (css.PaymentDate>=@FromDate and css.PaymentDate<=@ToDate) and so.IsStatus=1 and (css.LastPayAdjust>0 and css.PaymentStatus='Paid')

Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Adjustment',so.AdjAmount,0.0,8 from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1 and so.AdjAmount>0

------------------------------------------Discount Given---------------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Discount Given',so.Discount,0.0,7 from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1 and so.Discount>0

Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Discount Given',so.NetDiscount,0.0,7 from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1 and so.NetDiscount>0

------------------------------------------Sales Return------------------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Sales Return',so.GrandTotal,0.0,7 from ROrders so
where so.ConcernID=@ConcernID and (so.ReturnDate>=@FromDate and so.ReturnDate<=@ToDate) 

----------------------------------------------Customer Due---------------------------------
Declare @TotalSaleAmt  decimal(18,2)

Set @TotalSaleAmt= ISNULL((
select SUM(so.TotalAmount) from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and  so.InvoiceDate<=@ToDate) and so.Status=1),0)

--Set @TotalSaleAmt=@TotalSaleAmt+ ISNULL((
--select SUM(so.OpeningDue) from Customers so
--where so.ConcernID=@ConcernID and (so.CreatedDate<=@ToDate)),0)

Set @TotalSaleAmt=@TotalSaleAmt+ ISNULL((
select SUM(so.NetAmount) from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1),0)

set @CashInHandPos = ISNULL((
select SUM(cc.Amount+cc.AdjustAmt) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)),0)

Set @CashInHandPos=@CashInHandPos+  ISNULL((
select SUM(so.RecAmount) from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1 and so.RecAmount>0),0)

Set @CashInHandPos=@CashInHandPos+  ISNULL((
select SUM(so.GrandTotal-so.PaidAmount) from ROrders so
where so.ConcernID=@ConcernID and (so.ReturnDate>=@FromDate and so.ReturnDate<=@ToDate) and(so.GrandTotal-so.PaidAmount)>0),0)

set @CashInHandPos =@CashInHandPos+ ISNULL((
select SUM(so.DownPayment) from CreditSales so
where so.ConcernID=@ConcernID and ( so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1),0)

set @CashInHandPos =@CashInHandPos+ ISNULL((
select SUM(css.InstallmentAmt+css.LastPayAdjust) from CreditSales so
join CreditSalesSchedules css on so.CreditSalesID=css.CreditSalesID
where so.ConcernID=@ConcernID and (css.PaymentDate>=@FromDate and css.PaymentDate<=@ToDate) and so.IsStatus=1 and (css.InstallmentAmt>0 and css.PaymentStatus='Paid')),0)

set @CashInHandPos = @CashInHandPos+ISNULL((select SUM(cc.AdjustAmt) from CashCollections cc
where cc.ConcernID=@ConcernID and cc.AdjustAmt>0 and (cc.EntryDate>=@FromDate and  cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)),0)

set @CashInHandPos = @CashInHandPos+ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=3 and bt.CustomerID!=0 and bt.ConcernID=@ConcernID
),0)
IF(@TotalSaleAmt-@CashInHandPos!=0)
Insert Into #temp(Particulars,Debit,Credit,SerialNum) values ('Customer Due',@TotalSaleAmt-@CashInHandPos,0,7)


----------------------------------------Stock Value Start------------------------------------------
declare @TotalPOAmt decimal(18,2)
declare @TotalPOReturn decimal(18,2)
declare @TotalSales decimal(18,2)
declare @TotalSalesReturn decimal(18,2)

--set  @TotalPOAmt=ISNULL((select Sum(pod.Quantity*pod.UnitPrice) From POrders po
--join POrderDetails pod on po.POrderID = pod.POrderID
--where (po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID),0.00)

--set  @TotalPOAmt=@TotalPOAmt+ISNULL((select Sum(td.Quantity*td.PRate) From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.TransferDate<=@ToDate) and t.Status=1 and t.ToConcernID=@ConcernID and t.WFStatus=4),0.00)

--set  @TotalPOReturn=ISNULL((select Sum(pod.Quantity*pod.UnitPrice) From POrders po
--join POrderDetails pod on po.POrderID = pod.POrderID
--where (po.OrderDate<=@ToDate) and po.Status=5 and po.ConcernID=@ConcernID),0.00)



--set @TotalSales=ISNULL((select Sum(st.PRate*sod.Quantity) from SOrders so
--join SOrderDetails sod on so.SOrderID = sod.SOrderID
--join StockDetails st on sod.SDetailID = st.SDetailID
--where so.ConcernID=@ConcernID and (so.InvoiceDate<=@ToDate) and so.Status=1),0)

--set  @TotalSales=@TotalSales+ISNULL((select Sum(td.Quantity*td.PRate) From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.TransferDate<=@ToDate) and t.Status=1 and t.FromConcernID=@ConcernID and t.WFStatus=4),0.00)

--set @TotalSalesReturn=ISNULL((select Sum(st.PRate*sod.Quantity) from SOrders so
--join SOrderDetails sod on so.SOrderID = sod.SOrderID
--join StockDetails st on sod.SDetailID = st.SDetailID
--where so.ConcernID=@ConcernID and (so.InvoiceDate<=@ToDate) and so.Status=4),0)

--Insert Into #temp(Particulars,Debit,Credit,SerialNum) values ('Stock',(@TotalPOAmt+@TotalSalesReturn-@TotalPOReturn-@TotalSales),0.00,7)

---------------------------------------Stock Value End-------------------------------



--****************************************************
--***************Debit End****************************
--****************************************************



--****************************************************
--***************Credit Start*************************
--****************************************************


-----------------------------------Transfer Out and Transfer Payable---------------------------------------------
--Insert Into #temp(Particulars,Debit,Credit,SerialNum)
--select 'Transfer Out',0.00,(td.Quantity*td.PRate),4 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.FromConcernID=@ConcernID and t.WFStatus=4

--Insert Into #temp(Particulars,Debit,Credit,SerialNum)
--select 'Transfer Payable',0.00,(td.Quantity*td.PRate),4 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.ToConcernID=@ConcernID and t.WFStatus=4

------------------Investment-----------------------------------------------------
declare @Liability decimal(18,2)
 set @Liability =  ISNULL((select sum(Amount) from ShareInvestments i
JOIN ShareInvestmentHeads ih ON i.SIHID = ih.SIHID
JOIN ShareInvestmentHeads p ON ih.ParentId = p.SIHID
where i.ConcernID=@ConcernID AND p.Name='Liability' AND (i.EntryDate>=@FromDate and i.EntryDate<=@ToDate)
),0.00)

if(@Liability!=0)
Insert Into #temp(Particulars,Debit,Credit,SerialNum) values('Liability',0.00,@Liability,3)



-------------------------------------Direct Income-------------------------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select exi.Description,0.00,ex.Amount,3 from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=2

-------------------------------------Retail and hire Sales----------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Sales',0.00,so.GrandTotal,6 from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1

Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Sales',0.00,so.NetAmount-so.InterestAmount,6 from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1

--------------------------------------Purchase Discount------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Purchase Discount',0.00,po.NetDiscount,5 From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID and po.NetDiscount>0

-----------------------------------------Hire Interest--------------------------
Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Hire Interest',0.00,so.InterestAmount,12 from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1 and so.InterestAmount>0


----------------------------------------Supplier Due----------------------------
declare @SupplierDue decimal(18,2)
declare @CashDelivery decimal(18,2)

set @SupplierDue = ISNULL((
select Sum(po.TotalAmt) From POrders po
where po.Status=1 and po.ConcernID=@ConcernID and (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate)),0)

--set @SupplierDue =@SupplierDue+ ISNULL((
--select Sum(po.OpeningDue) From Suppliers po
--where (po.ConcernID=@ConcernID)),0)

set @CashDelivery =ISNULL((
select sum(cc.Amount+cc.AdjustAmt) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=2 and cc.SupplierID!=0)),0)

set @CashDelivery =@CashDelivery+ ISNULL((
select Sum(po.RecAmt) From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID),0)

set @CashDelivery =@CashDelivery+ ISNULL((
select Sum(po.PaymentDue) From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=5 and po.ConcernID=@ConcernID),0)

set @CashDelivery=@CashDelivery+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=4 and bt.ConcernID=@ConcernID and bt.SupplierID!=0
),0)

IF(@SupplierDue-@CashDelivery!=0)
Insert Into #temp(Particulars,Debit,Credit,SerialNum) values ('Supplier Due',0,@SupplierDue-@CashDelivery,5)


-----------------------------Purchase Return---------------------------

Insert Into #temp(Particulars,Debit,Credit,SerialNum)
select 'Purchase Return',0.00,po.TotalAmt,4 From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=5 and po.ConcernID=@ConcernID

--****************************************************
--***************Credit End***************************
--****************************************************

select SerialNum, Particulars,sum(Debit) 'Debit',sum(Credit) 'Credit' from #temp
group by Particulars,SerialNum
order by SerialNum asc
END
GO


--***************************************************

--exec sp_ProfitandLossAccount '2020-01-01 00:00:00','2020-03-04 23:59:59',17
CREATE PROCEDURE [dbo].[sp_ProfitandLossAccount] (
	@Fromdate DATETIME,
	@ToDate DATETIME,
	@ConcernID INT
	)
AS

BEGIN

    Create table #temp(ID int identity(1,1) not null,DebitParticulars nvarchar(MAX),Debit decimal(18,2),CreditParticulars nvarchar(MAX),Credit decimal(18,2),SerialNum int)
	Declare @TotalIncome decimal(18,2)

	Declare @TotalExpense decimal(18,2)
	set @TotalIncome=0
	set @TotalExpense=0

    SELECT @TotalIncome=ISNULL(SUM(SOD.Quantity*(SOD.MPRate-((SOD.MPRate*SO.NetDiscount)/SO.GrandTotal))),0),@TotalExpense=ISNULL(SUM(SOD.PRate * SOD.Quantity),0)
	FROM SOrderDetails SOD
	INNER JOIN SOrders SO ON SOD.SOrderID = SO.SOrderID
	INNER JOIN StockDetails STD ON STD.SDetailID = SOD.SDetailID
	WHERE SO.STATUS = 1 AND (SO.InvoiceDate >= @Fromdate AND SO.InvoiceDate <= @ToDate) AND SO.ConcernID = @ConcernID

	--Print(Convert(varchar(123),@TotalIncome))

	--Print(Convert(varchar(123),@TotalExpense))
	
	SELECT @TotalIncome=@TotalIncome+ISNULL(SUM(CSP.Quantity*(CSP.UnitPrice-(CS.Discount*CSP.UnitPrice/CS.TSalesAmt))),0),
	@TotalExpense=@TotalExpense+ISNULL(SUM( CSP.MPRate*CSP.Quantity),0)
	FROM CreditSaleDetails CSP
	INNER JOIN CreditSales CS ON CS.CreditSalesID = CSP.CreditSalesID
	INNER JOIN StockDetails STD ON STD.SDetailID = CSP.StockDetailID
	WHERE CS.IsStatus = 1 AND CS.SalesDate >= @Fromdate AND CS.SalesDate <= @ToDate AND CS.ConcernID = @ConcernID
		
		--Print(Convert(varchar(123),@TotalIncome))
	
	SELECT @TotalIncome=@TotalIncome+ ISNULL(SUM(HireValue),0)
	FROM CreditSales CS
	INNER JOIN CreditSaleDetails CSP ON CSP.CreditSalesID = CS.CreditSalesID
	INNER JOIN CreditSalesSchedules CSD ON CSD.CreditSalesID = CS.CreditSalesID
	INNER JOIN StockDetails STD ON STD.SDetailID = CSP.StockDetailID
	WHERE Cs.IsStatus = 1 AND CS.SalesDate >= @Fromdate AND CS.SalesDate <= @ToDate AND CSD.PaymentStatus = 'Paid' AND CS.ConcernID = @ConcernID

	Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values('Purchase',ISNULL(@TotalExpense,0),'',0.00,1)
	Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)  values('',0.0,'Sales',@TotalIncome,2)
	Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)  values('',0.0,'Gross Profit',ISNULL(@TotalIncome-@TotalExpense,0),3)

	--Income
	Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) 
	select '',0.00,exi.Description, ex.Amount,4 from Expenditures ex
	join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
	where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=2

	--expense
	Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) 
	select exi.Description, ex.Amount,'',0.00,4 from Expenditures ex
	join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
	where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=1


	select SerialNum, DebitParticulars,sum(Debit) 'Debit',CreditParticulars,sum(Credit) 'Credit' from #temp
	group by DebitParticulars,CreditParticulars,SerialNum
	order by SerialNum asc

		--Print(Convert(varchar(123),@TotalIncome))
END
GO


--***************************************************

--exec sp_BalanceSheet  '01 Dec 2019 12:00:00 AM','31 Dec 2019 11:59:59 PM',1
alter PROC [dbo].[sp_BalanceSheet]
(
  @FromDate datetime,
  @ToDate datetime,
  @ConcernID int
)
AS
BEGIN
DECLARE @CashInHandNeg decimal(18,2)
DECLARE @CashInHandPos decimal(18,2)

 Create table #temp(ID int identity(1,1) not null,DebitParticulars nvarchar(MAX),Debit decimal(18,2),CreditParticulars nvarchar(MAX),Credit decimal(18,2),SerialNum int)


--****************************************************
--***************Debit Start**************************
--****************************************************

--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select 'Cash at Banks', ISNULL(sum(TotalAmount),0.0),0.00,1 from Banks
--where ConcernID=@ConcernID

------------------Investment-----------------------------------------------------
declare @OpeningBalance decimal(18,2)
set @OpeningBalance = ISNULL((select sum(Amount)from ShareInvestments i
JOIN ShareInvestmentHeads ih ON i.SIHID = ih.SIHID
JOIN ShareInvestmentHeads p ON ih.ParentId = p.SIHID
where i.ConcernID=@ConcernID AND ih.Name LIKE 'Opening%' AND (p.Name='Current Asset' OR p.Name='Fixed Asset')),0.00)

--if(@Assets!=0.00)
--Insert Into #temp(Particulars,Debit,Credit,SerialNum) values('Assets',@Assets,0.00,2)

if(@OpeningBalance!=0.00)
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values('',0.00,'Capital',@OpeningBalance,2)
-------------------------------------------Cash In Hand--------------------------------------------
Declare @TotalIncome decimal(18,2)

Declare @TotalExpense decimal(18,2)
set @TotalIncome=0
set @TotalExpense=0

--direct expense
set @TotalExpense =ISNULL((
select SUM(Amount) from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=1),0)

--cash delivery
set @TotalExpense =@TotalExpense+ISNULL((
select sum(cc.Amount) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=2 and cc.SupplierID!=0)),0)

--sales return
set @TotalExpense =@TotalExpense+ ISNULL((
select SUM(so.PaidAmount) from ROrders so
where so.ConcernID=@ConcernID and (so.ReturnDate>=@FromDate and so.ReturnDate<=@ToDate)
),0)

---cash purchase
set @TotalExpense =@TotalExpense+ ISNULL((
select SUM(po.RecAmt) From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID
),0)

--cash deposite
set @TotalExpense =@TotalExpense+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=1 and bt.ConcernID=@ConcernID
),0)

-----------------Income----------------
set @TotalIncome = @TotalIncome+@OpeningBalance;
--cash collection
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(cc.Amount) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)),0)

--installment collections
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(css.InstallmentAmt) from CreditSales so
join CreditSalesSchedules css on so.CreditSalesID=css.CreditSalesID
where so.ConcernID=@ConcernID and (css.PaymentDate>=@FromDate and PaymentDate<=@ToDate) and so.IsStatus=1 and (css.InstallmentAmt>0 and css.PaymentStatus='Paid')),0)

--direct income
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(ex.Amount) from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=2
),0)

--hire sales downpayment
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(so.DownPayment) from CreditSales so
where so.ConcernID=@ConcernID and ( so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1),0)

--cash sales
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(so.RecAmount) from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1
),0)

--cash withdraw from bank
set @TotalIncome =@TotalIncome+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=2 and bt.ConcernID=@ConcernID
),0)

IF(@TotalIncome-@TotalExpense!=0)
BEGIN
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('Current Assests',0.00,'',0.00,0)
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('Cash in hand',@TotalIncome-@TotalExpense,'',0.00,1)
END
-------------------------------------------Cash in the bank--------------------------------------------
set @TotalIncome=0
set @TotalExpense=0
--Deposit
set @TotalIncome= ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=1 and bt.ConcernID=@ConcernID),0)
--Collection from Customer
set @TotalIncome=@TotalIncome+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=3 and bt.CustomerID!=0 and bt.ConcernID=@ConcernID
),0)

--Withdraw
set @TotalExpense= ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=2 and bt.ConcernID=@ConcernID
),0)

--Delivery to suppliers
set @TotalExpense=@TotalExpense+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=4 and bt.ConcernID=@ConcernID and bt.SupplierID!=0
),0)

IF(@TotalIncome-@TotalExpense!=0)
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('Cash in bank',@TotalIncome-@TotalExpense,'',0.00,2)

--------------------------------------------Direct Expense-----------------------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select exi.Description,Amount,'',0.00,3 from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=1

---------------------------------------------Purchase----------------------------------------
DECLARE @CashCollection decimal(18,2)

Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select 'Purchase',po.GrandTotal,'',0.00,4 From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID

---------------------------------------Transfer In and Transfer Receivables--------------------
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select 'Transfer In',(td.Quantity*td.PRate),'',0.00,4 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.ToConcernID=@ConcernID and t.WFStatus=4


--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select 'Transfer Receivables',(td.Quantity*td.PRate),'',0.00,4 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.FromConcernID=@ConcernID and t.WFStatus=4

----------------------------------------Adjustment------------------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select 'Adjustment',cc.AdjustAmt,'',0.0,8 from CashCollections cc
where cc.ConcernID=@ConcernID and cc.AdjustAmt>0 and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)

Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select 'Adjustment',css.LastPayAdjust,'',0.0,8 from CreditSales so
join CreditSalesSchedules css on so.CreditSalesID=css.CreditSalesID
where so.ConcernID=@ConcernID and (css.PaymentDate>=@FromDate and css.PaymentDate<=@ToDate) and so.IsStatus=1 and (css.LastPayAdjust>0 and css.PaymentStatus='Paid')

Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select 'Adjustment',so.AdjAmount,'',0.0,8 from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1 and so.AdjAmount>0

------------------------------------------Discount Given---------------------------------
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select 'Discount Given',so.Discount,'',0.0,7 from CreditSales so
--where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1 and so.Discount>0

--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select 'Discount Given',so.NetDiscount,'',0.0,7 from SOrders so
--where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1 and so.NetDiscount>0

------------------------------------------Sales Return------------------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select 'Sales Return',so.GrandTotal,'',0.0,7 from ROrders so
where so.ConcernID=@ConcernID and (so.ReturnDate>=@FromDate and so.ReturnDate<=@ToDate)

----------------------------------------------Customer Due---------------------------------
Declare @TotalSaleAmt  decimal(18,2)

Set @TotalSaleAmt= ISNULL((
select SUM(so.TotalAmount) from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and  so.InvoiceDate<=@ToDate) and so.Status=1),0)

--Set @TotalSaleAmt=@TotalSaleAmt+ ISNULL((
--select SUM(so.OpeningDue) from Customers so
--where so.ConcernID=@ConcernID and (so.CreatedDate<=@ToDate)),0)

Set @TotalSaleAmt=@TotalSaleAmt+ ISNULL((
select SUM(so.NetAmount) from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1),0)


--
set @CashInHandPos = ISNULL((
select SUM(cc.Amount+cc.AdjustAmt) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)),0)

Set @CashInHandPos=@CashInHandPos+  ISNULL((
select SUM(so.RecAmount) from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1 and so.RecAmount>0),0)

Set @CashInHandPos=@CashInHandPos+  ISNULL((
select SUM(so.GrandTotal-so.PaidAmount) from ROrders so
where so.ConcernID=@ConcernID and (so.ReturnDate>=@FromDate and so.ReturnDate<=@ToDate) and  (so.GrandTotal-so.PaidAmount)!=0),0)

set @CashInHandPos =@CashInHandPos+ ISNULL((
select SUM(so.DownPayment) from CreditSales so
where so.ConcernID=@ConcernID and ( so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1),0)

set @CashInHandPos =@CashInHandPos+ ISNULL((
select SUM(css.InstallmentAmt+css.LastPayAdjust) from CreditSales so
join CreditSalesSchedules css on so.CreditSalesID=css.CreditSalesID
where so.ConcernID=@ConcernID and (css.PaymentDate>=@FromDate and css.PaymentDate<=@ToDate) and so.IsStatus=1 and (css.InstallmentAmt>0 and css.PaymentStatus='Paid')),0)

set @CashInHandPos = @CashInHandPos+ISNULL((select SUM(cc.AdjustAmt) from CashCollections cc
where cc.ConcernID=@ConcernID and cc.AdjustAmt>0 and (cc.EntryDate>=@FromDate and  cc.EntryDate<=@ToDate) and (cc.TransactionType=1 and cc.CustomerID!=0)),0)

set @CashInHandPos = @CashInHandPos+ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=3 and bt.CustomerID!=0 and bt.ConcernID=@ConcernID
),0)
IF(@TotalSaleAmt-@CashInHandPos!=0)
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('Customer Due',@TotalSaleAmt-@CashInHandPos,'',0,7)


----------------------------------------Stock Value Start------------------------------------------
declare @TotalPOAmt decimal(18,2)
declare @TotalPOReturn decimal(18,2)
declare @TotalSales decimal(18,2)
declare @TotalSalesReturn decimal(18,2)

--set  @TotalPOAmt=ISNULL((select Sum(pod.Quantity*pod.UnitPrice) From POrders po
--join POrderDetails pod on po.POrderID = pod.POrderID
--where (po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID),0.00)

--set  @TotalPOAmt=@TotalPOAmt+ISNULL((select Sum(td.Quantity*td.PRate) From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.TransferDate<=@ToDate) and t.Status=1 and t.ToConcernID=@ConcernID and t.WFStatus=4),0.00)

--set  @TotalPOReturn=ISNULL((select Sum(pod.Quantity*pod.UnitPrice) From POrders po
--join POrderDetails pod on po.POrderID = pod.POrderID
--where (po.OrderDate<=@ToDate) and po.Status=5 and po.ConcernID=@ConcernID),0.00)



--set @TotalSales=ISNULL((select Sum(st.PRate*sod.Quantity) from SOrders so
--join SOrderDetails sod on so.SOrderID = sod.SOrderID
--join StockDetails st on sod.SDetailID = st.SDetailID
--where so.ConcernID=@ConcernID and (so.InvoiceDate<=@ToDate) and so.Status=1),0)

--set  @TotalSales=@TotalSales+ISNULL((select Sum(td.Quantity*td.PRate) From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.TransferDate<=@ToDate) and t.Status=1 and t.FromConcernID=@ConcernID and t.WFStatus=4),0.00)

--set @TotalSalesReturn=ISNULL((select Sum(st.PRate*sod.Quantity) from SOrders so
--join SOrderDetails sod on so.SOrderID = sod.SOrderID
--join StockDetails st on sod.SDetailID = st.SDetailID
--where so.ConcernID=@ConcernID and (so.InvoiceDate<=@ToDate) and so.Status=4),0)

--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('Stock',(@TotalPOAmt+@TotalSalesReturn-@TotalPOReturn-@TotalSales),0.00,7)

---------------------------------------Stock Value End-------------------------------

---------------------------Current Assests-------------------------------------------
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) 
--select h.Name,i.Amount,'',0.00,7 from ShareInvestmentHeads h
--join ShareInvestments i on i.SIHID = h.SIHID
--join ShareInvestmentHeads p on h.ParentId = p.SIHID
--where p.Name='Current Asset' and h.ConcernID=@ConcernID and (i.EntryDate>=@FromDate and i.EntryDate<=@ToDate)


----------------------------Fixed Assests--------------------------------------------
--declare @Fixedasset decimal(18,2)
--set @Fixedasset = ISNULL((
--select sum(i.Amount) from ShareInvestmentHeads h
--join ShareInvestments i on i.SIHID = h.SIHID
--join ShareInvestmentHeads p on h.ParentId = p.SIHID
--where p.Name='Fixed Asset' and h.ConcernID=@ConcernID and (i.EntryDate>=@FromDate and i.EntryDate<=@ToDate)
--),0)

--if(@Fixedasset!=0)
--BEGIN
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('Fixed Assests',0,'',0,8)

--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) 
--select h.Name,i.Amount,'',0.00,8 from ShareInvestmentHeads h
--join ShareInvestments i on i.SIHID = h.SIHID
--join ShareInvestmentHeads p on h.ParentId = p.SIHID
--where p.Name='Fixed Asset' and h.ConcernID=@ConcernID and (i.EntryDate>=@FromDate and i.EntryDate<=@ToDate)

--END 

--****************************************************
--***************Debit End****************************
--****************************************************



--****************************************************
--***************Credit Start*************************
--****************************************************

--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('',0.00,'Liabilities',0.00,0)

-----------------------------------Transfer Out and Transfer Payable---------------------------------------------
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select '',0.00,'Transfer Out',(td.Quantity*td.PRate),5 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.FromConcernID=@ConcernID and t.WFStatus=4

--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
--select '',0.00,'Transfer Payable',(td.Quantity*td.PRate),5 From Transfers t
--join TransferDetails td on t.TransferID = td.TransferID
--where (t.ApprovedDate>=@FromDate and t.ApprovedDate<=@ToDate) and t.Status=1 and t.ToConcernID=@ConcernID and t.WFStatus=4

-------------------------------------Direct Income-------------------------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select '',0.00,exi.Description,ex.Amount,4 from Expenditures ex
join ExpenseItems exi on ex.ExpenseItemID = exi.ExpenseItemID
where ex.ConcernID=@ConcernID and (ex.EntryDate>=@FromDate and ex.EntryDate<=@ToDate) and exi.Status=2

-------------------------------------Retail and hire Sales----------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select '',0.00,'Sales',so.TotalAmount,1 from SOrders so
where so.ConcernID=@ConcernID and (so.InvoiceDate>=@FromDate and so.InvoiceDate<=@ToDate) and so.Status=1

Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select '',0.00,'Sales',so.NetAmount-so.InterestAmount,1 from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1

--------------------------------------Purchase Discount------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select '',0.00,'Purchase Discount',po.NetDiscount,2 From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID and po.NetDiscount>0

-----------------------------------------Hire Interest--------------------------
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select '',0.00,'Hire Interest',so.InterestAmount,3 from CreditSales so
where so.ConcernID=@ConcernID and (so.SalesDate>=@FromDate and so.SalesDate<=@ToDate) and so.IsStatus=1 and so.InterestAmount>0


----------------------------------------Supplier Due----------------------------
declare @SupplierDue decimal(18,2)
declare @CashDelivery decimal(18,2)

set @SupplierDue = ISNULL((
select Sum(po.TotalAmt) From POrders po
where po.Status=1 and po.ConcernID=@ConcernID and (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate)),0)

--set @SupplierDue =@SupplierDue+ ISNULL((
--select Sum(po.OpeningDue) From Suppliers po
--where (po.ConcernID=@ConcernID)),0)

set @CashDelivery =ISNULL((
select sum(cc.Amount+cc.AdjustAmt) from CashCollections cc
where cc.ConcernID=@ConcernID and (cc.EntryDate>=@FromDate and cc.EntryDate<=@ToDate) and (cc.TransactionType=2 and cc.SupplierID!=0)),0)

set @CashDelivery =@CashDelivery+ ISNULL((
select Sum(po.RecAmt) From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=1 and po.ConcernID=@ConcernID),0)

set @CashDelivery =@CashDelivery+ ISNULL((
select Sum(po.PaymentDue) From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=5 and po.ConcernID=@ConcernID),0)

set @CashDelivery=@CashDelivery+ ISNULL((
select SUM(bt.Amount) From BankTransactions bt
where (bt.TranDate>=@FromDate and bt.TranDate<=@ToDate) and bt.TransactionType=4 and bt.ConcernID=@ConcernID and bt.SupplierID!=0
),0)

IF(@SupplierDue-@CashDelivery!=0)
Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('',0,'Supplier Due',@SupplierDue-@CashDelivery,6)


-----------------------------Purchase Return---------------------------

Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum)
select '',0.00,'Purchase Return',po.TotalAmt,7 From POrders po
where (po.OrderDate>=@FromDate and po.OrderDate<=@ToDate) and po.Status=5 and po.ConcernID=@ConcernID

-----------------------------Owner's equity-----------------------------
--set @Fixedasset =0

--set @Fixedasset = ISNULL((
--select sum(i.Amount) from ShareInvestmentHeads h
--join ShareInvestments i on i.SIHID = h.SIHID
--join ShareInvestmentHeads p on h.ParentId = p.SIHID
--where p.Name='Fixed Asset' and h.ConcernID=@ConcernID and (i.EntryDate>=@FromDate and i.EntryDate<=@ToDate)
--),0)

--set @Fixedasset =@Fixedasset+ ISNULL((
--select sum(i.Amount) from ShareInvestmentHeads h
--join ShareInvestments i on i.SIHID = h.SIHID
--join ShareInvestmentHeads p on h.ParentId = p.SIHID
--where p.Name='Current Asset' and h.ConcernID=@ConcernID and (i.EntryDate>=@FromDate and i.EntryDate<=@ToDate)
--),0)

--if(@Fixedasset!=0)
--BEGIN
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('',0.00,'Owners equity',0,8)
--Insert Into #temp(DebitParticulars,Debit,CreditParticulars,Credit,SerialNum) values ('',0.00,'Capital',@Fixedasset,9)
--END

--****************************************************
--***************Credit End***************************
--****************************************************

select SerialNum, DebitParticulars,sum(Debit) 'Debit',CreditParticulars,sum(Credit) 'Credit' from #temp
group by DebitParticulars,CreditParticulars,SerialNum
order by SerialNum asc
END
GO


--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.CreditSalesSchedules ADD
	LastPayAdjust decimal(18, 2) NOT NULL CONSTRAINT DF_CreditSalesSchedules_LastPayAdjust DEFAULT 0
GO
ALTER TABLE dbo.CreditSalesSchedules SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
--******************Date: 13-07-20*******************
--***************************************************
--exec sp_MonthlyCashInHand'2020-01-01 00:00:00','2020-01-31 23:59:59','1'
--EXEC sp_DailyCashInHand  '01 Feb 2019 12:00:00 AM','07 Feb 2019 11:59:59 PM',1
CREATE procedure [dbo].[sp_YearlyCashInHand] (@FromDate datetime, @ToDate datetime, @ConcernID int)
as
declare @id int
declare @total decimal(18, 2)
declare @CashInHand decimal(18, 2)
declare @StartDate date
declare @InitailDate date

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
set @StartDate = '2019-02-02'
set @CashInHand = 0

if(@ConcernID=4)
set @StartDate = '2019-02-09'


if (@ConcernID = 1)
	set @CashInHand = 1263.00
else if (@ConcernID = 5)
	set @CashInHand = 8755.00
else if (@ConcernID = 6)
	set @CashInHand = - 2.00
else if (@ConcernID = 4)
	set @CashInHand = 65000.00
else if (@ConcernID = 20)
BEGIN
	set @CashInHand = 137340.00
	set @StartDate = '2020-03-12'
END

set @CashInHand=@CashInHand+isnull(( select sum(Amount) from ShareInvestments  SI
join  ShareInvestmentHeads SIH on SIH.SIHID=SI.SIHID 
join ShareInvestmentHeads ph on SIH.ParentId=ph.SIHID
where SIH.ConcernID=@ConcernID and ph.Name='Current Asset'
),0)

create table #temp_Data1 (TransDate date, id int IDENTITY(1, 1), Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

create table #temp_Data2 (TransDate date, id int IDENTITY(1, 1), Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

create table #temp_Data3 (TransDate date, id int, Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

set @InitailDate=@StartDate
---------------------------------------------------------------------------------------------------------------------------------------
while (@StartDate) < DATEADD(YEAR, 1, Convert(date, GetDate()))
begin
print @StartDate

delete
from #temp_Data1

delete
from #temp_Data2

-- DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
-- DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
insert into #temp_Data1
select @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
set @total = isnull((
select sum(RecAmt)
from POrders
where ConcernID = @ConcernID and status = 1   and Year(Convert(date, OrderDate)) = Year(@StartDate) and  OrderDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

---------------------------------Expense from Bank Deposit--------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 1 and Year(Convert(date, TranDate)) = Year(@StartDate) and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 1   and Year(Convert(date, TranDate)) = Year(@StartDate) and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3  and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3  and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Expens from Bank Cash Delivery---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4  and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Expense from Fund Out---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5  and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
set @total = isnull((
select sum(Amount)
from CashCollections
where ConcernID = @ConcernID   and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate and TransactionType = 2
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, 'Cash Delivery to Supplier', @total, 'Due Collection', 0, 'Cash'


-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and  EntryDate>= @InitailDate 
				and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 4
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data1 values(@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		insert into #temp_Data1
		select @StartDate,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount,'', 0, 'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID
		and Year(Convert(date, EntryDate)) = Year(@StartDate) and  EntryDate>= @InitailDate  and TransactionType = 4
		END

------------------------------------------------------Expense in Product return----------------------------------
set @total = isnull((
select sum(PaidAmount)
from ROrders
where ConcernID = @ConcernID  and Year(Convert(date, ReturnDate)) = Year(@StartDate)  and  ReturnDate>= @InitailDate 
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'


------------- -------------------------------------------- Direct Expense--------------------------------------------
if (
(
isnull((
select sum(Amount)
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 1   and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
), 0)
) != 0
)
begin
insert into #temp_Data1
select @StartDate as TransDate, E.Description, sum(Amount), '', 0, 'EX'
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 1   and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
group by E.Description
end

-- ----------------------------Expens from ShareInvestment ----------------------------------------
SET @total = isnull((
 SELECT sum(Amount)
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name='Liability Pay'and SI.ConcernID=@ConcernID AND TransactionType = 2 AND Year(Convert(date, EntryDate)) = Year(@StartDate) and  EntryDate>= @InitailDate
 ), 0)
IF (@total != 0)
 INSERT INTO #temp_Data1
 SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name='Liability Pay' and SI.ConcernID=@ConcernID AND TransactionType = 2 AND Year(Convert(date, EntryDate)) = Year(@StartDate) and  EntryDate>= @InitailDate
 GROUP BY SIH.Name
-- ----------------------------Expens from ShareInvestment ----------------------------------------
--SET @total = isnull((
-- SELECT sum(Amount)
-- FROM ShareInvestments SI
-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
-- WHERE ParentId = 2 AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate)  AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
-- ), 0)
--IF (@total != 0)
-- INSERT INTO #temp_Data1
-- SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
-- FROM ShareInvestments SI
-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
-- WHERE ParentId IN (2) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate)  AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
-- GROUP BY SIH.Name
----------------------------------------------Opening Cash In Hand in Income Table---------------------------------------------------------------
insert into #temp_Data2
select @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

-----------------------------------------------Income in Sales Order-------------------------------------------
set @total = isnull((
select sum(RecAmount)
from SOrders
where ConcernID = @ConcernID and status = 1 and Year(Convert(date, InvoiceDate)) = Year(@StartDate)  and  InvoiceDate>= @InitailDate
), 0)

if (@total != 0)
BEGIN
insert into #temp_Data2 values(@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

insert into #temp_Data2
select @StartDate 'TransDate', 'Cash Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, so.RecAmount, 'Order' from SOrders so
join Customers c on so.CustomerID = c.CustomerID
where so.ConcernID = @ConcernID and status = 1  and Year(Convert(date, InvoiceDate)) = Year(@StartDate)  and  InvoiceDate>= @InitailDate
   END
---------------------------------Income from Bank Withdwal--------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 2  and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 2   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4  and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Income from Bank Cash Collection---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

----------------------------------------Income from Fund IN------------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.AnotherBankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.AnotherBankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5   and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

-- ---------------------------------------Income from Cash Collection from Customer-------------------
set @total = isnull((
select sum(Amount)
from CashCollections
where ConcernID = @ConcernID   and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1  and  EntryDate>= @InitailDate
), 0)

if (@total != 0)
BEGIN
insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

insert into #temp_Data2
select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, 'Cash'
from CashCollections cc
join Customers c on cc.CustomerID = c.CustomerID
where cc.ConcernID = @ConcernID   and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate and TransactionType = 1
END


-------------------------------------------------------- income Cash saving by customer------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID
				and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3 and  EntryDate>= @InitailDate 
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Saving', 0.00, 'Cash Saving', 0.00, 'Header')

	insert into #temp_Data2
	select @StartDate,'',0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, 'Cash'
	from CashCollections cc
	join Customers c on cc.CustomerID = c.CustomerID
	where cc.ConcernID = @ConcernID
	and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3 and  EntryDate>= @InitailDate 
	END

-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
set @total = isnull((
select isnull(sum(DownPayment), 0)
from CreditSales
where ConcernID = @ConcernID and IsStatus = 1  and Year(Convert(date, SalesDate)) = Year(@StartDate)  and  SalesDate>= @InitailDate
), 0)

if (@total != 0)
BEGIN
insert into #temp_Data2 values(@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')
insert into #temp_Data2
select @StartDate, '', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, DownPayment, 'DownPayment'
from CreditSales cs
join Customers c on cs.CustomerID = c.CustomerID
where cs.ConcernID = @ConcernID and IsStatus = 1   and Year(Convert(date, SalesDate)) = Year(@StartDate)  and  SalesDate>= @InitailDate
END
--------------------------------------Income in Purchase Product return----------------------------------
set @total = isnull((
select sum(RecAmt)
from POrders
where ConcernID = @ConcernID  and Year(Convert(date, OrderDate)) = Year(@StartDate)  and  OrderDate>= @InitailDate and status = 5
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

-------------------------------Income Installment Collection from Creditsales------------------
set @total = isnull((
select sum(InstallmentAmt)
from CreditSalesSchedules css
inner join CreditSales cs on css.CreditSalesID = cs.CreditSalesID
where ConcernID = @ConcernID AND css.InstallmentAmt!=0 and cs.IsStatus = 1 and PaymentStatus = 'Paid'  and Year(Convert(date, PaymentDate)) = Year(@StartDate)  and PaymentDate >= @InitailDate
), 0)

if (@total != 0)
BEGIN
   insert into #temp_Data2 values(@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

insert into #temp_Data2
select @StartDate, '', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, InstallmentAmt, 'InstallmentCollection'
from CreditSalesSchedules css
inner join CreditSales cs on css.CreditSalesID = cs.CreditSalesID
inner join Customers c on cs.CustomerID = c.CustomerID
where cs.ConcernID = @ConcernID AND  css.InstallmentAmt!=0  and cs.IsStatus = 1 and PaymentStatus = 'Paid'  and Year(Convert(date, PaymentDate)) = Year(@StartDate)  and  PaymentDate>= @InitailDate
END
-----------------------------------Income from Direct Income------------------------------------------------
if (
(
isnull((
select sum(Amount)
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 2  and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
), 0)
) != 0
)
BEGIN
   insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

insert into #temp_Data2
select @StartDate as TransDate, '', 0, E.Description, sum(Amount), 'EX'
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 2  and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
group by E.Description
end

-- ----------------------------Income from ShareInvestment ----------------------------------------
SET @total = isnull((
 SELECT sum(Amount)
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name = 'Liability Receive' and SI.ConcernID=@ConcernID AND TransactionType = 1 AND Year(Convert(date, EntryDate)) = Year(@StartDate) and  EntryDate>= @InitailDate
 ), 0)
IF (@total != 0)
 INSERT INTO #temp_Data2
 SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name = 'Liability Receive' and SI.ConcernID=@ConcernID AND TransactionType = 1 AND Year(Convert(date, EntryDate)) = Year(@StartDate) and  EntryDate>= @InitailDate
 GROUP BY SIH.Name

--insert into #temp_Data3
--select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00),
--	(case when T2.Module is null then ( case when T1.Module is null then '' else T1.Module end) else T2.Module end )
--from #temp_Data1 T1
--full join #temp_Data2 T2 on T1.id = T2.id

insert into #temp_Data3
select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '',  0.00,T1.Module
from #temp_Data1 T1

insert into #temp_Data3
select @StartDate, isnull(T1.id, 3),  '', isnull(T1.ExpenseAmt, 0.00),  isnull(T1.Income, ''),isnull(T1.IncomeAmt, 0.00),T1.Module
from #temp_Data2 T1

declare @a decimal(18, 2)
declare @b decimal(18, 2)
declare @ExpenseWithinDate decimal(18, 2)
declare @IncomeWithinDate decimal(18, 2)
declare @CashInHandWithinDate decimal(18, 2)

set @a = isnull((
select sum(ExpenseAmt)
from #temp_Data1
where Expense not in ('Total Payable', 'Opening Cash In Hand')
), 0.00)
set @b = isnull((
select sum(IncomeAmt)
from #temp_Data2
where Income not in ('Total Receivable', 'Opening Cash In Hand')
), 0.00)
set @ExpenseWithinDate = isnull((
select sum(ExpenseAmt)
from #temp_Data1
where Expense not in ('Total Payable', 'Opening Cash In Hand') and TransDate >= @FromDate and TransDate <= @ToDate
), 0.00)
set @IncomeWithinDate = isnull((
select sum(IncomeAmt)
from #temp_Data2
where Income not in ('Total Receivable', 'Opening Cash In Hand') and TransDate >= @FromDate and TransDate <= @ToDate
), 0.00)
set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
set @CashInHand = @CashInHand + (@b - @a)

insert into #temp_Data3
values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

insert into #temp_Data3
values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

insert into #temp_Data3
values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

set @StartDate = DATEADD(YEAR, 1, @StartDate)
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)
GO
-------------------------------------------------------------------------------------

--exec sp_MonthlyCashInHand '2020-03-01 00:00:00','2020-03-28 00:00:00','7'
--EXEC sp_DailyCashInHand  '01 Feb 2019 12:00:00 AM','07 Feb 2019 11:59:59 PM',1
Create procedure [dbo].[sp_MonthlyCashInHand] (@FromDate datetime, @ToDate datetime, @ConcernID int)
as
declare @id int
declare @total decimal(18, 2)
declare @CashInHand decimal(18, 2)
declare @StartDate date
declare @InitailDate date

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
set @StartDate = '2019-02-02'
set @CashInHand = 0

if (@ConcernID = 1)
	set @CashInHand = 1263.00
else if (@ConcernID = 5)
	set @CashInHand = 8755.00
else if (@ConcernID = 6)
	set @CashInHand = - 2.00
else if (@ConcernID = 4)
	set @CashInHand = 65000.00

set @CashInHand=@CashInHand+isnull(( select sum(Amount) from ShareInvestments  SI
join  ShareInvestmentHeads SIH on SIH.SIHID=SI.SIHID 
join ShareInvestmentHeads ph on SIH.ParentId=ph.SIHID
where SIH.ConcernID=@ConcernID and ph.Name='Current Asset'
),0)


create table #temp_Data1 (TransDate date, id int IDENTITY(1, 1), Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

create table #temp_Data2 (TransDate date, id int IDENTITY(1, 1), Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

create table #temp_Data3 (TransDate date, id int, Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

set @InitailDate=@StartDate
---------------------------------------------------------------------------------------------------------------------------------------
while (@StartDate) < DATEADD(MONTH, 1, Convert(date, GetDate()))
begin
print @StartDate

delete
from #temp_Data1

delete
from #temp_Data2

-- DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
-- DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
insert into #temp_Data1
select @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
set @total = isnull((
select sum(RecAmt)
from POrders
where ConcernID = @ConcernID and status = 1  and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate) and  OrderDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

---------------------------------Expense from Bank Deposit--------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 1 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate) and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 1  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate) and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Expens from Bank Cash Delivery---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Expense from Fund Out---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
set @total = isnull((
select sum(Amount)
from CashCollections
where ConcernID = @ConcernID  and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate and TransactionType = 2
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, 'Cash Delivery to Supplier', @total, 'Due Collection', 0, 'Cash'

-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and Month(Convert(date, EntryDate)) = Month(@StartDate) and  EntryDate>= @InitailDate 
				and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 4
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data1 values(@StartDate, 'Cash Withdrawal', 0.00, '', 0.00, 'Header')

		insert into #temp_Data1
		select @StartDate,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount,'', 0, 'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID and  Month(Convert(date, EntryDate)) = Month(@StartDate)
		and Year(Convert(date, EntryDate)) = Year(@StartDate) and  EntryDate>= @InitailDate  and TransactionType = 4
		END

------------------------------------------------------Expense in Product return----------------------------------
set @total = isnull((
select sum(PaidAmount)
from ROrders
where ConcernID = @ConcernID  and Month(Convert(date, ReturnDate)) = Month(@StartDate) and Year(Convert(date, ReturnDate)) = Year(@StartDate)  and  ReturnDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data1
select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'


------------- -------------------------------------------- Direct Expense--------------------------------------------
if (
(
isnull((
select sum(Amount)
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 1  and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
), 0)
) != 0
)
begin
insert into #temp_Data1
select @StartDate as TransDate, E.Description, sum(Amount), '', 0, 'EX'
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 1  and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
group by E.Description
end

-- ----------------------------Expens from ShareInvestment ----------------------------------------
SET @total = isnull((
 SELECT sum(Amount)
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name='Liability Pay' and SI.ConcernID=@ConcernID AND TransactionType = 2 AND  Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
 ), 0)
IF (@total != 0)
 INSERT INTO #temp_Data1
 SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name='Liability Pay'and SI.ConcernID=@ConcernID AND TransactionType = 2 AND Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
 GROUP BY SIH.Name
-- ----------------------------Expens from ShareInvestment ----------------------------------------
--SET @total = isnull((
-- SELECT sum(Amount)
-- FROM ShareInvestments SI
-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
-- WHERE ParentId = 2 AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
-- ), 0)
--IF (@total != 0)
-- INSERT INTO #temp_Data1
-- SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
-- FROM ShareInvestments SI
-- INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
-- WHERE ParentId IN (2) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
-- GROUP BY SIH.Name
----------------------------------------------Opening Cash In Hand in Income Table---------------------------------------------------------------
insert into #temp_Data2
select @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

-----------------------------------------------Income in Sales Order-------------------------------------------
set @total = isnull((
select sum(RecAmount)
from SOrders
where ConcernID = @ConcernID and status = 1 and Month(Convert(date, InvoiceDate)) = Month(@StartDate) and Year(Convert(date, InvoiceDate)) = Year(@StartDate)  and  InvoiceDate>= @InitailDate
), 0)

if (@total != 0)
BEGIN
insert into #temp_Data2 values(@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

insert into #temp_Data2
select @StartDate 'TransDate', 'Cash Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, so.RecAmount, 'Order' from SOrders so
join Customers c on so.CustomerID = c.CustomerID
where so.ConcernID = @ConcernID and status = 1  and Month(Convert(date, InvoiceDate)) = Month(@StartDate) and Year(Convert(date, InvoiceDate)) = Year(@StartDate)  and  InvoiceDate>= @InitailDate
   END
---------------------------------Income from Bank Withdwal--------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 2 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 2  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 4 and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

---------------------------------Income from Bank Cash Collection---------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.BankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 3  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

----------------------------------------Income from Fund IN------------------------
set @total = isnull((
select sum(Amount)
from BankTransactions BT
inner join Banks B on BT.AnotherBankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
from BankTransactions BT
inner join Banks B on BT.AnotherBankID = B.BankID
where BT.ConcernID = @ConcernID and TransactionType = 5  and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)  and  TranDate>= @InitailDate
group by B.BankID, B.AccountNo, B.BankName

-- ---------------------------------------Income from Cash Collection from Customer-------------------
set @total = isnull((
select sum(Amount)
from CashCollections
where ConcernID = @ConcernID  and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1  and  EntryDate>= @InitailDate
), 0)

if (@total != 0)
BEGIN
insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

insert into #temp_Data2
select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, 'Cash'
from CashCollections cc
join Customers c on cc.CustomerID = c.CustomerID
where cc.ConcernID = @ConcernID  and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate and TransactionType = 1
END

-------------------------------------------------------- income Cash saving by customer------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and Month(Convert(date, EntryDate)) = Month(@StartDate) 
				and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3 and  EntryDate>= @InitailDate 
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Saving', 0.00, 'Cash Saving', 0.00, 'Header')

	insert into #temp_Data2
	select @StartDate,'',0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, 'Cash'
	from CashCollections cc
	join Customers c on cc.CustomerID = c.CustomerID
	where cc.ConcernID = @ConcernID and Month(Convert(date, EntryDate)) = Month(@StartDate) 
	and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3 and  EntryDate>= @InitailDate 
	END

-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
set @total = isnull((
select isnull(sum(DownPayment), 0)
from CreditSales
where ConcernID = @ConcernID and IsStatus = 1 and Month(Convert(date, SalesDate)) = Month(@StartDate) and Year(Convert(date, SalesDate)) = Year(@StartDate)  and  SalesDate>= @InitailDate
), 0)

if (@total != 0)
BEGIN
insert into #temp_Data2 values(@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')
insert into #temp_Data2
select @StartDate, '', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, DownPayment, 'DownPayment'
from CreditSales cs
join Customers c on cs.CustomerID = c.CustomerID
where cs.ConcernID = @ConcernID and IsStatus = 1  and Month(Convert(date, SalesDate)) = Month(@StartDate) and Year(Convert(date, SalesDate)) = Year(@StartDate)  and  SalesDate>= @InitailDate
END
--------------------------------------Income in Purchase Product return----------------------------------
set @total = isnull((
select sum(RecAmt)
from POrders
where ConcernID = @ConcernID and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate)  and  OrderDate>= @InitailDate and status = 5
), 0)

if (@total != 0)
insert into #temp_Data2
select @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

-------------------------------Income Installment Collection from Creditsales------------------
set @total = isnull((
select sum(InstallmentAmt)
from CreditSalesSchedules css
inner join CreditSales cs on css.CreditSalesID = cs.CreditSalesID
where ConcernID = @ConcernID AND css.InstallmentAmt!=0 and cs.IsStatus = 1 and PaymentStatus = 'Paid' and Month(Convert(date, PaymentDate)) = Month(@StartDate) and Year(Convert(date, PaymentDate)) = Year(@StartDate)  and PaymentDate >= @InitailDate
), 0)

if (@total != 0)
BEGIN
   insert into #temp_Data2 values(@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

insert into #temp_Data2
select @StartDate, '', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, InstallmentAmt, 'InstallmentCollection'
from CreditSalesSchedules css
inner join CreditSales cs on css.CreditSalesID = cs.CreditSalesID
inner join Customers c on cs.CustomerID = c.CustomerID
where cs.ConcernID = @ConcernID AND  css.InstallmentAmt!=0  and cs.IsStatus = 1 and PaymentStatus = 'Paid' and Month(Convert(date, PaymentDate)) = Month(@StartDate) and Year(Convert(date, PaymentDate)) = Year(@StartDate)  and  PaymentDate>= @InitailDate
END
-----------------------------------Income from Direct Income------------------------------------------------
if (
(
isnull((
select sum(Amount)
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 2 and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
), 0)
) != 0
)
BEGIN
   insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

insert into #temp_Data2
select @StartDate as TransDate, '', 0, E.Description, sum(Amount), 'EX'
from Expenditures EX
inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
where EX.ConcernID = @ConcernID and E.status = 2 and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
group by E.Description
end

-- ----------------------------Income from ShareInvestment ----------------------------------------
SET @total = isnull((
 SELECT sum(Amount)
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE  SIH.Name = 'Liability Receive'and SI.ConcernID=@ConcernID AND TransactionType = 1 AND  Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
 ), 0)
IF (@total != 0)
 INSERT INTO #temp_Data2
 SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
 FROM ShareInvestments SI
 INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
 WHERE SIH.Name = 'Liability Receive' and SI.ConcernID=@ConcernID AND TransactionType = 1 AND Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)  and  EntryDate>= @InitailDate
 GROUP BY SIH.Name

--insert into #temp_Data3
--select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00),
--	(case when T2.Module is null then ( case when T1.Module is null then '' else T1.Module end) else T2.Module end )
--from #temp_Data1 T1
--full join #temp_Data2 T2 on T1.id = T2.id

insert into #temp_Data3
select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), '',  0.00,T1.Module
from #temp_Data1 T1

insert into #temp_Data3
select @StartDate, isnull(T1.id, 3),  '', isnull(T1.ExpenseAmt, 0.00),  isnull(T1.Income, ''),isnull(T1.IncomeAmt, 0.00),T1.Module
from #temp_Data2 T1

declare @a decimal(18, 2)
declare @b decimal(18, 2)
declare @ExpenseWithinDate decimal(18, 2)
declare @IncomeWithinDate decimal(18, 2)
declare @CashInHandWithinDate decimal(18, 2)

set @a = isnull((
select sum(ExpenseAmt)
from #temp_Data1
where Expense not in ('Total Payable', 'Opening Cash In Hand')
), 0.00)
set @b = isnull((
select sum(IncomeAmt)
from #temp_Data2
where Income not in ('Total Receivable', 'Opening Cash In Hand')
), 0.00)
set @ExpenseWithinDate = isnull((
select sum(ExpenseAmt)
from #temp_Data1
where Expense not in ('Total Payable', 'Opening Cash In Hand') and TransDate >= @FromDate and TransDate <= @ToDate
), 0.00)
set @IncomeWithinDate = isnull((
select sum(IncomeAmt)
from #temp_Data2
where Income not in ('Total Receivable', 'Opening Cash In Hand') and TransDate >= @FromDate and TransDate <= @ToDate
), 0.00)
set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
set @CashInHand = @CashInHand + (@b - @a)

insert into #temp_Data3
values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

insert into #temp_Data3
values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

insert into #temp_Data3
values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

set @StartDate = DATEADD(MONTH, 1, @StartDate)
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)
GO


-------------------------------------------------------------------------------------

--exec sp_DailyCashInHand '2020-03-28 00:00:00','2020-03-28 00:00:00','7'
alter procedure [dbo].[sp_DailyCashInHand] (@FromDate datetime, @ToDate datetime, @ConcernID int)
as
declare @id int
declare @total decimal(18, 2)
declare @CashInHand decimal(18, 2)
declare @StartDate date

--Deposit = 1,
--Withdraw = 2,
--CashCollection = 3,
--CashDelivery = 4,
--FundTransfer = 5
set @StartDate = '2019-02-02'
set @CashInHand = 0

if (@ConcernID = 1)
	set @CashInHand = 1263.00
else if (@ConcernID = 5)
	set @CashInHand = 8755.00
else if (@ConcernID = 6)
	set @CashInHand = - 2.00
else if (@ConcernID = 4)
	set @CashInHand = 65000.00

set @CashInHand=@CashInHand+isnull(( select sum(Amount) from ShareInvestments  SI
join  ShareInvestmentHeads SIH on SIH.SIHID=SI.SIHID 
join ShareInvestmentHeads ph on SIH.ParentId=ph.SIHID
where SIH.ConcernID=@ConcernID and ph.Name='Current Asset'
),0)

create table #temp_Data1 (TransDate date, id int IDENTITY(1, 1), Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

create table #temp_Data2 (TransDate date, id int IDENTITY(1, 1), Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

create table #temp_Data3 (TransDate date, id int, Expense varchar(250), ExpenseAmt decimal(18, 2), Income varchar(250), IncomeAmt decimal(18, 2), Module varchar(250))

---------------------------------------------------------------------------------------------------------------------------------------
while (@StartDate) < DATEADD(DAY, 1, Convert(date, GetDate()))
begin
	print @StartDate

	delete
	from #temp_Data1

	delete
	from #temp_Data2

	--	DBCC CHECKIDENT (#temp_Data1, RESEED, 0)
	--	DBCC CHECKIDENT (#temp_Data2, RESEED, 0)
	------------------------------------------------------  Opening Cash In Hand----------------------------------------------------------------
	insert into #temp_Data1
	select @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	--------------- -------------------------------------------- From Purchase Order-------------------------------------------------------------
	set @total = isnull((
				select sum(RecAmt)
				from POrders
				where ConcernID = @ConcernID and status = 1 and DAY(Convert(date, OrderDate)) = DAY(@StartDate) and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Cash Paid', @total, 'Cash Sales', 0, 'Header'

	---------------------------------Expense from Bank Deposit--------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 1 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, B.AccountNo + ',' + B.BankName + '(Bank Deposit)', sum(Amount), 'Bank Deposit', 0, 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 1 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Bank Cash Collection as Bank Deposit---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, B.AccountNo + ',' + B.BankName + '(Customer Collection(Cr))', sum(Amount), 'Bank Cash Collection as Bank Deposit', 0, 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	---------------------------------Expens from Bank Cash Delivery---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 4 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Cr))', sum(Amount), 'Bank Cash Delivery', 0, 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 4 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	---------------------------------Expense from Fund Out---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, B.AccountNo + ',' + B.BankName + '(Fund Out)', sum(Amount), 'Bank Fund Out', 0, 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	-------------------------------------------------------- Expense Cash Delivery to Supplier------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 2
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Cash Delivery to Supplier', @total, 'Due Collection', 0, 'Cash'
-------------------------------------------------------- Expense Cash withdrawal from saving account by customer------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) 
				and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 4
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data1 values(@StartDate, 'Cash Withdrawal', 0.00, 'Cash Withdrawal', 0.00, 'Header')

		insert into #temp_Data1
		select @StartDate,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount,'', 0, 'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) 
		and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 4
		END

------------------------------------------------------Expense in Product return----------------------------------
	set @total = isnull((
				select sum(PaidAmount)
				from ROrders
				where ConcernID = @ConcernID and DAY(Convert(date, ReturnDate)) = DAY(@StartDate) and Month(Convert(date, ReturnDate)) = Month(@StartDate) and Year(Convert(date, ReturnDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data1
		select @StartDate, 'Sales Return', @total, 'Sales Return', 0, 'Cash'


	------------- -------------------------------------------- Direct Expense--------------------------------------------
	if (
			(
				isnull((
						select sum(Amount)
						from Expenditures EX
						inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
						where EX.ConcernID = @ConcernID and E.status = 1 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	begin
		insert into #temp_Data1
		select @StartDate as TransDate, E.Description, sum(Amount), '', 0, 'EX'
		from Expenditures EX
		inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
		where EX.ConcernID = @ConcernID and E.status = 1 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
		group by E.Description
	end

	-- ----------------------------Expens from ShareInvestment ----------------------------------------
	--SET @total = isnull((
	--			SELECT sum(Amount)
	--			FROM ShareInvestments SI
	--			INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--			WHERE ParentId = 4 AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--			), 0)
	--IF (@total != 0)
	--	INSERT INTO #temp_Data1
	--	SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
	--	FROM ShareInvestments SI
	--	INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
	--	WHERE ParentId IN (4) AND SIH.ConcernID=@ConcernID AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
	--	GROUP BY SIH.Name
	 ----------------------------Expens from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.Name='Liability Pay' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)
	IF (@total != 0)
		INSERT INTO #temp_Data1
		SELECT @StartDate, SIH.Name, sum(Amount), 'Liabilities Paid', 0, 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.Name='Liability Pay' AND SIH.ConcernID=@ConcernID) AND TransactionType = 2 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name
	----------------------------------------------Opening Cash In Hand in Income Table--------------------------------------------------------------- 
	insert into #temp_Data2
	select @StartDate, '', 0, 'Opening Cash In Hand', @CashInHand, 'CashInHand'

	-----------------------------------------------Income in Sales Order-------------------------------------------
	set @total = isnull((
				select sum(RecAmount)
				from SOrders
				where ConcernID = @ConcernID and status = 1 and DAY(Convert(date, InvoiceDate)) = DAY(@StartDate) and Month(Convert(date, InvoiceDate)) = Month(@StartDate) and Year(Convert(date, InvoiceDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data2 values(@StartDate, 'Cash Sales', 0.00, 'Cash Sales', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate 'TransDate', 'Cash Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, so.RecAmount, 'Order' from SOrders so
		join Customers c on so.CustomerID = c.CustomerID
		where so.ConcernID = @ConcernID and status = 1 and DAY(Convert(date, InvoiceDate)) = DAY(@StartDate) and Month(Convert(date, InvoiceDate)) = Month(@StartDate) and Year(Convert(date, InvoiceDate)) = Year(@StartDate)
   END
	---------------------------------Income from Bank Withdwal--------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 2 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Withdwal', 0, B.AccountNo + ',' + B.BankName + '(Withdrawal)', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 2 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	---------------------------------Income from Bank Cash Delivery as withdrwal---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 4 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Cash Delivery as withdrwal', 0, B.AccountNo + ',' + B.BankName + '(Supplier Payment(Dr))', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 4 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	---------------------------------Income from Bank Cash Collection---------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.BankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Cash Collection', 0, B.AccountNo + ',' + B.BankName + '(Customer Collection(Dr))', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.BankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 3 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	----------------------------------------Income from Fund IN------------------------
	set @total = isnull((
				select sum(Amount)
				from BankTransactions BT
				inner join Banks B on BT.AnotherBankID = B.BankID
				where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Bank Fund IN', 0, B.AccountNo + ',' + B.BankName + '(Fund In)', sum(Amount), 'Cash'
		from BankTransactions BT
		inner join Banks B on BT.AnotherBankID = B.BankID
		where BT.ConcernID = @ConcernID and TransactionType = 5 and DAY(Convert(date, TranDate)) = DAY(@StartDate) and Month(Convert(date, TranDate)) = Month(@StartDate) and Year(Convert(date, TranDate)) = Year(@StartDate)
		group by B.BankID, B.AccountNo, B.BankName

	-- ---------------------------------------Income from Cash Collection from Customer-------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Collections', 0.00, 'Cash Collections', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate, 'Due Paid', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, 'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 1
		END

-------------------------------------------------------- income Cash saving by customer------------------------------------------------------------------------
	set @total = isnull((
				select sum(Amount)
				from CashCollections
				where ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) 
				and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3
				), 0)

	if (@total != 0)
	BEGIN
	insert into #temp_Data2 values(@StartDate, 'Cash Saving', 0.00, 'Cash Saving', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate,'',0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, cc.Amount, 'Cash'
		from CashCollections cc
		join Customers c on cc.CustomerID = c.CustomerID
		where cc.ConcernID = @ConcernID and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) 
		and Year(Convert(date, EntryDate)) = Year(@StartDate) and TransactionType = 3
		END
	-- ------------------------------------Income DownPayment from CreditSales   ----------------------------
	set @total = isnull((
				select isnull(sum(DownPayment), 0)
				from CreditSales
				where ConcernID = @ConcernID and IsStatus = 1 and DAY(Convert(date, SalesDate)) = DAY(@StartDate) and Month(Convert(date, SalesDate)) = Month(@StartDate) and Year(Convert(date, SalesDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
	BEGIN
		insert into #temp_Data2 values(@StartDate, 'DownPayment', 0.00, 'DownPayment', 0.00, 'Header')
		insert into #temp_Data2
		select @StartDate, '', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, DownPayment, 'DownPayment'
		from CreditSales cs
		join Customers c on cs.CustomerID = c.CustomerID
		where cs.ConcernID = @ConcernID and IsStatus = 1 and DAY(Convert(date, SalesDate)) = DAY(@StartDate) and Month(Convert(date, SalesDate)) = Month(@StartDate) and Year(Convert(date, SalesDate)) = Year(@StartDate)
	END
	--------------------------------------Income in Purchase Product return----------------------------------
	set @total = isnull((
				select sum(RecAmt)
				from POrders
				where ConcernID = @ConcernID and DAY(Convert(date, OrderDate)) = DAY(@StartDate) and Month(Convert(date, OrderDate)) = Month(@StartDate) and Year(Convert(date, OrderDate)) = Year(@StartDate) and status = 5
				), 0)

	if (@total != 0)
		insert into #temp_Data2
		select @StartDate, 'Purchase Return', 0, 'Purchase Return', @total, 'Cash'

	-------------------------------Income Installment Collection from Creditsales------------------
	set @total = isnull((
				select sum(InstallmentAmt)
				from CreditSalesSchedules css
				inner join CreditSales cs on css.CreditSalesID = cs.CreditSalesID
				where ConcernID = @ConcernID AND css.InstallmentAmt!=0 and cs.IsStatus = 1 and PaymentStatus = 'Paid' and DAY(Convert(date, PaymentDate)) = DAY(@StartDate) and Month(Convert(date, PaymentDate)) = Month(@StartDate) and Year(Convert(date, PaymentDate)) = Year(@StartDate)
				), 0)

	if (@total != 0)
	BEGIN
	    insert into #temp_Data2 values(@StartDate, 'Installment Collection', 0.00, 'Installment Collection', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate, '', 0,RTrim(c.Code)+','+ c.Name+','+c.ContactNo, InstallmentAmt, 'InstallmentCollection'
		from CreditSalesSchedules css
		inner join CreditSales cs on css.CreditSalesID = cs.CreditSalesID
		inner join Customers c on cs.CustomerID = c.CustomerID
		where cs.ConcernID = @ConcernID AND  css.InstallmentAmt!=0  and cs.IsStatus = 1 and PaymentStatus = 'Paid' and DAY(Convert(date, PaymentDate)) = DAY(@StartDate) and Month(Convert(date, PaymentDate)) = Month(@StartDate) and Year(Convert(date, PaymentDate)) = Year(@StartDate)
	END
	-----------------------------------Income from Direct Income------------------------------------------------
	if (
			(
				isnull((
						select sum(Amount)
						from Expenditures EX
						inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
						where EX.ConcernID = @ConcernID and E.status = 2 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
						), 0)
				) != 0
			)
	BEGIN
	    insert into #temp_Data2 values(@StartDate, 'Direct Income', 0.00, 'Direct Income', 0.00, 'Header')

		insert into #temp_Data2
		select @StartDate as TransDate, '', 0, E.Description, sum(Amount), 'EX'
		from Expenditures EX
		inner join ExpenseItems E on E.ExpenseItemID = EX.ExpenseItemID
		where EX.ConcernID = @ConcernID and E.status = 2 and DAY(Convert(date, EntryDate)) = DAY(@StartDate) and Month(Convert(date, EntryDate)) = Month(@StartDate) and Year(Convert(date, EntryDate)) = Year(@StartDate)
		group by E.Description
	end

	-- ----------------------------Income from ShareInvestment ----------------------------------------
	SET @total = isnull((
				SELECT sum(Amount)
				FROM ShareInvestments SI
				INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
				WHERE (SIH.Name = 'Liability Receive' AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
				), 0)

	IF (@total != 0)
		INSERT INTO #temp_Data2
		SELECT @StartDate, 'Liabilites Received', 0, SIH.Name, sum(Amount), 'Cash'
		FROM ShareInvestments SI
		INNER JOIN ShareInvestmentHeads SIH ON SI.SIHID = SIH.SIHID
		WHERE (SIH.Name = 'Liability Receive' AND SIH.ConcernID=@ConcernID) AND TransactionType = 1 AND DAY(Convert(DATE, EntryDate)) = DAY(@StartDate) AND Month(Convert(DATE, EntryDate)) = Month(@StartDate) AND Year(Convert(DATE, EntryDate)) = Year(@StartDate)
		GROUP BY SIH.Name


	insert into #temp_Data3
	select @StartDate, isnull(T1.id, 3), isnull(T1.Expense, ''), isnull(T1.ExpenseAmt, 0.00), isnull(T2.Income, ''), isnull(T2.IncomeAmt, 0.00),
	(case when T2.Module is null then ( case when T1.Module is null then '' else T1.Module end) else T2.Module end )
	from #temp_Data1 T1
	full join #temp_Data2 T2 on T1.id = T2.id

	declare @a decimal(18, 2)
	declare @b decimal(18, 2)
	declare @ExpenseWithinDate decimal(18, 2)
	declare @IncomeWithinDate decimal(18, 2)
	declare @CashInHandWithinDate decimal(18, 2)

	set @a = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand')
				), 0.00)
	set @b = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand')
				), 0.00)
	set @ExpenseWithinDate = isnull((
				select sum(ExpenseAmt)
				from #temp_Data1
				where Expense not in ('Total Payable', 'Opening Cash In Hand') and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @IncomeWithinDate = isnull((
				select sum(IncomeAmt)
				from #temp_Data2
				where Income not in ('Total Receivable', 'Opening Cash In Hand') and TransDate >= @FromDate and TransDate <= @ToDate
				), 0.00)
	set @CashInHandWithinDate = @IncomeWithinDate - @ExpenseWithinDate
	set @CashInHand = @CashInHand + (@b - @a)

	insert into #temp_Data3
	values (@StartDate, 2, 'Total Payable', @a, 'Total Receivable', @b, 'Total')

	insert into #temp_Data3
	values (@StartDate, 2, 'Current Cash In Hand', @CashInHandWithinDate, '', 0, 'CashInHand')

	insert into #temp_Data3
	values (@StartDate, 2, 'Closing Cash In Hand', @CashInHand, 'Closing Cash In Hand', @CashInHand, 'CashInHand')

	set @StartDate = DATEADD(DAY, 1, @StartDate)
end

select Convert(datetime, TransDate) as TransDate, id, Expense, ExpenseAmt, Income, IncomeAmt,Module
from #temp_Data3
where Convert(date, TransDate) >= Convert(date, @FromDate) and Convert(date, TransDate) <= Convert(date, @ToDate)
GO


-------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ShareInvestmentHeads](
	[SIHID] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](250) NOT NULL,
	[Name] [varchar](250) NOT NULL,
	[ParentId] [int] NOT NULL,
	[ConcernID] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_InvestmentHeads] PRIMARY KEY CLUSTERED 
(
	[SIHID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ShareInvestmentHeads]  WITH CHECK ADD  CONSTRAINT [FK_ShareInvestmentHeads_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[ShareInvestmentHeads] CHECK CONSTRAINT [FK_ShareInvestmentHeads_SisterConcerns]
GO


-------------------------------------------------------------------------------------


CREATE TABLE [dbo].[ShareInvestments](
	[SIID] [int] IDENTITY(1,1) NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[Purpose] [varchar](250) NOT NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[SIHID] [int] NOT NULL,
	[TransactionType] [int] NOT NULL,
	[CreatedBy] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[ModifiedBy] [int] NULL,
	[ModifiedDate] [datetime] NULL,
	[ConcernID] [int] NOT NULL,
 CONSTRAINT [PK_ShareInvestment] PRIMARY KEY CLUSTERED 
(
	[SIID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ShareInvestments] ADD  CONSTRAINT [DF_ShareInvestment_InvestmentAmt]  DEFAULT ((0)) FOR [Amount]
GO

ALTER TABLE [dbo].[ShareInvestments] ADD  CONSTRAINT [DF_ShareInvestment_InvestmentType]  DEFAULT ((0)) FOR [SIHID]
GO

ALTER TABLE [dbo].[ShareInvestments]  WITH CHECK ADD  CONSTRAINT [FK_ShareInvestment_ShareInvestmentHeads] FOREIGN KEY([SIHID])
REFERENCES [dbo].[ShareInvestmentHeads] ([SIHID])
GO

ALTER TABLE [dbo].[ShareInvestments] CHECK CONSTRAINT [FK_ShareInvestment_ShareInvestmentHeads]
GO

ALTER TABLE [dbo].[ShareInvestments]  WITH CHECK ADD  CONSTRAINT [FK_ShareInvestments_SisterConcerns] FOREIGN KEY([ConcernID])
REFERENCES [dbo].[SisterConcerns] ([ConcernID])
GO

ALTER TABLE [dbo].[ShareInvestments] CHECK CONSTRAINT [FK_ShareInvestments_SisterConcerns]
GO


-------------------------------------------------------------------------------------



--***************************************************
--******************Date: 25-11-19*******************
--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.StockDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROrderDetails ADD CONSTRAINT
	FK_ROrderDetails_StockDetails FOREIGN KEY
	(
	StockDetailID
	) REFERENCES dbo.StockDetails
	(
	SDetailID
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 
	
GO
ALTER TABLE dbo.ROrderDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROrderDetails
	DROP CONSTRAINT FK_ReturnDetails_ReturnDetails
GO
ALTER TABLE dbo.StockDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROrderDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT
--***************************************************
drop proc sp_AddReturnOrder
drop type InsertReturnOrderTable
drop type InsertReturnOrderDetailTable


CREATE TYPE [dbo].[InsertReturnOrderTable] AS TABLE(
	[InvoiceDate] [datetime] NULL,
	[InvoiceNo] [varchar](150) NULL,
	[VatPercentage] [decimal](18, 2) NULL,
	[VatAmount] [decimal](18, 2) NULL,
	[GrandTotal] [decimal](18, 2) NULL,
	[TDiscountPercentage] [decimal](18, 2) NULL,
	[TDiscountAmount] [decimal](18, 2) NULL,
	[RecAmt] [decimal](18, 2) NULL,
	[PaymentDue] [decimal](18, 2) NULL,
	[TotalAmount] [decimal](18, 2) NULL,
	[TotalDue] [decimal](18, 2) NULL,
	[AdjAmount] [decimal](18, 2) NULL,
	[Status] [int] NULL,
	[CustomerId] [int] NULL,
	[ConcernId] [int] NULL,
	[CreatedBy] [int] NULL,
	[CreateDate] [datetime] NULL,
	[TotalOffer] [decimal](18, 2) NULL,
	[NetDiscount] [decimal](18, 2) NULL,
	[Remarks] [varchar](500) NULL
)
GO

CREATE TYPE [dbo].[InsertReturnOrderDetailTable] AS TABLE(
	[SOrderDetailID] [int] NULL,
	[ProductId] [int] NULL,
	[StockDetailId] [int] NULL,
	[ColorId] [int] NULL,
	[Status] [int] NULL,
	[Quantity] [decimal](18, 2) NULL,
	[UnitPrice] [decimal](18, 4) NULL,
	[TAmount] [decimal](18, 4) NULL,
	[PPDisPer] [decimal](18, 4) NULL,
	[PPDisAmt] [decimal](18, 4) NULL,
	[MrpRate] [decimal](18, 4) NULL,
	[PPOffer] [decimal](18, 4) NULL,
	[SFTRate] [decimal](18, 4) NULL
)
GO




--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROrders ADD
	Remarks nvarchar(MAX) NULL
GO
ALTER TABLE dbo.ROrders SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************
/* To prevent any potential data loss issues, you should review this script in detail before running it outside the context of the database designer.*/
BEGIN TRANSACTION
SET QUOTED_IDENTIFIER ON
SET ARITHABORT ON
SET NUMERIC_ROUNDABORT OFF
SET CONCAT_NULL_YIELDS_NULL ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
COMMIT
BEGIN TRANSACTION
GO
ALTER TABLE dbo.ROrderDetails ADD
	SFTRate decimal(18, 4) NOT NULL CONSTRAINT DF_ROrderDetails_SFTRate DEFAULT 0,
	TotalSFT decimal(18, 4) NOT NULL CONSTRAINT DF_ROrderDetails_TotalSFT DEFAULT 0
GO
ALTER TABLE dbo.ROrderDetails SET (LOCK_ESCALATION = TABLE)
GO
COMMIT

--***************************************************


Create PROC [dbo].[sp_AddReturnOrder] (
@SalesOrder [InsertReturnOrderTable] readonly,
@SODetails [InsertReturnOrderDetailTable] readonly,
@ROrderID INT OUTPUT,
@Result INT OUTPUT
)
AS
DECLARE @SalesOrderId INT

BEGIN TRY
	BEGIN TRANSACTION

	INSERT INTO ROrders (InvoiceNo, ReturnDate, GrandTotal, CustomerID, PaidAmount, ConcernID,Remarks, CreatedBy, CreateDate, ModifiedBy, ModifiedDate)
   (SELECT InvoiceNo, InvoiceDate, GrandTotal, CustomerID, RecAmt, ConcernID,Remarks, CreatedBy, CreateDate, CreatedBy, CreateDate FROM @SalesOrder)

	SET @SalesOrderId = SCOPE_IDENTITY()

	DECLARE @ProductID INT
	DECLARE @StockID INT
	DECLARE @SDetailID INT
	DECLARE @ColorID INT
	DECLARE @SalesRate Decimal(18,4)
	DECLARE @PRate Decimal(18,4)
	DECLARE @POrderDetailID INT
	DECLARE @SOrderDetailID INT
	DECLARE @Quantity INT
	DECLARE @SalesQty INT
	DECLARE @UnitPrice  Decimal(18,4)
	DECLARE @MRPRate Decimal(18,4)
	DECLARE @SFTPerPCS  Decimal(18,4)
	DECLARE @SFTRate  Decimal(18,4)

	DECLARE cur CURSOR LOCAL
	FOR
	SELECT sod1.ProductID, sod1.ColorID, sod1.Quantity,std.SDetailID,
	(CASE WHEN p.BundleQty=0 THEN p.PurchaseCSft/pu.ConvertValue ELSE p.PurchaseCSft/p.BundleQty END) as 'SFTPerPCS',sod1.SFTRate
	FROM @SODetails sod1
	JOIN StockDetails std ON sod1.StockDetailId = std.SDetailID
	JOIN Products p on sod1.ProductID = p.ProductID
	JOIN ProductUnitTypes pu on p.UnitType = pu.ProUnitTypeID

	OPEN cur

	FETCH NEXT
	FROM cur
	INTO @ProductID, @ColorID, @Quantity,@SDetailID,@SFTPerPCS,@SFTRate

	WHILE @@FETCH_STATUS = 0
	BEGIN
		WHILE @Quantity != 0
		BEGIN
			SET @SOrderDetailID = (
					SELECT min(sod.SOrderDetailID)
					FROM SOrderDetails sod
					JOIN SOrders SO ON sod.SOrderID = SO.SOrderID
					JOIN @SODetails sod1 ON sod1.ProductId = sod.ProductID
					JOIN @SalesOrder so1 ON so1.CustomerID = SO.CustomerID
					WHERE IsProductReturn != 1 and SO.Status=1 and SOD.Quantity-SOD.RQuantity>0 and SOD.ProductID=@ProductID and SOD.SDetailID=@SDetailID
						--sod.SDetailID>  @SOrderDetailID  and 
					)
			--and sod.ProductID=7088 and CustomerID=4
			SET @SalesQty = (
					SELECT sum(quantity - RQuantity)
					FROM SOrderDetails
					WHERE SOrderDetailID = @SOrderDetailID
					)
			SET @SDetailID = (
					SELECT min(SDetailID)
					FROM SOrderDetails
					WHERE SOrderDetailID = @SOrderDetailID
					)

			IF (@SalesQty > @Quantity)
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @Quantity,TotalSFT=TotalSFT+(@Quantity*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @Quantity,TotalSFT=TotalSFT+(@Quantity*@SFTPerPCS)
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 0, RQuantity = RQuantity + @Quantity
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate) 
				(SELECT @SalesOrderId, ProductId, @Quantity, UnitPrice, TAmount, @SDetailID, ColorId, 1, @SalesQty, @Quantity, @SOrderDetailID,(@Quantity*@SFTPerPCS),@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID
				)

				SET @Quantity = 0
			END
			ELSE IF (@SalesQty < @Quantity)
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 1, RQuantity = RQuantity + @SalesQty
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate) 
				(SELECT @SalesOrderId, ProductId, @SalesQty, UnitPrice, TAmount, @SDetailID, @ColorID, 2, @SalesQty, @Quantity, @SOrderDetailID,(@SalesQty*@SFTPerPCS),@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID)

				SET @Quantity = @Quantity - @SalesQty
			END
					--Check No 3
			ELSE
			BEGIN
				SET @StockID = (
						SELECT StockID
						FROM StockDetails
						WHERE SDetailID = @SDetailID
						)

				UPDATE Stocks
				SET Quantity = Quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE StockID = @StockID

				UPDATE stockdetails
				SET quantity = quantity + @SalesQty,TotalSFT=TotalSFT+(@SalesQty*@SFTPerPCS)
				WHERE sdetailid = @SDetailID

				UPDATE SOrderDetails
				SET IsProductReturn = 1, RQuantity = RQuantity + @SalesQty
				WHERE SOrderDetailID = @SOrderDetailID

				INSERT INTO ROrderDetails (ROrderID, ProductID, Quantity, UnitPrice, UTAmount, StockDetailID, ColorID, CheckNo, SQty, Quant, SID,TotalSFT,SFTRate)
				(SELECT @SalesOrderId, ProductId, @SalesQty, UnitPrice, TAmount, @SDetailID, @ColorID, 3, @SalesQty, @Quantity, @SOrderDetailID,(@SalesQty*@SFTPerPCS),@SFTRate FROM @SODetails sod
				 where sod.ProductId=@ProductID and sod.ColorId=@ColorID)

				SET @Quantity = 0
			END
		END

		FETCH NEXT
		FROM cur
		INTO @ProductID, @ColorID, @Quantity,@SDetailID,@SFTPerPCS,@SFTRate
	END

	UPDATE Customers
	SET Customers.TotalDue = (Customers.TotalDue - s.TotalDue)
	FROM @SalesOrder s
	JOIN Customers ON Customers.CustomerID = s.CustomerID

	UPDATE StockDetails
	SET StockDetails.STATUS = 1
	FROM @SODetails s
	JOIN StockDetails ON StockDetails.SDetailID = s.StockDetailId
	JOIN Products ON Products.ProductID = StockDetails.ProductID
	WHERE Products.ProductType != 2
	COMMIT
	Select @Result=1,@ROrderID=@SalesOrderId

END TRY

BEGIN CATCH
	IF @@TRANCOUNT > 0
		ROLLBACK

	Select @Result=0,@ROrderID=0
END CATCH

UPDATE SOrderDetails
SET RQuantity = 0
WHERE RQuantity IS NULL