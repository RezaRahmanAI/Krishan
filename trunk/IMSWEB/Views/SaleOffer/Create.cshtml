@using IMSWEB.Model
@model IMSWEB.CreateSaleOfferViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " SaleOffer";
}
<h4>@(ViewBag.Title + ".")</h4>
<hr />
@using (Html.BeginForm(actionName, "SaleOffer", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.OfferID)
    <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.OfferCode, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.OfferCode, new { htmlAttributes = new { @class = "form-control input-sm" } })
                @Html.ValidationMessageFor(model => model.OfferCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProductID, new { @class = "control-label col-md-3", autofocus = "autofocus" })
            <div class="col-md-9">
                @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Product, id = (Model != null && Model.ProductID != null) ? Model.ProductID : "0" });}
                @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-3", autofocus = "autofocus" })
            <div class="col-md-9">
                <div class='input-group date' id='FromDate'>
                    <input type='text' class="input-sm form-control input-sm" name='FromDate' />
                    <span class="input-group-addon">
                        <i class="fa fa-calendar" aria-hidden="true"></i>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-3", autofocus = "autofocus" })
            <div class="col-md-9">
                <div class='input-group date' id='ToDate'>
                    <input type='text' class="input-sm form-control input-sm" name='ToDate' />
                    <span class="input-group-addon">
                        <i class="fa fa-calendar" aria-hidden="true"></i>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control input-sm" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OfferType, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(model => model.OfferType, new SelectList(Enum.GetValues(typeof(IMSWEB.Model.EnumSalesOfferType))), new { @class = "form-control input-sm" })
                @Html.ValidationMessageFor(model => model.OfferType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OfferValue, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.OfferValue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01"} })
                @Html.ValidationMessageFor(model => model.OfferValue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ThresholdValue, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.ThresholdValue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01" } })
                @Html.ValidationMessageFor(model => model.ThresholdValue, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownListFor(model => model.Status, new SelectList(Enum.GetValues(typeof(IMSWEB.Model.EnumOfferStatus))), new { @class = "form-control input-sm" })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12 pull-right">
                <input type="submit" value="Add Sale Offer" class="btn btn-sm btn-primary" />
            </div>
        </div>

    </div>

    @*<div class="col-md-6">
        <div class="form-group">
            <div class="col-md-12 pull-right">
                <input type="submit" value="Add Sale Offer" class="btn btn-sm btn-primary" />
            </div>
        </div>
    </div>*@

}

<script>
    $(function () {
        $('#FromDate').datetimepicker({
            @{
                if (Model == null || Model.FromDate == null)
                {
                    @:defaultDate: moment(),
                }
                else
                {
                    @:defaultDate: '@(Convert.ToDateTime(Model.FromDate).ToString("dd-MMM-yyyy"))',
                }
                
                    @:format: 'DD-MMM-YYYY'
             }
        });

        $('#ToDate').datetimepicker({
        @{
            if (Model == null || Model.ToDate == null)
            {
                @:defaultDate: moment(),
            }
            else
            {
                @:defaultDate: '@(Convert.ToDateTime(Model.ToDate).ToString("dd-MMM-yyyy"))',
            }                
            @:format: 'DD-MMM-YYYY'
       }
    });


    });
</script>


