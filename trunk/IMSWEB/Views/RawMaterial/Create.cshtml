@using IMSWEB.Model
@model IMSWEB.CreateProductViewModel
@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    string controller = ViewContext.RouteData.Values["controller"].ToString();
    ViewBag.Title = actionName + " Raw Materials";
}
<h4 class="inline-header">@(ViewBag.Title + ".")</h4>
@using (Html.BeginForm(actionName, controller, new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
{
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-default">
                <div class="panel-body">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ProductId)
                    @Html.HiddenFor(m => m.PicturePath)
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Code, new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(m => m.Code, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                    @Html.ValidationMessageFor(m => m.Code, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.ProductName, new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(m => m.ProductName, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="IDCodeDiv" style="display:none">
                                @Html.LabelFor(m => m.IDCode, new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(m => m.IDCode, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                    @Html.ValidationMessageFor(m => m.IDCode, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" style="display:none">
                                @Html.LabelFor(m => m.CompanyId, new { @class = "control-label col-md-3" })
                                <div class="col-md-8" style="padding-right:0px !important">
                                    @Html.HiddenFor(m => m.CompanyId, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.EditorFor(m => m.CompanyName, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.ValidationMessageFor(m => m.CompanyId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-left:10px !important">
                                    <button id="btnAddCompany" type="button" class="btn btn-xs btn-info">
                                        <i class="fa fa-plus-circle" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="form-group" style="display:none">
                                @Html.LabelFor(m => m.CategoryId, new { @class = "control-label col-md-3" })
                                <div class="col-md-8" style="padding-right:0px !important">
                                    @Html.HiddenFor(m => m.CategoryId, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.EditorFor(m => m.CategoryName, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.ValidationMessageFor(m => m.CategoryId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-left:10px !important">
                                    <button id="btnAddCategory" type="button" class="btn btn-xs btn-info">
                                        <i class="fa fa-plus-circle" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>


                            <div class="form-group" style="display:none">
                                @Html.LabelFor(m => m.SizeID, new { @class = "control-label col-md-3" })
                                <div class="col-md-8" style="padding-right:0px !important">
                                    @Html.HiddenFor(m => m.SizeID, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.EditorFor(m => m.SizeName, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.ValidationMessageFor(m => m.SizeID, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-1" style="padding-left:10px !important">
                                    <button id="btnAddSize" type="button" class="btn btn-xs btn-info">
                                        <i class="fa fa-plus-circle" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>

                            @*<div class="form-group">
                                    @Html.LabelFor(m => m.DiaSizeID, new { @class = "control-label col-md-3" })
                                    <div class="col-md-8" style="padding-right:0px !important">
                                        @if ((User.Identity.GetConcernId() == 19))
                                        {
                                            @Html.HiddenFor(m => m.DiaSizeID, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                            @Html.EditorFor(m => m.DiaSizeName, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                        }
                                        else
                                        {
                                            @Html.HiddenFor(m => m.DiaSizeID, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus", @readonly = "readonly" } })
                                            @Html.EditorFor(m => m.DiaSizeName, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus", @readonly = "readonly" } })
                                        }
                                        @Html.ValidationMessageFor(m => m.DiaSizeID, "", new { @class = "text-danger" })
                                    </div>
                                    @if ((User.Identity.GetConcernId() == 19))
                                    {
                                        <div class="col-md-1" style="padding-left:10px !important">
                                            <button id="btnAddDiaSize" type="button" class="btn btn-xs btn-info">
                                                <i class="fa fa-plus-circle" aria-hidden="true"></i>
                                            </button>
                                        </div>
                                    }
                                    else
                                    {

                                    }
                                </div>*@






                            @*<div class="form-group">
                                    @Html.LabelFor(m => m.SizeID, new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Size, id = (Model != null && Model.SizeID != 0) ? Model.SizeID : 0 });}
                                        @Html.ValidationMessageFor(m => m.SizeID, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@
                            <div class="form-group" style="display:none">
                                @Html.LabelFor(m => m.DP, new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(m => m.DP, new { htmlAttributes = new { @class = "form-control input-sm text-right", @type = "number" } })
                                    @Html.ValidationMessageFor(m => m.DP, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" style="display:none">
                                @Html.LabelFor(m => m.MRP, new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(m => m.MRP, new { htmlAttributes = new { @class = "form-control input-sm text-right", @type = "number" } })
                                    @Html.ValidationMessageFor(m => m.MRP, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" style="display:none">
                                @Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @*"--Select a type--",*@
                                    @Html.EnumDropDownListFor(model => model.ProductType, "--Select Type--", new { @class = "form-control input-sm" })
                                    @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="NonKg">
                                @Html.LabelFor(model => model.UnitType, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.UnitType, new SelectList(Model.ProductUnitTypes, "ProUnitTypeID", "Description"), "--Select an unit--", new { @class = "form-control input-sm" })
                                    @Html.ValidationMessageFor(model => model.UnitType, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="BundleQtyDiv" style="display:none">
                                @Html.LabelFor(m => m.BundleQty, new { @class = "control-label col-md-3", @id = "lblUnitQty" })
                                <div class="col-md-9">
                                    @Html.EditorFor(m => m.BundleQty, new { htmlAttributes = new { @class = "form-control input-sm text-right", @type = "number" } })
                                    @Html.ValidationMessageFor(m => m.BundleQty, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-3 col-md-9">
                                    <input type="submit" class="btn btn-sm btn-primary" value="Add Product" />
                                </div>
                            </div>
                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.CompressorWarrentyMonth, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.CompressorWarrentyMonth, new { htmlAttributes = new { @class = "form-control input-sm  text-right" } })
                                        @Html.ValidationMessageFor(model => model.CompressorWarrentyMonth, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <select class="form-control input-sm" name="Compressor">
                                            <option value="Month(s)">Month(s)</option>
                                            <option selected value="Years(s)">Years(s)</option>
                                        </select>
                                    </div>
                                </div>*@
                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.PanelWarrentyMonth, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.PanelWarrentyMonth, new { htmlAttributes = new { @class = "form-control input-sm  text-right" } })
                                        @Html.ValidationMessageFor(model => model.PanelWarrentyMonth, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <select class="form-control input-sm" name="Panel">
                                            <option value="Month(s)">Month(s)</option>
                                            <option selected value="Years(s)">Years(s)</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ServiceWarrentyMonth, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-5">
                                        @Html.EditorFor(model => model.ServiceWarrentyMonth, new { htmlAttributes = new { @class = "form-control input-sm  text-right" } })
                                        @Html.ValidationMessageFor(model => model.ServiceWarrentyMonth, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4">
                                        <select class="form-control input-sm" name="Service">
                                            <option value="Month(s)">Month(s)</option>
                                            <option selected value="Years(s)">Years(s)</option>
                                        </select>
                                    </div>
                                </div>*@

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


}

<div id="newEntryModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <p class="modal-title" id="addNewHeader">Add New</p>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label id="lblName" class="control-label col-md-3">Name:</label>
                            <div class="col-md-6">
                                <input type="text" class="form-control input-sm" autofocus id="newName" />
                                <input type="hidden" id="entryType" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger btn-xs" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-info btn-xs" id="btnAddCompanyCategory">Add</button>
            </div>
        </div>

    </div>
</div>

<script src="~/Scripts/productConfig.js"></script>

<script>

    $('#chkIsKG').change(function () {
        if ($(this).is(':checked')) {
            $(this).val(true);

            $('#PTypeKG').show();
            $('#NonKg').hide();
        } else {
            $(this).val(false);
            /*            $('#UnitType').val('N');*/
            $('#NonKg').show();
            $('#PTypeKG').hide();
        }
    });

</script>
@*<script type="text/javascript">
        $(document).ready(function () {
            IDCodeToggle();
            UnitTypeToggle();
            $("#UnitType").select2();

            $(document).on('hidden.bs.modal', '#CategoriesModal', function () {
                IDCodeToggle();
            });
            $("#UnitType").change(function () {
                UnitTypeToggle();
            });

        });

        function IDCodeToggle() {
            if ($("#CategoriesName").val() == "Tiles")
                $("#IDCodeDiv").show();
            else
                $("#IDCodeDiv").hide();
        }

        function UnitTypeToggle() {
            var Select = $("#UnitType option:selected").text();
            if (Select.indexOf("Carton") >= 0 || Select.indexOf("Box") >= 0 || Select.indexOf("Bundle") >= 0 || Select.indexOf("Packet") >= 0) {
                $("#BundleQtyDiv").show();
                $("#lblUnitQty").text(Select);
            }
            else
                $("#BundleQtyDiv").hide();
        }
    </script>*@