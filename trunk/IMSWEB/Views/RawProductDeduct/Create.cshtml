@using IMSWEB.Model
@model PurchaseReturnOrderViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    string controller = ViewContext.RouteData.Values["controller"].ToString();
    ViewBag.Title = actionName + " Raw Stock Deduct";
}
<h4 class="inline-header">@(ViewBag.Title + ".")</h4>
@using (Html.BeginForm(actionName, controller, new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurchaseOrder.ChallanNo, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            @Html.EditorFor(m => m.PurchaseOrder.ChallanNo, new { htmlAttributes = new { @class = "input-sm form-control input-sm" } })
                                            @Html.ValidationMessageFor(m => m.PurchaseOrder.ChallanNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurchaseOrder.OrderDate, new { @class = "control-label col-md-4" })
                                        <div class="col-md-8">
                                            <div class='input-group date' id='OrderDate'>
                                                <input type='text' class="input-sm form-control input-sm" name='OrderDate' />
                                                <span class="input-group-addon">
                                                    <i class="fa fa-calendar" aria-hidden="true"></i>
                                                </span>
                                            </div>
                                        </div>
                                        @Html.ValidationMessageFor(m => m.PurchaseOrder.OrderDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            @*<div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.PurchaseOrder.SupplierId, new { @class = "control-label col-md-2" })
                                            <div class="col-md-10 full-width-picker">
                                                @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Supplier, id = (Model != null && !string.IsNullOrEmpty(Model.PurchaseOrder.SupplierId)) ? Model.PurchaseOrder.SupplierId : "0" });}
                                                @Html.ValidationMessageFor(m => m.PurchaseOrder.SupplierId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                </div>*@
                            @*<div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.PurchaseOrder.CurrentDue, new { @class = "control-label col-md-4" })
                                            <div class="col-md-8">
                                                @Html.EditorFor(m => m.PurchaseOrder.CurrentDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(m => m.PurchaseOrder.CurrentDue, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>*@
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            @*<div class="form-group">
                                    <input autofocus="autofocus" class="input-sm form-control text-box single-line" id="externalIMENo" name="externalIMENo" style="margin-left: 5px !important;margin-right: 5px !important; width:98%;" type="text" value="">
                                    <span style="display:none" class="text-danger" id="externalIMENoErrorID">IMEI not avaiable in stock.</span>
                                </div>*@
                            <div class="form-group">
                                @Html.LabelFor(m => m.POProductDetails.ProductId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.SupplierProducts, id = (Model != null && !string.IsNullOrEmpty(Model.POProductDetails.ProductId)) ? Model.POProductDetails.ProductId : "0" });}
                                    @Html.ValidationMessageFor(m => m.POProductDetails.ProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">

                            <div class="form-group">
                                @Html.LabelFor(m => m.POProductDetails.ParentQuantity, new { @class = "control-label col-md-4", id = "lblParentUnit" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.POProductDetails.ParentQuantity, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1 } })
                                    @Html.ValidationMessageFor(m => m.POProductDetails.ParentQuantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="divChildQuantity">
                                @Html.LabelFor(m => m.POProductDetails.ChildQuantity, new { @class = "control-label col-md-4", id = "lblChildUnit" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.POProductDetails.ChildQuantity, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1 } })
                                    @Html.ValidationMessageFor(m => m.POProductDetails.ChildQuantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.POProductDetails.ConvertValue, new { @class = "control-label col-md-4", id = "lblConvertValue" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.POProductDetails.ConvertValue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1, @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.POProductDetails.ConvertValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.POProductDetails.Quantity, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.HiddenFor(m => m.POProductDetails.TempCurrentQuantity, new { htmlAttributes = new { @class = "input-sm form-control", @readonly = "readonly" } })
                                    @Html.EditorFor(m => m.POProductDetails.Quantity, new { htmlAttributes = new { @class = "input-sm form-control text-right", @type = "number", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.POProductDetails.Quantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="pull-right btn-group">
                        <input type="submit" id="btnAdd" class="btn btn-sm btn-primary mr-1" name="addButton" value="Add to order" />
                        <button type="reset" class="btn btn-sm btn-danger">Clear</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel">
                <div class="panel-body">
                    <table id="productIdentifierTable"
                           data-toggle="table"
                           data-height="238"
                           class="table table-responsive table-bordered table-striped" cellspacing="0" width="100%">
                        <thead>
                            <tr>
                                <th>
                                    Sl
                                </th>
                                <th data-field="code">
                                    Name
                                </th>
                                <th data-field="Quantity">
                                    Quantity
                                </th>
                                @*<th>
                        P. Rate
                    </th>*@
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.POProductDetailList != null)
                            {
                                int i = 1;
                                decimal Qty = 0;
                                foreach (var item in Model.POProductDetailList)
                                {
                                    Qty = Math.Round((Convert.ToDecimal(@item.Quantity) / Convert.ToDecimal(@item.ConvertValue)), 4);
                                    <tr>
                                        <td width="5%">@i</td>
                                        <td width="26.84%">@item.ProductName</td>
                                        <td width="15%">
                                            @Qty
                                            @*<input type="text" class="form-control input-sm input-sm" readonly value="@item.Quantity" />*@
                                        </td>
                                        @*<td>
                                @item.PRate
                            </td>*@
                                        <td>
                                            @Html.ActionLink("Delete", "DeleteFromView", new { SDetailID = item.SDetailID })
                                        </td>
                                    </tr>
                                    i++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="panel">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                @Html.LabelFor(m => m.PurchaseOrder.Remarks, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(m => m.PurchaseOrder.Remarks, new { htmlAttributes = new { @class = "input-sm form-control input-smt", type = "text", step = "0.01" } })
                                    @Html.ValidationMessageFor(m => m.PurchaseOrder.Remarks, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <button type="button" class="btn btn-sm btn-info mr-1">Preview</button>
                                <input type="submit" class="btn btn-sm btn-primary" name="submitButton" value="Save order" />
                            </div>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
}


<script>
    $(document).ready(function () {
        $(window).keydown(function (event) {
            if (event.keyCode == 10 || event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });
    });

    $('#OrderDate').datetimepicker({
        @{
                if (Model == null || Model.PurchaseOrder.OrderDate == null) {
                    @:defaultDate: moment(),
                                                                                                                            }
                else
                {
            @:defaultDate: '@(Convert.ToDateTime(Model.PurchaseOrder.OrderDate).ToString("dd-MMM-yyyy"))',
                                                                                                                    }
            @:format: 'DD-MMM-YYYY'
                                                                                                                            }
    });



    $(document).on('input', '#PurchaseOrder_RecieveAmount', function () {
        var NetTotal = parseFloat($("#PurchaseOrder_TotalAmount").val());
        var ReturnAmt = parseFloat($(this).val());
        var PaymentDue = NetTotal - ReturnAmt;
        $("#PurchaseOrder_PaymentDue").val(PaymentDue);
    });


        //*******************************************
    //**********Scan IMEI Start******************
    //*******************************************

   //biplob

    var timer = null;

    $(document).on('change', '#chkManualIMEIInput', function () {
        if (timer) {
            clearTimeout(timer); //cancel the previous timer.
            timer = null;
        }
        timer = settimeout(function () {
            $("#externalimeno").trigger("input");
        }, 500)

    });



    $("#externalIMENo").on("input", function () {

        if (timer) {
            clearTimeout(timer); //cancel the previous timer.
            timer = null;
        }

   /*     $("#externalIMENoErrorID").hide();*/


        timer = setTimeout(function () {
            $.ajax({
                url: "/SalesOrder/GetProductDetailByIMEINo",
                type: "GET",
                data: { 'imeiNo': $("#externalIMENo").val() },
                dataType: "json",
                success: function (data) {
                  /*  setPickerControls(data);*/
                    if (data.status == false) {
                        console.log();
                        toastr.error(data.msg);
                    }
                    else {
                         setPickerControls(data);

                    }
                     $("#externalIMENo").val('');
                     $("#externalIMENo").attr('autofocus', 'autofocus');


                },
                error: function (err) {
                    clearPickerControls();
                    console.error(JSON.stringify(err));
                }
            });
        },500);
    });

    $("#POProductDetails_ParentQuantity").on('input', function () {
        CalculateTotalQty();
    });

    $("#POProductDetails_ChildQuantity").on('input', function () {
        CalculateTotalQty();
    });

    function CalculateTotalQty() {
        var TempRQty = parseFloat($("#POProductDetails_TempCurrentQuantity").val());
        var ConvertValue = getDefaultFloatIfEmpty($("#POProductDetails_ConvertValue").val());
        var ChildQty = getDefaultFloatIfEmpty($("#POProductDetails_ChildQuantity").val());
        var ParentQty = getDefaultFloatIfEmpty($("#POProductDetails_ParentQuantity").val());
        var TotalQty = parseFloat((ConvertValue * ParentQty) + ChildQty);
        $("#POProductDetails_Quantity").val(TotalQty).trigger('input');
        if (TotalQty <= 0) {
            toastr.info("Quantity must be greater than 0");
            $("#btnAdd").attr('disabled', 'disabled');
            return false;
        }
        if (TotalQty > TempRQty) {
            toastr.info("Quantity is greater than current stock");
            $("#btnAdd").attr('disabled', 'disabled');
            return false;
        }

        if (TotalQty <= TempRQty) {
            $("#btnAdd").prop('disabled', false);
        }
    }
    function setPickerControls(data) {
        if (data && data.Code != '') {
            $("#ProductDetailsCode").val(data.data.Code);
            $("#ProductDetailsName").val(data.data.Name);
            $("#ProductId").val(data.data.Id);
            $('[id*="_Quantity"]').val(1);
            $('[id*="_PreviousStock"]').val(1);
            $("#POProductDetails_IMENo").val(data.data.IMEINo);
            $('#StockDetailsId').val($.trim(data.data.StockDetailId));
            $('#ProductType').val($.trim(data.data.ProductType));
            $('[id*="_ColorsId"]').val($.trim(data.data.ColorId));
            //if ($.trim(data.IMEINo) == "No Barcode") {
            //    $('[id*="_Quantity"]').attr("readonly", false);
            //}
            //else {
            //    $('[id*="_Quantity"]').attr("readonly", true);
            //}
        }
        else {
            clearPickerControls();
        }
    }

    function clearPickerControls() {
        $("#ProductDetailsCode").val('');
        $("#ProductDetailsName").val('');
        $("#ProductId").val('');
        $('[id*="_PreviousStock"]').val('');
        $('[id*="_Quantity"]').val('');
        $("#POProductDetails_IMENo").val('');
        $('#StockDetailsId').val('');
        $('#ProductType').val('');
        $('[id*="_ColorsId"]').val('');
    }


        //*******************************************
    //**********Scan IMEI End********************
    //*******************************************
</script>
