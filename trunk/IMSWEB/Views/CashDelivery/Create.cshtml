@using IMSWEB.Model
@model IMSWEB.CreateCashCollectionViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " CashDelivery";
}
<h4 class="inline-header">@(ViewBag.Title + ".")</h4>
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-body">
                @using (Html.BeginForm(actionName, "CashDelivery", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.CashCollectionID)
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ReceiptNo, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.ReceiptNo, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 1 } })
                            @Html.ValidationMessageFor(model => model.ReceiptNo, "", new { @class = "text-danger" })
                            <input type="hidden" value="" id="txtPayType" name="PayType" />
                        </div>
                    </div>

                    @*<div class="form-group">
            @Html.LabelFor(model => model.SupplierID, new { @class = "control-label col-md-3", autofocus = "autofocus" })
            <div class="col-md-9">
                @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Supplier, id = (Model != null && Model.SupplierID != null) ? Model.SupplierID : "0" });}
                @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
            </div>
        </div>*@

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.SupplierID, new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.DropDownListFor(model => model.SupplierID, new SelectList(ViewBag.SupplierIds, "Id", "Name"), "--Select Customer--", new { @class = "form-control input-sm ddl2", @id = "txtSupplierId" })
                                    @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2" style="display: none;">
                            <div class="form-group">
                                <div class="col-md-9">
                                    @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Supplier, id = (Model != null && Model.SupplierID != null) ? Model.SupplierID : "0" });}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PayHeadId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.PayHeadId, Model.PayItems, "--Select a Particular--", new { @class = "form-control input-sm ddl2", @id = "PayHeadId" })
                            @Html.ValidationMessageFor(model => model.PayHeadId, "", new { @class = "text-danger" })
                            @if (actionName.ToLower().Equals("edit"))
                            {
                                @Html.HiddenFor(d => d.PayHeadId)}
                        </div>
                    </div>

                    <div class="form-group" , style="display:none">
                        @Html.LabelFor(model => model.PaymentType, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownListFor(model => model.PaymentType, new SelectList(Enum.GetValues(typeof(IMSWEB.Model.EnumPayType))), new { @class = "form-control input-sm", tabindex = 5 })
                            @Html.ValidationMessageFor(model => model.PaymentType, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CurrentDue, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.CurrentDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.CurrentDue, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 9 } })
                            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.TempAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 9 } })
                        </div>
                    </div>
                </div>

                    <div class="col-md-6">

                        <div class="form-group">
                            @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label col-md-3", autofocus = "autofocus" })
                            <div class="col-md-9">
                                <div class='input-group date' id='EntryDate' tabindex="2">
                                    <input type='text' class="input-sm form-control input-sm" name='EntryDate' />
                                    <span class="input-group-addon">
                                        <i class="fa fa-calendar" aria-hidden="true"></i>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AccountNo, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AccountNo, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 4 } })
                                @Html.ValidationMessageFor(model => model.AccountNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.AdjustAmt, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AdjustAmt, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 10 } })
                                @Html.ValidationMessageFor(model => model.AdjustAmt, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.BalanceDue, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.BalanceDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 11, @readonly = "readonly" } })
                                @Html.ValidationMessageFor(model => model.BalanceDue, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "text", tabindex = 11 } })
                                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-9 col-md-offset-3 pull-right">
                                <input type="submit" value="Save Cash Delivery" class="btn btn-sm btn-primary" tabindex="12" />
                            </div>
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        $('[id*="CurrentDue"]').val(@ViewBag.SuppliersCurrentDue);
        //$('[id*="_CurrentDue"]').trigger("input");
        disablepicker();
    });
    $(function () {
        $("#PaymentTransaction").select2();
        $('#EntryDate').datetimepicker({
            @{
                if (Model == null || Model.EntryDate == null)
                {
                    @:defaultDate: moment(),
                                                                                        }
                else
                {
            @:defaultDate: '@(Convert.ToDateTime(Model.EntryDate).ToString("dd-MMM-yyyy"))',
                                                                                }
            @:format: 'DD-MMM-YYYY'
                                                                                        }
        });

    });
    $("#CustomersModal").on("hidden.bs.modal", function () {
        Calculation();
    });
    function Calculation() {
        var totalDue = getDefaultIntIfEmpty($("#CurrentDue").val());
        var amount = getDefaultFloatIfEmpty($("#Amount").val());
        var Tempamount = getDefaultFloatIfEmpty($("#TempAmount").val());
        var AdjustAmt = getDefaultFloatIfEmpty($("#AdjustAmt").val());
        var TempAdjustAmt = getDefaultFloatIfEmpty($("#TempAdjustAmt").val());
        totalDue = totalDue + Tempamount + TempAdjustAmt;
        var total = (totalDue - (amount + AdjustAmt)).toFixed(2);

        $("#BalanceDue").val(getDefaultFloatIfEmpty(total));
    }

    $("#Amount").on("input", function () {
        Calculation();
    });

    $("#AdjustAmt").on("input", function () {
        Calculation();
    });
    $("#TransactionType").on("change", disablepicker);

    function disablepicker() {
        var type = $("#TransactionType option:selected").text();
        var customer = $("button[data-target = #CustomersModal]");
        var supplier = $("button[data-target = #SuppliersModal]");

        if (type == "FromCustomer")
        {
            customer.removeAttr('disabled');
            supplier.attr('disabled', 'disabled');
        }
        else
        {
            supplier.removeAttr('disabled');
            customer.attr('disabled', 'disabled');
        }
    }

    $('#PayHeadId').change(function () {
        getPayType();
    });

    function getPayType() {
        var selectedOption = $('#PayHeadId').find('option:selected').text();
        var lastHyphenIndex = selectedOption.lastIndexOf('-');
        var textAfterLastHyphen = selectedOption.slice(lastHyphenIndex + 1);
        textAfterLastHyphen = $.trim(textAfterLastHyphen);
        $('#txtPayType').val(textAfterLastHyphen);
    }

    $(document).ready(function () {
        getPayType();
    });

    //******************************************************
    //           Data populate with new picker
    //******************************************************
    $('#txtSupplierId').change(function () {
        var supId = getDefaultIntIfEmpty($(this).val());
        if (supId > 0) {
            loadSupplierInfo(supId);
        }
    });

    function loadSupplierInfo(supplierId) {
        $.ajax({
            url: "/PurchaseOrder/GetSupplierInfoById",
            type: "GET",
            data: { 'supplierId': supplierId },
            dataType: "json",
            success: function (supplier) {
                $('#SuppliersCode').val($.trim(supplier.Code));
                $('#SuppliersName').val($.trim(supplier.Name));
                $('#SuppliersId').val($.trim(supplier.Id));
                $('[id*="CurrentDue"]').val($.trim(supplier.TotalDue));
            },
            error: function (err) {
                toastr.error(JSON.stringify(err));
                console.log(JSON.stringify(err))
            }
        });
    }
</script>

