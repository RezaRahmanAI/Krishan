@model InvestmentheadViewModel
@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    string controllerName = ViewContext.RouteData.Values["controller"].ToString();
    ViewBag.Title = actionName + "";
    bool isTransFound = (bool)ViewBag.IsTransactionFound;
}

<h4 class="inline-header">@(ViewBag.Title + " Investment Head.")</h4>
<hr />
<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <div class="panel panel-default">
            <div class="panel-body">
                @using (Html.BeginForm(actionName, controllerName, new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.SIHID);
                    <div class="form-group">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control input-sm", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ParentId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EnumDropDownListFor(model => model.ParentId, "--Select Head--", new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.OpeningBalance, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @if (!isTransFound)
                            {
                                @Html.EditorFor(model => model.OpeningBalance, new { htmlAttributes = new { @class = "form-control input-sm", type = "number", @step = "0.1" } })
                            }
                            else
                            {
                                @Html.EditorFor(model => model.OpeningBalance, new { htmlAttributes = new { @class = "form-control input-sm", type = "number", @step = "0.1", @readonly = "readonly" } })
                            }
                            @Html.ValidationMessageFor(model => model.OpeningBalance, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*<div class="form-group">
                        @Html.LabelFor(model => model.OpeningType, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @if (!isTransFound)
                            {
                                @Html.EnumDropDownListFor(model => model.OpeningType, "--Select Head--", new { @class = "form-control input-sm ddl2" })
                            }
                            else
                            {
                                string opType = Model.OpeningType.ToString();
                                <p style="color: black">
                                    @opType
                                </p>
                                @Html.HiddenFor(m => m.OpeningType)
                            }

                            @Html.ValidationMessageFor(model => model.OpeningType, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    <div class="form-group">
                        @Html.LabelFor(m => m.OpeningDate, new { @class = "control-label col-md-3 col-xs-12" })
                        <div class=" col-md-9 col-sm-7 col-xs-12">
                            <div class='input-group date OrderDate' id='OpeningDate'>
                                <input type='text' class="input-sm form-control input-sm" name='OpeningDate' />
                                <span class="input-group-addon">
                                    <i class="fa fa-calendar" aria-hidden="true"></i>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(m => m.OpeningDate, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-sm-offset-3 col-sm-9">
                            <input type="submit" value="Add" class="btn btn-sm btn-primary" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#ParentId").select2();
    });



       $('#OpeningDate').datetimepicker({
    @{
            if (Model == null || Model.OpeningDate == null) {
                @:defaultDate: moment(),
            }
            else
            {
               @:defaultDate: '@(Convert.ToDateTime(Model.OpeningDate).ToString("dd-MMM-yyyy"))',
            }
               @:format: 'DD-MMM-YYYY'
            }
});
</script>