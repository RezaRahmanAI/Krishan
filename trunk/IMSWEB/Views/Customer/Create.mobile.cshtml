@using IMSWEB.Model
@model IMSWEB.CreateCustomerViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " Customer";
}

<h4>@(ViewBag.Title + ".")</h4>
<hr />

<div class="row">
    <div class="col-md-offset-3 col-md-4 col-sm-offset-1 col-sm-10 col-xs-offset-1 col-xs-10">
        @using (Html.BeginForm(actionName, "Customer", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id);
            @Html.HiddenFor(m => m.PhotoPath);
            <div class="form-group">
                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control input-sm" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control input-sm" } })
                    @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.OpeningDue, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @if (actionName.ToLower().Equals("create"))
                    {
                        @Html.EditorFor(model => model.OpeningDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number" } });
                    }
                    else
                    {
                        @Html.EditorFor(model => model.OpeningDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", @readonly = "readonly", tabindex = -1 } });
                    }
                    @Html.ValidationMessageFor(model => model.OpeningDue, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TotalDue, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EditorFor(model => model.TotalDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", @readonly = "readonly", tabindex = -1 } })
                    @Html.ValidationMessageFor(model => model.TotalDue, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EditorFor(model => model.CompanyId, new { htmlAttributes = new { @class = "form-control input-sm" } })
                    @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Employee, id = (Model != null && Model.EmployeeId != null) ? Model.EmployeeId : "0" });}
                    @*s@Html.DropDownListFor(model => model.EmployeeId, ViewBag.Employee as SelectList, "--Select Employee--", new { @class = "form-control  input-sm" })*@
                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CustomerType, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EnumDropDownListFor(model => model.CustomerType, "--Select a type--", new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.CustomerType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CusDueLimit, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.EditorFor(model => model.CusDueLimit, new { htmlAttributes = new { @class = "form-control input-sm", type = "number" } })
                    @Html.ValidationMessageFor(model => model.CusDueLimit, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    @Html.TextAreaFor(model => model.Address, new { @class = "form-control input-sm", rows = "3" })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="form-group">
                @Html.LabelFor(m => m.PhotoPath, new { @class = "control-label col-md-3 col-sm-3 col-xs-3" })
                <div class="col-md-9 col-sm-9 col-xs-9">
                    <input class="form-control input-sm" id="Photo" name="Photo" type="file" accept="image/*"
                           onchange="document.getElementById('customerPicture').src = window.URL.createObjectURL(this.files[0]);
    document.getElementById('PhotoPath').value = window.URL.createObjectURL(this.files[0]);">
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-3 col-sm-offset-1 col-xs-offset-1 col-md-10 col-sm-10 col-xs-10">
                    <img id="customerPicture" src="/Content/photos/customers/@(Model != null ? Model.PhotoPath : string.Empty)" alt="Uploaded picture will appear here." style="max-height:200px;max-width:250px" tabindex="13" />
                </div>
            </div>*@
            <div class="form-group">
                <div class="col-sm-offset-3 col-xs-offset-3 col-sm-9 col-xs-9">
                    <input type="submit" value="Add Customer" class="btn btn-sm btn-primary" tabindex="14" />
                </div>
            </div>
        }
    </div>
</div>

<script>
    $(function () {
        $("#CustomerType").select2();
        //$("#EmployeeId").select2();
    });
    $("#OpeningDue").on("input", function () {
        var amount = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#TotalDue").val(amount);
    });

    $(document).on("blur", "#EmployeeCode", function () {
        var Code = $("#EmployeeCode").val();
        if (Code.trim().length > 0)
        GetEmployeeByCode();
    });
    function GetEmployeeByCode() {
        var Code = $("#EmployeeCode").val();
        $.ajax({
            type: 'Get',
            url: "@Url.Action("GetEmployeeByCode")?Code=" + Code,
            datatype: "json",
            success: function (data) {
                if (data != false) {
                    $("#EmployeeId").val(data.EmployeeID);
                    $("#EmployeeCode").val(data.Code);
                    $("#EmployeeError").hide();
                }
                else {
                    $("#EmployeeError").show();
                    $("#EmployeeId").val(0);
                }
            },
            error: function (data) {

            }

        });
    }

    $(document).on("change", "#EmployeeId", function () {
        var ID = $("#EmployeeId").val();
        if (ID.trim().length > 0)
            GetEmployeeByID();
    });
    function GetEmployeeByID() {
        var ID = $("#EmployeeId").val();
        $("#EmployeeError").hide();
        $.ajax({
            type: 'Get',
            url: "@Url.Action("GetEmployeeByID")?ID=" + ID,
            datatype: "json",
            success: function (data) {
                if (data != false) {
                    $("#EmployeeId").val(data.EmployeeID);
                    $("#EmployeeCode").val(data.Code);
                }
                else {
                    // $("#ProductCodeError").show();
                }
            },
            error: function (data) {

            }

        });
    }
</script>