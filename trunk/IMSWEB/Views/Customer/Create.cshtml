@using IMSWEB.Model
@model IMSWEB.CreateCustomerViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " Customer";
    bool isEmployeeWiseTransEnable = (bool)ViewBag.IsEmployeeWiseTransEnable;
}

<h4 class="inline-header">@(ViewBag.Title + ".")</h4>

@using (Html.BeginForm("Create", "Customer", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.DueEmployeeID);
    @Html.HiddenFor(m => m.Id);
    @Html.HiddenFor(m => m.PhotoPath);
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 1 } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CustomerType, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EnumDropDownListFor(model => model.CustomerType, "--Select a type--", new { @class = "form-control input-sm", tabindex = 3 })
                        @Html.ValidationMessageFor(model => model.CustomerType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus", tabindex = 2 } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CompanyId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CompanyId, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 12 } })
                        @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 4 } })
                        @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control input-sm", rows = "3", tabindex = 5 })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>




                <div class="form-group">
                    @Html.LabelFor(model => model.OpeningDue, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @if (actionName.ToLower().Equals("create"))
                        {
                            @Html.EditorFor(model => model.OpeningDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", tabindex = 8 } });
                        }
                        else
                        {
                            @Html.EditorFor(model => model.OpeningDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", @readonly = "readonly", tabindex = -1 } });
                        }
                        @Html.ValidationMessageFor(model => model.OpeningDue, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TotalDue, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.TotalDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", @readonly = "readonly", @tabindex = -1 } })
                        @Html.ValidationMessageFor(model => model.TotalDue, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (!User.IsInRole(EnumUserRoles.MobileUser.ToString()))
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmployeeId, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.PickEmployee, id = (Model != null && Model.EmployeeId != null) ? Model.EmployeeId : "0" });}
                        </div>
                    </div>
                }
                @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.TerritoryID, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Territory, id = (Model != null && Model.TerritoryID != null) ? Model.TerritoryID : "0" });}
                        @Html.ValidationMessageFor(model => model.TerritoryID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class="col-md-6">

        <div class="panel panel-default">
            <div class="panel-body">

                <div class="form-group">
                    @Html.LabelFor(model => model.FName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.FName, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 6 } })
                        @Html.ValidationMessageFor(model => model.FName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RefName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.RefName, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 9 } })
                        @Html.ValidationMessageFor(model => model.RefName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RefContact, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.RefContact, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 10 } })
                        @Html.ValidationMessageFor(model => model.RefContact, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.RefAddress, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextAreaFor(model => model.RefAddress, new { @class = "form-control input-sm", rows = "2", tabindex = 11 })
                        @Html.ValidationMessageFor(model => model.RefAddress, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.EmailId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.EmailId, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 7 } })
                        @Html.ValidationMessageFor(model => model.EmailId, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.NId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.NId, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 13 } })
                        @Html.ValidationMessageFor(model => model.NId, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(model => model.CusDueLimit, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CusDueLimit, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", tabindex = 14 } })
                        @Html.ValidationMessageFor(model => model.CusDueLimit, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RefFName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.RefFName, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 15 } })
                        @Html.ValidationMessageFor(model => model.RefFName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 15 } })
                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                    </div>
                </div>
                @*<div class="form-group">
            <div class="col-sm-offset-3 col-sm-9">
                <input type="submit" value="Add Customer" class="btn btn-sm btn-primary" tabindex="16" />
            </div>
        </div>*@
            </div>
        </div>
        @if (!ViewBag.IsSalesOrCollectionExist && isEmployeeWiseTransEnable)
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmployeeName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 10 } })
                            @Html.ValidationMessageFor(model => model.EmployeeName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.EmployeeWiseDue, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.EmployeeWiseDue, new { htmlAttributes = new { @class = "form-control input-sm", type = "number", tabindex = 10 } })
                            @Html.ValidationMessageFor(model => model.EmployeeWiseDue, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
            </div>
        }
        <div class="row">
            <div class="col-md-12">
                @if (Model.CustomerDues != null && Model.CustomerDues.Count() > 0)
                {
                    <div class="panel panel-default">
                        <div class="panel-body">

                            <table id="customerDueTable"
                                   data-toggle="table"
                                   data-search="false"
                                   data-show-refresh="false"
                                   data-show-toggle="false"
                                   data-show-columns="false"
                                   data-show-export="false"
                                   data-detail-view="true"
                                   data-pagination="true"
                                   data-id-field="name"
                                   data-page-list="[10, 25, 50, 100, ALL]"
                                   data-page-size="15"
                                   data-toolbar="#toolbar"
                                   class="table table-responsive table-bordered table-striped text-nowrap" cellspacing="0" width="100%">
                                <thead>
                                    <tr>
                                        <th>
                                            Employee
                                        </th>
                                        <th>
                                            Customer Due
                                        </th>
                                        <th>
                                            Customer Open. Due
                                        </th>
                                        <th>
                                            Action
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int i = 0; i < Model.CustomerDues.Count(); i++)
                                    {
                                        <tr>
                                            <td>
                                                @Html.HiddenFor(m => Model.CustomerDues[i].EmployeeID)
                                                @Html.HiddenFor(m => Model.CustomerDues[i].EmployeeName)
                                                @Model.CustomerDues[i].EmployeeName
                                            </td>
                                            <td>
                                                @Html.HiddenFor(m => Model.CustomerDues[i].CustomerDue)
                                                @Model.CustomerDues[i].CustomerDue
                                            </td>
                                            <td>
                                                @Html.HiddenFor(m => Model.CustomerDues[i].CustomerOpeningDue)
                                                @Model.CustomerDues[i].CustomerOpeningDue
                                            </td>
                                            <td>
                                                @if (!ViewBag.IsSalesOrCollectionExist)
                                                {
                                                    @Html.ActionLink("Delete", "DeleteEmployeeDue", new { employeeID = Model.CustomerDues[i].EmployeeID }, new { onclick = "if(!confirm('Do you want to delete?')) return false;", @class = "btn btn-xs btn-danger" });
                                                }
                                                else
                                                {
                                                    <span>N/A</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>

        </div>
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="btn-group">
                    <input type="submit" value="Add Customer" class="btn btn-sm btn-primary mr-1" tabindex="14" />
                    @if (!ViewBag.IsSalesOrCollectionExist && isEmployeeWiseTransEnable)
                    {
                        <input type="submit" value="Add Employee Wise Due" id="btnEmpWiseDue" name="btnEmpWiseDue" class="btn btn-sm btn-info" tabindex="14" />
                    }
                </div>
            </div>
        </div>

    </div>
}
<script src="~/Scripts/employee.js"></script>
<script>
    $(function () {
        $("#CustomerType").select2();
        employee.getEmployees("DueEmployeeID");
        var Check = employee.getEmployees("DueEmployeeID");
        console.log(Check);
    });
    $("#OpeningDue").on("input", function () {
        var amount = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#TotalDue").val(amount);
    });

    $("#CustomerType").on('change', function () {
        //alert(this.value);
        if (this.value == 0) {
            toastr.info("Please select type.");
            return;
        }

        $.ajax({
            type: "GET",
            url: "/Customer/GetUniqueCodeByType",
            data: { CustomerType: this.value },
            contentType: "application/json",
            dataType: "json",
            success: function (data) {
                $("#Code").val(data);
            }
        });
    });

</script>