@using IMSWEB.Model
@model IMSWEB.CreateSupplierViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " Supplier";
}

<h4 class="border-bottom text-success fw-bold">@(ViewBag.Title + ".")</h4>


@using (Html.BeginForm(actionName, "Supplier", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id);
    @Html.HiddenFor(m => m.PhotoPath);

    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-6">
            <div class="panel">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control input-sm" } })
                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input-sm", autofocus = "autofocus" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.OwnerName, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.OwnerName, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 2 } })
                                    @Html.ValidationMessageFor(model => model.OwnerName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control input-sm", tabindex = 1 } })
                                    @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.TextAreaFor(model => model.Address, new { @class = "form-control input-sm", rows = "3", tabindex = 5 })
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.OpeningDue, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @if (actionName.ToLower().Equals("create"))
                                    {
                                        @Html.EditorFor(model => model.OpeningDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", tabindex = 3 } });
                                    }
                                    else
                                    {
                                        @Html.EditorFor(model => model.OpeningDue, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number", @readonly = "readonly" } });
                                    }
                                    @Html.ValidationMessageFor(model => model.OpeningDue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.TotalDue, htmlAttributes: new { @class = "control-label col-md-3" })
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.TotalDue, new { htmlAttributes = new { @class = "form-control input-sm", type = "number", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.TotalDue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="text-right">
                                <input type="submit" value="Add Supplier" class="btn btn-sm btn-primary" tabindex="6" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3"></div>
    </div>
    <div class="col-md-6" style="display: none;">
        <div class="form-group" style="display: none;">
            @Html.LabelFor(m => m.PhotoPath, new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <input class="form-control input-sm" id="Photo" name="Photo" type="file" accept="image/*"
                       onchange="document.getElementById('supplierPicture').src = window.URL.createObjectURL(this.files[0]);
    document.getElementById('PhotoPath').value = window.URL.createObjectURL(this.files[0]);">
            </div>
        </div>
        <div class="form-group" style="display: none;">
            <div class="col-md-offset-3 col-md-9">
                <img id="supplierPicture" src="/Content/photos/suppliers/@(Model != null ? Model.PhotoPath : string.Empty)" alt="Uploaded picture will appear here." height="200" tabindex="4" />
            </div>
        </div>
    </div>
    <div class="col-md-6" style="display: none;">
        <div class="form-group" style="display: none;">
            @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control input-sm", rows = "2", tabindex = 5 })
                @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
            </div>
        </div>
           
    </div>
}
<script>
    $("#OpeningDue").on("input", function () {
        var amount = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#TotalDue").val(amount);
    });
</script>