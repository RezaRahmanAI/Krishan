@using IMSWEB.Model
@model IMSWEB.CreateExpenditureViewModel
@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " Income";
}
<h4 class="inline-header">@(ViewBag.Title + ".")</h4>
@using (Html.BeginForm(actionName, "Income", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    <div class="col-md-offset-3 col-md-6">

        <div class="panel panel-default">
            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.VoucherNo, htmlAttributes: new { @class = "control-label col-md-3", autofocus = "autofocus" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.VoucherNo, new { htmlAttributes = new { @class = "form-control input-sm", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.VoucherNo, "", new { @class = "text-danger" })
                        <input type="hidden" value="" id="txtPayType" name="PayType" />
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label col-md-3", autofocus = "autofocus" })
                    <div class="col-md-9">
                        <div class='input-group date' id='EntryDate'>
                            <input type='text' class="input-sm form-control input-sm" name='EntryDate' />
                            <span class="input-group-addon">
                                <i class="fa fa-calendar" aria-hidden="true"></i>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.EntryDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ExpenseItemID, new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.ExpenseItemID, new SelectList(ViewBag.ExpenseItemsId, "Id", "Name"), "--Select Income Item--", new { @class = "form-control input-sm ddl2", @id = "txtExpenseItemsId" })
                                @Html.ValidationMessageFor(m => m.ExpenseItemID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-2" style="display: none;">
                        <div class="form-group">
                            <div class="col-md-10">
                                @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.IncomeItemHead, id = (Model != null && Model.ExpenseItemID != null) ? Model.ExpenseItemID : "0" });}
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PayHeadId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.PayHeadId, Model.PayItems, "--Select a Particular--", new { @class = "form-control input-sm ddl2", @id = "PayHeadId" })
                        @Html.ValidationMessageFor(model => model.PayHeadId, "", new { @class = "text-danger" })
                        @if (actionName.ToLower().Equals("edit"))
                        {
                            @Html.HiddenFor(d => d.PayHeadId)}
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.Label("Income Items", new { @class = "control-label col-md-4 full-width-picker-label" })
                        <div class="col-md-8">
                            @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.IncomeItemHead, id = (Model != null && !string.IsNullOrEmpty(Model.ExpenseItemID)) ? Model.ExpenseItemID : "0" });}
                            @Html.ValidationMessageFor(model => model.ExpenseItemID, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.ExpenseItemID, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        </div>
                    </div>*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control input-sm text-right", type = "number" } })
                        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-3 col-md-9">
                        <input type="submit" value="Add Income" class="btn btn-sm btn-primary" />
                    </div>
                </div>
            </div>
        </div>

    </div>
}

<script>
    $(function () {
        $("#ExpenseItem").select2();
        $('#EntryDate').datetimepicker({
            @{
                if (Model == null || Model.EntryDate == null)
                {
                    @:defaultDate: moment(),
                                                                            }
                else
                {
            @:defaultDate: '@(Convert.ToDateTime(Model.EntryDate).ToString("dd-MMM-yyyy"))',
                                                                    }
            @:format: 'DD-MMM-YYYY'
                                                                            }
        });

    });

    $('#PayHeadId').change(function () {
        getPayType();
    });

    function getPayType() {
        var selectedOption = $('#PayHeadId').find('option:selected').text();
        var lastHyphenIndex = selectedOption.lastIndexOf('-');
        var textAfterLastHyphen = selectedOption.slice(lastHyphenIndex + 1);
        textAfterLastHyphen = $.trim(textAfterLastHyphen);
        $('#txtPayType').val(textAfterLastHyphen);
    }

    $(document).ready(function () {
        getPayType();
    });
    //******************************************************
    //           Data populate with new picker
    //******************************************************

    $('#txtExpenseItemsId').change(function () {
        var expitemId = getDefaultIntIfEmpty($(this).val());
        if (expitemId > 0) {
            loadExpenseItemInfo(expitemId);
        }
    });

    function loadExpenseItemInfo(expenseItemId) {
        $.ajax({
            url: "/Income/GetIncomeItemInfoById",
            type: "GET",
            data: { 'expenseItemId': expenseItemId },
            dataType: "json",
            success: function (expensitem) {
                $('#ExpenseItemsCode').val($.trim(expensitem.Code));
                $('#ExpenseItemsName').val($.trim(expensitem.Name));
                $('#ExpenseItemsId').val($.trim(expensitem.Id));
            },
            error: function (err) {
                toastr.error(JSON.stringify(err));
                console.log(JSON.stringify(err))
            }
        });
    }

</script>
