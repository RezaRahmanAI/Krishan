<style>
    .col-md-4 {
        padding-right: 0px !important;
    }

    .col-md-8 {
        padding-left: 0px !important;
    }
</style>
@using IMSWEB.Model
@model SalesOrderViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " Sales Return Order";
}
<h4 class="inline-header">@(ViewBag.Title + ".")</h4>
@using (Html.BeginForm(actionName, "Return", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.InvoiceNo, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.InvoiceNo, new { htmlAttributes = new { @class = "input-sm form-control input-sm", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.InvoiceNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.Label("Return Date", new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    <div class='input-group date' id='OrderDate'>
                                        <input type='text' class="input-sm form-control input-sm" name='OrderDate' />
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar" aria-hidden="true"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.SalesOrder.OrderDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.CustomerId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10 full-width-picker">
                                    @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Customer, id = (Model != null && Model.SalesOrder.CustomerId != null) ? Model.SalesOrder.CustomerId : "0" });}
                                    @Html.ValidationMessageFor(m => m.SalesOrder.CustomerId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.CurrentDue, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.CurrentDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.CurrentDue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            @*<div class="form-group">
                                    <b><span id="SalesOrder_OfferDescription" class="tag">@Model.SalesOrder.OfferDescription</span></b>
                                </div>*@
                            <div class="form-group">
                                <input autofocus="autofocus" placeholder="Enter Return IMEI" class="input-sm form-control text-box single-line" id="externalDamageIMEINO" name="externalDamageIMEINO" style="margin-left: 5px !important;margin-right: 5px !important; width:98%;" type="hidden" value="">
                                <span id="externalDamageIMEINOError" class="text-danger" style="display:none">IMEI not Found.</span>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.ProductId, new { @class = "control-label col-md-2" })
                                <div class="col-md-10 full-width-picker">
                                    <span id="pickerSpace">
                                        @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.ProductPickerFiltered, id = (Model != null && Model.SODetail.StockDetailId != null) ? Model.SODetail.StockDetailId : "0" });}
                                    </span>
                                    <input type="hidden" class="input-sm form-control input-sm" id="dStockDetailsId" name="dStockDetailsId" readonly="readonly">
                                    <input type="hidden" class="input-sm form-control input-sm" id="dRStockDetailsId" name="dRStockDetailsId" readonly="readonly">
                                    <input type="hidden" class="input-sm form-control input-sm" id="dColorsId" name="dColorsId" readonly="readonly">
                                    @Html.ValidationMessageFor(m => m.SODetail.ProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.ParentQuantity, new { @class = "control-label col-md-4", id = "lblParentUnit" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.ParentQuantity, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1 } })
                                    @Html.ValidationMessageFor(m => m.SODetail.ParentQuantity, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(m => m.SODetail.PreviousStock, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", @readonly = "readonly" } })
                                </div>
                            </div>
                            <div class="form-group" style="display: none;">
                                @Html.LabelFor(m => m.SODetail.ColorName, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.ColorName, new { htmlAttributes = new { @class = "input-sm form-control input-sm", @readonly = "readonly" } })
                                    @Html.HiddenFor(m => m.SODetail.ColorId, new { htmlAttributes = new { @class = "input-sm form-control input-sm", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.ColorName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" style="display: none;">
                                @Html.LabelFor(m => m.SODetail.ConvertValue, new { @class = "control-label col-md-4", id = "lblConvertValue" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.ConvertValue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1, @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.ConvertValue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.RatePerArea, new { @class = "control-label col-md-4", id = "lblRatePerArea" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.RatePerArea, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 2 } })
                                    @Html.ValidationMessageFor(m => m.SODetail.RatePerArea, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(m => m.SODetail.DamageIMEINO, new { htmlAttributes = new { @class = "input-sm form-control", @readonly = "readonly" } })
                                    @*@Html.HiddenFor(m => m.SODetail.Quantity, new { htmlAttributes = new { @class = "input-sm form-control", @readonly = "readonly" } })*@
                                    @Html.HiddenFor(m => m.SODetail.MRPRate, new { htmlAttributes = new { @class = "input-sm form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.DamageIMEINO, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(m => m.SODetail.UnitPrice, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 7, @readonly = "readonly" } })
                                    @Html.HiddenFor(m => m.SODetail.StockDetailId, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 7, @readonly = "readonly" } })
                                    <input type="hidden" name="SalesCSft" id="SalesCSft">
                                </div>
                            </div>
                            @*<div class="form-group">
            @Html.LabelFor(m => m.SODetail.UnitPrice, new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(m => m.SODetail.UnitPrice, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 7, @readonly = "readonly" } })
                @Html.ValidationMessageFor(m => m.SODetail.UnitPrice, "", new { @class = "text-danger" })
            </div>
        </div>*@
                            <div class="form-group" style="display:none" id="AreaPerCartondiv">
                                @Html.LabelFor(m => m.SODetail.AreaPerCarton, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.AreaPerCarton, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", tabindex = 7, @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.AreaPerCarton, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" style="display:none" id="TotalAreadiv">
                                @Html.LabelFor(m => m.SODetail.TotalArea, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.TotalArea, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.TotalArea, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.ChildQuantity, new { @class = "control-label col-md-4", id = "lblChildUnit" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.ChildQuantity, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1 } })
                                    @Html.ValidationMessageFor(m => m.SODetail.ChildQuantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.Quantity, new { @class = "control-label col-md-4", id = "lblTotalQty" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.Quantity, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1, @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.Quantity, "", new { @class = "text-danger" })
                                    <input type="hidden" name="dQuantity" id="dQuantity" />
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.UTAmount, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.UTAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", tabindex = 1, @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.UTAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="form-group">
                        @Html.LabelFor(m => m.SalesOrder.TotalAmount, new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.HiddenFor(m => m.SalesOrder.GrandTotal)
                            @Html.EditorFor(m => m.SalesOrder.TotalAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(m => m.SalesOrder.TotalAmount, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.SalesOrder.PaymentDue, new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(m => m.SalesOrder.PaymentDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(m => m.SalesOrder.PaymentDue, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
            </div>
        </div>

        <div class="col-md-6">

            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="table-responsive">
                                <table id="productTable"
                                       data-toggle="table"
                                       data-search="false"
                                       data-click-to-select="true"
                                       data-single-select="true"
                                       data-detail-view="true"
                                       data-pagination="false"
                                       data-id-field="name"
                                       data-page-list="[10, 25, 50, 100, ALL]"
                                       data-page-size="6"
                                       data-height="265"
                                       class="table table-responsive table-bordered table-striped text-nowrap" cellspacing="0" width="100%">
                                    <thead>
                                        <tr>
                                            <th data-field="count">
                                                Sl
                                            </th>
                                            <th data-field="ProductCode"
                                                data-sortable="true">
                                                Code
                                            </th>
                                            <th data-field="DamageProductName"
                                                data-sorter="sorter"
                                                data-sortable="true">
                                                Product
                                            </th>
                                            <th data-field="Quantity"
                                                data-sortable="true">
                                                Quantity(Pcs/gm)
                                            </th>
                                            <th data-field="DamageUnitPrice"
                                                data-sortable="true">
                                                Total Amt.
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int count = 1;
                                            foreach (var item in Model.SODetails)
                                            {
                                                if (item.Status == EnumStatus.Updated || item.Status == EnumStatus.Deleted) { continue; }
                                                <tr>
                                                    <td>
                                                        @count
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.ProductCode)
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.DamageProductName)
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.Quantity)
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => item.UTAmount)
                                                    </td>
                                                </tr>
                                                count++;
                                            }
                                        }
                                    </tbody>
                                </table>



                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="pull-right">
                                <input type="submit" id="btnAdd" class="btn btn-sm btn-primary" name="addButton" value="Add to order" />
                                @*<button type="button" class="btn btn-sm btn-danger">Clear</button>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12" style="padding-right: 5px !important;">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="form-group">
                                @Html.Label("Return Amount", new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.RecieveAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.RecieveAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.Remarks, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.Remarks, new { htmlAttributes = new { @class = "input-sm form-control input-sm" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.Remarks, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="pull-right">
                                <input type="submit" class="btn btn-sm btn-primary" name="btnReturn" value="Return" />
                                @*<button type="button" class="btn btn-sm btn-danger">Clear</button>*@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $(window).keydown(function (event) {
            if (event.keyCode == 10 || event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });
    });

    $('#OrderDate').datetimepicker({
        @{
                if (Model == null || Model.SalesOrder.OrderDate == null) {
                    @:defaultDate: moment(),
                                                                                                                                                            }
                else
                {
            @:defaultDate:'@(Convert.ToDateTime(Model.SalesOrder.OrderDate).ToString("dd-MMM-yyyy"))',
                                                                                                                                                    }
            @:format: 'DD-MMM-YYYY'
                                                                                                                                                            }
    });


    //***********************************
    //Barcode Reader For Damage IMEI
    //***********************************

    $("#externalDamageIMEINO").on("input", function () {
        var CustomerID =getDefaultFloatIfEmpty($("#CustomersId").val());
        $("#externalDamageIMEINOError").hide();
        if(CustomerID==0){
            toastr.info('Select Customer');
            return;
        }
        setTimeout(function () {
            $.ajax({
                url: "/Return/GetDamageProductDetailByIMEINo",
                type: "GET",
                data: { 'imeiNo': $("#externalDamageIMEINO").val(),'CustomerID':CustomerID },
                dataType: "json",
                success: function (data) {
                    setDamagePickerControls(data);
                    $("#externalDamageIMEINO").val('');
                    $("#externalDamageIMEINO").attr('autofocus', 'autofocus');
                    if(data==false)
                        $("#externalDamageIMEINOError").show();
                },
                error: function (err) {
                    clearDamagePickerControls();
                    console.error(JSON.stringify(err));
                }
            });
        }, @((User.Identity.GetConcernId() == 5 || User.Identity.GetConcernId() == 6 || User.Identity.GetConcernId() == 1) ? 200 : 200));
    });


    function setDamagePickerControls(data) {
        if (data && data.Code != '') {
            $("#dProductCode").val(data.Code);
            $("#dProductDetailsName").val(data.Name);



            $("#dProductDetailsId").val(data.Id);
            $("#dStockDetailsId").val(data.StockDetailId);
            $("#dColorsId").val(data.ColorId);
            $("#dColorName").val(data.ColorName);

            $("#SODetail_Quantity").val(data.Quantity);
            $("#SODetail_DamageIMEINO").val(data.IMEINo);
            $('#dUnitPrice').val(data.MrpRate);
            $('#SODetail_MRPRate').val(data.MrpRate);
            //$('#dProductDetailsId').val(data.ProductId);
            $('#ProductDetailsId').val(data.ProductId);
            $('#dQuantity').val("1");
        }
        else {
            clearDamagePickerControls();
        }
    }

    function clearDamagePickerControls() {
        $("#dProductCode").val('');
        $("#dProductDetailsName").val('');
        $("#dProductDetailsId").val('');
        $("#dStockDetailsId").val('');
        $("#dColorsId").val('');
        $("#SODetail_ColorName").val('');
        $("#dColorName").val('');
        $("#Offer").val('');
        $("#SalesOrder_OfferDescription").val('');
        $("#SODetail_Quantity").val('');
        $("#SODetail_IMENo").val('');
        $("#SODetail_MRPRate").val('').trigger("input");
        $("#SODetail_DamageIMEINO").val('');
        $('#dUnitPrice').val('');
    }

    //**********************
    //end Barcode Damage IMEI
    //**********************


    //************************************************************************************
    //****************************Per Product events start********************************
    //************************************************************************************

    $("#SODetail_MRPRate").on("input", function () {
        CalculateTotal();
    });

    $("#SODetail_UnitPrice").on("input", function () {
        CalculateTotal();
    });

    $("#SODetail_ParentQuantity").on("input", function () {
        CalculateTotal();
    });
    $("#SODetail_ChildQuantity").on("input", function () {
        CalculateTotal();
    });
    function CalculateTotal()
    {
        var ConvertValue = getDefaultFloatIfEmpty($("#SODetail_ConvertValue").val());
        var ParentQuantity = getDefaultFloatIfEmpty($("#SODetail_ParentQuantity").val());
        var ChildQuantity = getDefaultFloatIfEmpty($("#SODetail_ChildQuantity").val());
        var TotalQty =ChildQuantity+(ConvertValue*ParentQuantity);
        $("#SODetail_Quantity").val(TotalQty);
        var UnitPrice =  $("#SODetail_UnitPrice").val();
        var TotalAmt = TotalQty*UnitPrice;
        $("#SODetail_UTAmount").val(TotalAmt);

        var SFTPerCarton = getDefaultFloatIfEmpty($("#SODetail_AreaPerCarton").val());
        var TotalSFT = SFTPerCarton*(TotalQty/ConvertValue);
        $("#SODetail_TotalArea").val(TotalSFT);
    }

    $("#SODetail_RatePerArea").on("input", function () {
        var RatePerParentUnit =$(this).val();
        //var SFTPerCarton = getDefaultFloatIfEmpty($("#SODetail_AreaPerCarton").val());
        //var SFTPerCarton = getDefaultFloatIfEmpty($("#SalesCSft").val());
        var ConvertValue = getDefaultFloatIfEmpty($("#SODetail_ConvertValue").val());
        //var SFTPerPCS = SFTPerCarton/ConvertValue;
        var RatePerPcs = RatePerParentUnit/ConvertValue;
        $("#SODetail_UnitPrice").val(RatePerPcs).trigger("input");
    });

    //************************************************************************************
    //****************************Per Product events end**********************************
    //************************************************************************************
    $("#SalesOrder_RecieveAmount").on("input", function () {
        var totalAmount = getDefaultFloatIfEmpty($("#SalesOrder_GrandTotal").val());
        calculateVariousValue(totalAmount);
    });

    $("#SalesOrder_AdjAmount").on("input", function () {
        var totalAmount = getDefaultFloatIfEmpty($("#SalesOrder_GrandTotal").val());
        calculateVariousValue(totalAmount);
    });

    //$("#SalesOrder_CurrentDue").on("input", function () {
    //    if (window.location.pathname.toLowerCase() == "/salesorder/create") {
    //        var totalAmount = getDefaultFloatIfEmpty($("#SalesOrder_GrandTotal").val());
    //        var totalDiscountAmount = getDefaultFloatIfEmpty($("#SalesOrder_TotalDiscountAmount").val());
    //        var vatAmount = getDefaultFloatIfEmpty($("#SalesOrder_VATAmount").val());
    //        calculateVariousValue(totalDiscountAmount, vatAmount, totalAmount);
    //    }
    //});

    function calculateVariousValue(totalAmount) {
        var recieveAmount = getDefaultFloatIfEmpty($("#SalesOrder_RecieveAmount").val());
        var adjAmount = getDefaultFloatIfEmpty($("#SalesOrder_AdjAmount").val());

        $("#SalesOrder_TotalAmount").val(getDefaultFloatIfEmpty(totalAmount -adjAmount).toFixed(2));
        $("#SalesOrder_PaymentDue").val(getDefaultFloatIfEmpty((totalAmount - adjAmount) - recieveAmount).toFixed(2));
    }

    $("#SODetail_ParentQuantity").on('input', function () {

        var TotalQty = getDefaultFloatIfEmpty($("#SODetail_ParentQuantity").val());
        var PrevStock = getDefaultFloatIfEmpty($("#SODetail_PreviousStock").val());
        //if (TotalQty <= 0) {
        //    toastr.info("Quantity must be greater than 0");
        //    $("#btnAdd").attr('disabled', 'disabled');
        //    return false;
        //}
        if (TotalQty > PrevStock) {
            toastr.info("Quantity is greater than current sales qty");
            $("#btnAdd").attr('disabled', 'disabled');
            return false;
        }

        if (TotalQty <= PrevStock) {
            $("#btnAdd").prop('disabled', false);
        }
    });

</script>
