<style>
    .col-md-4 {
        padding-right: 0px !important;
    }

    .col-md-8 {
        padding-left: 0px !important;
    }
</style>
@using IMSWEB.Model
@model SalesOrderViewModel

@{
    string actionName = ViewContext.RouteData.Values["action"].ToString();
    ViewBag.Title = actionName + " Replacement Order";
}
<h4>@(ViewBag.Title + ".")</h4>
<hr />
@using (Html.BeginForm(actionName, "ReplacementOrder", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.InvoiceNo, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.InvoiceNo, new { htmlAttributes = new { @class = "input-sm form-control input-sm" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.InvoiceNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.CustomerId, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @{Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.Customer, id = (Model != null && Model.SalesOrder.CustomerId != null) ? Model.SalesOrder.CustomerId : "0" });}
                                    @Html.ValidationMessageFor(m => m.SalesOrder.CustomerId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @*@Html.LabelFor(m => m.SalesOrder.OrderDate, new { @class = "control-label col-md-4" })*@
                                <label class="control-label col-md-4">Rep.Date</label>
                                <div class="col-md-8">
                                    <div class='input-group date' id='OrderDate'>
                                        <input type='text' class="input-sm form-control input-sm" name='OrderDate' />
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar" aria-hidden="true"></i>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.SalesOrder.OrderDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.CurrentDue, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.CurrentDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.CurrentDue, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-12">
                            @*<div class="form-group">
                                    <b><span id="SalesOrder_OfferDescription" class="tag">@Model.SalesOrder.OfferDescription</span></b>
                                </div>*@
                            <div class="form-group">
                                <input autofocus="autofocus" placeholder="Enter Damage IMEI" class="input-sm form-control text-box single-line" id="externalDamageIMEINO" name="externalDamageIMEINO" style="margin-left: 5px !important;margin-right: 5px !important; width:98%;" type="text" value="">
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group">
                                @Html.Label("Damage Product", new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    <div class="input-group">
                                        <input type="text" class="input-sm form-control input-sm" id="dProductCode" name="dProductCode" readonly="readonly">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-sm btn-info" onclick="GetSalesProductByCustomerID()"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Pick</button>
                                        </span>
                                        <input type="text" class="input-sm form-control input-sm" id="dProductDetailsName" name="dProductDetailsName" readonly="readonly">
                                        <input type="hidden" class="input-sm form-control input-sm" id="dProductDetailsId" name="dProductDetailsId" readonly="readonly">
                                        <input type="hidden" class="input-sm form-control input-sm" id="dStockDetailsId" name="dStockDetailsId" readonly="readonly">
                                        <input type="hidden" class="input-sm form-control input-sm" id="dRStockDetailsId" name="dRStockDetailsId" readonly="readonly">
                                        <input type="hidden" class="input-sm form-control input-sm" id="dColorsId" name="dColorsId" readonly="readonly">
                                        <input type="hidden" class="input-sm form-control input-sm" id="dOffer" name="dOfferDescription" readonly="readonly">
                                    </div>
                                    @Html.ValidationMessageFor(m => m.SODetail.ProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.DamageIMEINO, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.DamageIMEINO, new { htmlAttributes = new { @class = "input-sm form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.DamageIMEINO, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.ColorName, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    <input type="text" class="input-sm form-control input-sm" id="dColorName" name="dColorName" readonly="readonly">
                                    @Html.ValidationMessageFor(m => m.SODetail.ColorName, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.UnitPrice, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    <input type="text" class="input-sm form-control input-sm" id="dUnitPrice" name="dUnitPrice" readonly="readonly">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            @*<div class="form-group">
                                    <b><span id="SalesOrder_OfferDescription" class="tag">@Model.SalesOrder.OfferDescription</span></b>
                                </div>*@
                            <div class="form-group">
                                 <input autofocus="autofocus" placeholder="Enter Replacement IMEI" class="input-sm form-control text-box single-line" id="externalReplacementIMEINO" name="externalReplacementIMEINO" style="margin-left: 5px !important;margin-right: 5px !important; width:98%;" type="text" value="">
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group">
                                @Html.Label("Replace Product", new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    <div class="input-group">
                                        @if (User.IsInRole("Mobile User"))
                                        {
                                            //Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.ProductDetail, id = (Model != null && Model.SODetail.ProductId != null) ? Model.SODetail.ProductId : "0" });
                                            Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.SRProductDetail, id = (Model != null && Model.SODetail.ProductId != null) ? Model.SODetail.ProductId : "0" });
                                        }
                                        else
                                        {
                                            Html.RenderAction("RenderPicker", "Picker", new { pickerType = PickerType.ProductDetail, id = (Model != null && Model.SODetail.ProductId != null) ? Model.SODetail.ProductId : "0" });
                                        }
                                    </div>
                                    @Html.ValidationMessageFor(m => m.SODetail.ProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.IMENo, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.IMENo, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.IMENo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.ColorName, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.ColorName, new { htmlAttributes = new { @class = "input-sm form-control", @readonly = "readonly" } })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SODetail.UnitPrice, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SODetail.UnitPrice, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number" } })
                                    @Html.HiddenFor(m => m.SODetail.Quantity, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", @readonly = "readonly" } })
                                    @Html.HiddenFor(m => m.SODetail.MRPRate, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01" } })
                                    @Html.ValidationMessageFor(m => m.SODetail.UnitPrice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                @Html.EditorFor(m => m.SODetail.Remarks, new { htmlAttributes = new { @class = "input-sm form-control input-sm", type = "text", placeholder = "Remarks" } })
                                @Html.ValidationMessageFor(m => m.SODetail.Remarks, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="pull-right">
                        <input type="submit" class="btn btn-sm btn-primary" name="addButton" value="Add to order" />
                        <button type="button" class="btn btn-sm btn-danger">Clear</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <div style="min-height:200px" class="table-responsive">
                        <table id="productTable"
                               data-toggle="table"
                               data-search="true"
                               data-click-to-select="true"
                               data-single-select="true"
                               data-detail-view="true"
                               data-pagination="true"
                               data-id-field="name"
                               data-page-list="[10, 25, 50, 100, ALL]"
                               data-page-size="6"
                               data-height="300"
                               class="table table-responsive table-bordered table-striped text-nowrap" cellspacing="0" width="100%">
                            <thead>
                                <tr>
                                    <th data-field="count">
                                        Sl
                                    </th>
                                    <th data-field="ProductName"
                                        data-sortable="true">
                                        Product
                                    </th>
                                    <th data-field="DamageIMEINO"
                                        data-sorter="sorter"
                                        data-sortable="true">
                                        @*@Html.DisplayNameFor(model => model.SODetail.DamageIMEINO)*@
                                        DamageIMEI NO
                                    </th>
                                    <th data-field="ReplaceIMEINO"
                                        data-sortable="true">
                                        @*@Html.DisplayNameFor(model => model.SODetail.ReplaceIMEINO)*@
                                        ReplaceIMEINO
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                          int count = 1;
                                          foreach (var item in Model.SODetails)
                                          {
                                              if (item.Status == EnumStatus.Updated || item.Status == EnumStatus.Deleted) { continue; }
                                            <tr>
                                                <td>
                                                    @count
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.ProductName)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.DamageIMEINO)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => item.ReplaceIMEINO)
                                                </td>
                                            </tr>
                                              count++;
                                          }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6" style="padding-right: 5px !important;">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.DamageTotalAmount, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.DamageTotalAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.DamageTotalAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.ReplaceTotalAmount, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.ReplaceTotalAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.ReplaceTotalAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.AdjAmount, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.AdjAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.AdjAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6" style="padding-right: 5px !important;">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.TotalAmount, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.HiddenFor(m => m.SalesOrder.GrandTotal)
                                    @Html.EditorFor(m => m.SalesOrder.TotalAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.TotalAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.RecieveAmount, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.RecieveAmount, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.RecieveAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.SalesOrder.PaymentDue, new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(m => m.SalesOrder.PaymentDue, new { htmlAttributes = new { @class = "input-sm form-control input-sm text-right", type = "number", step = "0.01", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(m => m.SalesOrder.PaymentDue, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                    </div>
                    @*<div class="form-group">
                            <div class="col-md-offset-4 col-md-8">
                                <input type="submit" class="btn btn-sm btn-primary pull-right" name="submitButton" value="Save order" />
                            </div>
                        </div>*@
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="pull-right">
                                <input type="submit" class="btn btn-sm btn-primary" name="btnReplace" value="Replace" />
                                <button type="button" class="btn btn-sm btn-danger">Clear</button>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

<div class="modal fade bs-example-modal-lg" id="DamageProductDetailsModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h5 class="modal-title" id="myModalLabel">Sales ProductDetails</h5>
            </div>
            <div class="modal-body">
                <div id="ProductDetailstoolbar">
                    @Html.ActionLink("Create new", "Create", "Product", routeValues: null, htmlAttributes: new { @class = "btn btn-primary btn-sm", target = "_blank" })
                    <span class="text-warning">&nbsp;(Requires reload current page to get new item)</span>
                </div>
                <div class="table-responsive" style="max-height:200px">
                    <table id="DamageProductDetailsTable"
                           data-toggle="table"
                           data-search="true"
                           data-click-to-select="true"
                           data-single-select="true"
                           data-detail-view="true"
                           data-pagination="true"
                           data-id-field="name"
                           data-page-list="[10, 25, 50, 100, ALL]"
                           data-page-size="6"
                           class="table table-responsive table-bordered table-striped" cellspacing="0" width="100%">
                        <thead>
                            <tr>
                                @*<th data-field="id" class="hidden">
                                    </th>*@

                                <th>
                                    Sl
                                </th>
                                <th data-field="code"
                                    data-sortable="true">
                                    Code
                                </th>
                                <th data-field="name"
                                    data-sorter="sorter"
                                    data-sortable="true">
                                    Name
                                </th>
                                <th data-field="category"
                                    data-sorter="sorter"
                                    data-sortable="true">
                                    Category
                                </th>
                                @*<th data-field="detailId" class="hidden">
                                    </th>
                                    <th data-field="colorId" class="hidden">
                                    </th>*@
                                <th data-field="imeNo"
                                    data-sorter="sorter"
                                    data-sortable="true">
                                    IME No.
                                </th>
                                <th data-field="colorname"
                                    data-sorter="sorter"
                                    data-sortable="true">
                                    Color
                                </th>
                                <th data-field="mrpRate"
                                    data-sorter="sorter"
                                    data-sortable="true">
                                    MRP Rate
                                </th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script>
    $(document).ready(function () {
        $(window).keydown(function (event) {
            if (event.keyCode == 10 || event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });
    });

    $('#OrderDate').datetimepicker({
        @{
                if (Model == null || Model.SalesOrder.OrderDate == null) {
                    @:defaultDate: moment(),
                                                                                                                            }
                else
                {
            @:defaultDate:'@(Convert.ToDateTime(Model.SalesOrder.OrderDate).ToString("dd-MMM-yyyy"))',
                                                                                                                    }
            @:format: 'DD-MMM-YYYY'
                                                                                                                            }
    });

    //***********************************
    //Barcode Reader For Replacement IMEI
    //***********************************

    $("#externalReplacementIMEINO").on("input", function () {
        setTimeout(function () {
            $.ajax({
                url: "/ReplacementOrder/GetProductDetailByIMEINo",
                type: "GET",
                data: { 'imeiNo': $("#externalReplacementIMEINO").val() },
                dataType: "json",
                success: function (data) {
                    setPickerControls(data);
                    $("#externalReplacementIMEINO").val('');
                    $("#externalDamageIMEINO").attr('autofocus', 'autofocus');
                },
                error: function (err) {
                    clearPickerControls();
                    console.error(JSON.stringify(err));
                }
            });
        }, @((User.Identity.GetConcernId() == 5 || User.Identity.GetConcernId() == 6 || User.Identity.GetConcernId() == 1) ? 1000 : 200));
    });


    function setPickerControls(data) {
        if (data && data.Code != '') {
            $("#ProductDetailsCode").val(data.Code);
            $("#ProductDetailsName").val(data.Name);
            $("#ProductDetailsId").val(data.Id);
            $("#StockDetailsId").val(data.StockDetailId);
            $("#ColorsId").val(data.ColorId);
            $("#SODetail_ColorName").val(data.ColorName);
            $("#SalesOrder_OfferDescription").text(data.OfferDescription);
            $("#Offer").val(data.OfferDescription);
            $("#SODetail_Quantity").val(1);
            $("#SODetail_IMENo").val(data.IMEINo);
            $("#SODetail_MRPRate").val(data.MrpRate).trigger("input");
        }
        else {
            clearPickerControls();
        }
    }

    function clearPickerControls() {
        $("#ProductDetailsCode").val('');
        $("#ProductDetailsName").val('');
        $("#ProductDetailsId").val('');
        $("#StockDetailsId").val('');
        $("#ColorsId").val('');
        $("#SODetail_ColorName").val('');
        $("#Offer").val('');
        $("#SalesOrder_OfferDescription").val('');
        $("#SODetail_Quantity").val('');
        $("#SODetail_IMENo").val('');
        $("#SODetail_MRPRate").val('').trigger("input");
    }

    //**********************
    //end Replacement IMEI
    //**********************

    //***********************************
    //Barcode Reader For Damage IMEI
    //***********************************

    $("#externalDamageIMEINO").on("input", function () {
        var CustomerID =getDefaultFloatIfEmpty($("#CustomersId").val());
        if(CustomerID==0){
            toastr.info('Select Customer');
            return;
        }
        setTimeout(function () {
            $.ajax({
                url: "/ReplacementOrder/GetDamageProductDetailByIMEINo",
                type: "GET",
                data: { 'imeiNo': $("#externalDamageIMEINO").val(),'CustomerID':CustomerID },
                dataType: "json",
                success: function (data) {
                    setDamagePickerControls(data);
                    $("#externalDamageIMEINO").val('');
                    $("#externalDamageIMEINO").attr('autofocus', 'autofocus');
                },
                error: function (err) {
                    clearDamagePickerControls();
                    console.error(JSON.stringify(err));
                }
            });
        }, @((User.Identity.GetConcernId() == 5 || User.Identity.GetConcernId() == 6 || User.Identity.GetConcernId() == 1) ? 1000 : 200));
    });


    function setDamagePickerControls(data) {
        if (data && data.Code != '') {
            $("#dProductCode").val(data.Code);
            $("#dProductDetailsName").val(data.Name);
            $("#dProductDetailsId").val(data.Id);
            $("#dStockDetailsId").val(data.StockDetailId);
            $("#dColorsId").val(data.ColorId);
            $("#dColorName").val(data.ColorName);
            $("#SODetail_Quantity").val(1);
            $("#SODetail_DamageIMEINO").val(data.IMEINo);
            $('#dUnitPrice').val(data.MrpRate);
            $('#dMRPRate').val(data.MrpRate);
            $('#dProductDetailsId').val(data.ProductId);
            $('#dQuantity').val("1");
        }
        else {
            clearDamagePickerControls();
        }
    }

    function clearDamagePickerControls() {
        $("#ProductDetailsCode").val('');
        $("#ProductDetailsName").val('');
        $("#ProductDetailsId").val('');
        $("#StockDetailsId").val('');
        $("#ColorsId").val('');
        $("#SODetail_ColorName").val('');
        $("#Offer").val('');
        $("#SalesOrder_OfferDescription").val('');
        $("#SODetail_Quantity").val('');
        $("#SODetail_IMENo").val('');
        $("#SODetail_MRPRate").val('').trigger("input");
    }

    //**********************
    //end Barcode Damage IMEI
    //**********************

    $("#SODetail_MRPRate").on("input", function () {
        var mrpRate = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#SODetail_UnitPrice").val(mrpRate);
        $("#SODetail_UTAmount").val(mrpRate);
    });

    $("#SODetail_UnitPrice").on("input", function () {
        var unitRate = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#SODetail_UTAmount").val(unitRate);
    });

    //************************************************************
    //Get All Sales Product by Customer  to generate Damage Picker
    //************************************************************
    var _ProductDetails = [];
    function GetSalesProductByCustomerID(){
        _ProductDetails = [];
        var CustomerID =getDefaultFloatIfEmpty($("#CustomersId").val());
        if(CustomerID==0)
        {
            toastr.info('Select Customer')
            return;
        }
        $.ajax({
            url: "/ReplacementOrder/GetSalesProductDetailByCustomerID",
            type: "GET",
            data: { 'CustomerID': CustomerID },
            dataType: "json",
            success: function (data) {
                _ProductDetails = data;
                PopulateDamageProductDetailsTable(data);
                $('#DamageProductDetailsModal').modal('toggle');
            },
            error: function (err) {

            }
        });
    }


    //Generate damage product picker
    function PopulateDamageProductDetailsTable(data){

        var $table = $("#DamageProductDetailsTable >tbody");
        $table.empty();
        var counter = 1;
        data.forEach(function(item){
            var $row = $('<tr/>');
            $row.append('<td><input type="checkbox" class="chkbxProduct" name="chkbxProduct" id="chkbxProduct" value="'+item.IMENo+'"/></td><td>' + counter+ '</td><td>' + item.ProductCode+ '</td><td>'+item.ProductName+'</td><td>'+item.CategoryName+'</td><td>'+item.IMENo+'</td><td>'+item.ColorName+'</td><td>'+item.MRPRate+'</td>');
            $table.append($row);
            counter++;
        });
    }

    //************************************************************
    //End generate Damage Picker
    //************************************************************

    //damage picker product select event
    $(document).on('change','input.chkbxProduct', function() {
        $('input.chkbxProduct').not(this).prop('checked', false);
        SelectProductDetails(this.value);
    });


    //for damage Product
    function SelectProductDetails(IMENo){
        //alert(ProductId);
        if(IMENo==""){
            ClearDamageProductDetails();
            return;
        }
        $.each(_ProductDetails, function(i, item) {
            if (item.IMENo == IMENo) {
                $('#dProductCode').val(item.ProductCode);
                $('#dProductDetailsName').val(item.ProductName);
                $('#dSODetail_ProductId').val(item.ProductId);
                $('#dColorsId').val(item.ColorId);
                $('#dColorName').val(item.ColorName);
                $('#SODetail_DamageIMEINO').val(item.IMENo);
                $('#dUnitPrice').val(item.MRPRate);
                $('#dMRPRate').val(item.MRPRate);
                $('#dProductDetailsId').val(item.ProductId);
                $('#dStockDetailsId').val(item.StockDetailsId);
                $('#dQuantity').val("1");
                return;
            }
        });

    }

    function ClearDamageProductDetails(){
        $('#dProductCode').val("");
        $('#dProductDetailsName').val("");
        $('#dSODetail_ProductId').val("");
        $('#dColorsId').val("");
        $('#dColorName').val("");
        $('#SODetail_DamageIMEINO').val("");
        $('#dUnitPrice').val("");
        $('#dMRPRate').val("");
        $('#dProductDetailsId').val("");
        $('#dStockDetailsId').val("");
        $('#dQuantity').val("1");
    }




    $("#SODetail_MRPRate").on("input", function () {
        var mrpRate = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#SODetail_UnitPrice").val(mrpRate);
        $("#SODetail_UTAmount").val(mrpRate);
    });

    $("#SODetail_UnitPrice").on("input", function () {
        var unitRate = getDefaultFloatIfEmpty($(this).val()).toFixed(2);
        $("#SODetail_UTAmount").val(unitRate);
    });



    $("#SalesOrder_RecieveAmount").on("input", function () {
        var totalAmount = getDefaultFloatIfEmpty($("#SalesOrder_GrandTotal").val());
        calculateVariousValue(totalAmount);
    });

    $("#SalesOrder_AdjAmount").on("input", function () {
        var totalAmount = getDefaultFloatIfEmpty($("#SalesOrder_GrandTotal").val());
        calculateVariousValue(totalAmount);
    });

    //$("#SalesOrder_CurrentDue").on("input", function () {
    //    if (window.location.pathname.toLowerCase() == "/salesorder/create") {
    //        var totalAmount = getDefaultFloatIfEmpty($("#SalesOrder_GrandTotal").val());
    //        var totalDiscountAmount = getDefaultFloatIfEmpty($("#SalesOrder_TotalDiscountAmount").val());
    //        var vatAmount = getDefaultFloatIfEmpty($("#SalesOrder_VATAmount").val());
    //        calculateVariousValue(totalDiscountAmount, vatAmount, totalAmount);
    //    }
    //});

    function calculateVariousValue(totalAmount) {
        var recieveAmount = getDefaultFloatIfEmpty($("#SalesOrder_RecieveAmount").val());
        var adjAmount = getDefaultFloatIfEmpty($("#SalesOrder_AdjAmount").val());

        $("#SalesOrder_TotalAmount").val(getDefaultFloatIfEmpty(totalAmount -adjAmount).toFixed(2));
        $("#SalesOrder_PaymentDue").val(getDefaultFloatIfEmpty((totalAmount - adjAmount) - recieveAmount).toFixed(2));
    }
</script>
